{
  "address": "0xD8e64D2046d55F1FcFe2F23FA2dfC3c6658B2BA4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "changeTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cooldowns",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dgtAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dspAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "levelUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "levelUpFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dgt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dsp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintVoyager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintVoyagerByWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "setFee1TokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token2",
          "type": "address"
        }
      ],
      "name": "setFee2TokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setToken0URI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testDelegatecall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vs",
          "type": "address"
        }
      ],
      "name": "testSetVs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vS",
      "outputs": [
        {
          "internalType": "contract VoyagerStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x59893ee424b1cc426b301b231865a2f1db9c7ff31db2a38eab3b0c0dab693d11",
  "receipt": {
    "to": null,
    "from": "0x6993AffA5572139D896B67Fe3A108B51EB6f8B53",
    "contractAddress": "0xD8e64D2046d55F1FcFe2F23FA2dfC3c6658B2BA4",
    "transactionIndex": 0,
    "gasUsed": "2561047",
    "logsBloom": "0x
    "blockHash": "0x22595a45e3735d1fbc9834f9976fb0771553b381e00c834e07f67fb4209cb0c0",
    "transactionHash": "0x59893ee424b1cc426b301b231865a2f1db9c7ff31db2a38eab3b0c0dab693d11",
    "logs": [],
    "blockNumber": 9531827,
    "cumulativeGasUsed": "2561047",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3c70c77d428e61bb6242bf0749abc803",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"changeTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dgtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dspAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"levelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelUpFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dgt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dsp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintVoyager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintVoyagerByWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"setFee1TokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"}],\"name\":\"setFee2TokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setToken0URI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testDelegatecall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vs\",\"type\":\"address\"}],\"name\":\"testSetVs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vS\",\"outputs\":[{\"internalType\":\"contract VoyagerStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cooldowns(uint256)\":{\"notice\":\"\\u4e0d\\u540c\\u7b49\\u7ea7\\u5347\\u7ea7\\u7684\\u65f6\\u95f4\\u95f4\\u9694,\\u6700\\u5927cooldowns\\u662f7\\u5929\"},\"mintVoyager()\":{\"notice\":\"Mint Voyagers\\uff0c\\u521d\\u59cb\\u5316: 1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\"},\"mintVoyagerByWhitelist()\":{\"notice\":\"Mint Voyagers\\uff0c\\u521d\\u59cb\\u5316: 1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyager/VoyagerLogic.sol\":\"VoyagerLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/reference/Sig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Sig {\\n\\n    using ECDSA for bytes32;\\n\\n    function addressHash(address _addr) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_addr));\\n    }\\n\\n    function ethSignedHash(address _addr) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_addr)).toEthSignedMessageHash();\\n    }\\n\\n    function recover(bytes32 hash, bytes memory signature) public pure returns(address) {\\n        return hash.recover(signature);\\n    }\\n\\n    function verified(bytes32 hash, bytes memory signature, address signer) public pure returns (bool){\\n        return signer == recover(hash, signature);\\n    }\\n}\\n\",\"keccak256\":\"0x4ff42be9fde5215138aec5a4fd5c356ee2c77e96fc379168bac390025a62e5a7\",\"license\":\"MIT\"},\"contracts/voyager/BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract BaseStorage {\\n    address public dgtAddress;\\n    address public dspAddress;\\n\\n    uint public decimals = 10 ** 18;\\n\\n    struct FeeComponent {\\n        uint256 dgt;\\n        uint256 dsp;\\n    }\\n\\n    struct Voyager {\\n        // Level of Voyager is from 1 to 6\\n        uint8 level;\\n        // Id of the Voyager\\n        uint256 id;\\n        // todo: image of the Voyager\\u662f\\u5426\\u5728struct\\u4e2d\\u5c55\\u793a \\n    }\\n\\n    /*** CONSTANTS ***/\\n    /// \\u4e0d\\u540c\\u7b49\\u7ea7\\u5347\\u7ea7\\u7684\\u65f6\\u95f4\\u95f4\\u9694,\\u6700\\u5927cooldowns\\u662f7\\u5929\\n    uint32[5] public cooldowns = [\\n        uint32(30 minutes),\\n        uint32(1 days),\\n        uint32(2 days),\\n        uint32(4 days),\\n        uint32(7 days)\\n    ];\\n\\n    /*** STORAGE ***/\\n    uint256 public minLevel = 1;\\n    uint256 public maxLevel;\\n    uint256 public initialSupply = 1000;\\n\\n    FeeComponent[] public levelUpFees;\\n}\",\"keccak256\":\"0xcdd667a7e738d4c9efb2c491a155934157b38a305ada5117ecc66c8b7e16278d\",\"license\":\"MIT\"},\"contracts/voyager/VoyagerAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../reference/Sig.sol\\\";\\n\\ncontract VoyagerAccessControl is Ownable, ReentrancyGuard {\\n    using SafeMath for uint;\\n\\n    // event ContractUpgrade(address newContract);\\n    event AdminTransferred(address oldAdmin, address newAdmin);\\n\\n    address private _admin;\\n    address public proxy;\\n    bool public mintIsActive = true;\\n\\n    constructor() {\\n        _setAdmin(_msgSender());\\n    }\\n\\n    function verified(bytes32 hash, bytes memory signature) public view returns (bool){\\n        return admin() == Sig.recover(hash, signature);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current admin.\\n     */\\n    function admin() public view virtual returns (address) {\\n        return _admin;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(admin() == _msgSender(), \\\"Invalid Admin: caller is not the admin\\\");\\n        _;\\n    }\\n\\n    function _setAdmin(address newAdmin) private {\\n        address oldAdmin = _admin;\\n        _admin = newAdmin;\\n        emit AdminTransferred(oldAdmin, newAdmin);\\n    }\\n\\n    function setProxy(address _proxy) external onlyOwner {\\n        require(_proxy != address(0), \\\"Invalid Address\\\");\\n        proxy = _proxy;\\n    }\\n\\n    modifier onlyProxy() {\\n        require(proxy == _msgSender(), \\\"Not Permit: caller is not the proxy\\\"); \\n        _;\\n    }\\n\\n    modifier sigVerified(bytes memory signature) {\\n        require(verified(Sig.ethSignedHash(msg.sender), signature), \\\"Not verified\\\");\\n        _;\\n    }\\n\\n    modifier activeMint() {\\n        require(mintIsActive, \\\"Unactive to mint Voyager\\\");\\n        _;\\n    } \\n        \\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newAdmin`).\\n     * Can only be called by the current admin.\\n     */\\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Invalid Admin: new admin is the zero address\\\");\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /*\\n    * Pause sale if active, make active if paused\\n    */\\n    function flipMintableState() public onlyAdmin {\\n        mintIsActive = !mintIsActive;\\n    }\\n}\\n\",\"keccak256\":\"0x1a408690664c19438c7cc273ac64b24c1cb3b56d29099442eb0252ea05604773\",\"license\":\"MIT\"},\"contracts/voyager/VoyagerLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./VoyagerStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../reference/Sig.sol\\\";\\n\\n// 500\\u4e2a\\u521b\\u4e16\\u94f8\\u9020\\u6743\\uff0c\\u5176\\u4f59\\u94f8\\u9020\\u8981\\u6d88\\u8017DGT\\u548cDSP\\n// \\u6ee1\\u8db3\\u6761\\u4ef6\\u89e6\\u53d1NFT\\u5347\\u7ea7\\n// 1. \\u5c5e\\u6027\\u8bbe\\u7f6e\\uff1a\\u7b49\\u7ea7\\u3001\\u56fe\\u7247\\u3001\\u7f16\\u53f7\\n// \\n// \\u5408\\u7ea6\\u53ca\\u5176\\u529f\\u80fd\\uff1a\\n// 1. VoyagerAccessControl: \\u63a7\\u5236\\u64cd\\u4f5c\\u6743\\u9650\\n// 2. VoyagerBase: \\u901a\\u7528\\u57fa\\u7840\\u7684\\u6570\\u636e\\u7ed3\\u6784\\u3001\\u53d8\\u91cf\\n// 3. SaleClockAuction: \\u7528\\u4e8eVoyager\\u7684\\u62cd\\u5356\\u51fa\\u552e\\n\\n// /// @title The facet of the Voyager core contract that manages Voyager levelup.\\n// /// @author Andrew Fang (https://www.github.com/Andrew-DeepGo)\\n// /// @dev Ref: todo\\ncontract VoyagerLogic is BaseStorage, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    VoyagerStorage public vS;\\n    \\n    function testSetVs(address _vs) public {\\n        vS = VoyagerStorage(_vs);\\n    }\\n\\n    function testDelegatecall() external view returns (uint){\\n        return vS.getTokenIDWithoutURI(msg.sender);\\n    }\\n\\n    /**\\n    * Mint Voyagers\\uff0c\\u521d\\u59cb\\u5316: 1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\\n    */\\n    function mintVoyagerByWhitelist() external\\n    {\\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \\\"Set tokenURI first\\\");\\n        // require(verified(Sig.ethSignedHash(msg.sender), signature), \\\"Not verified\\\");\\n        require(!vS.getExpiredWhitelist(msg.sender), \\\"Expired\\\");\\n        // require(mintIsActive, \\\"Unactive to mint Voyager\\\");\\n        require(vS.getWhitelistExpired().add(1) <= vS.getMaxWhitelisted(), \\n                            \\\"Mint would exceed max supply of Voyagers\\\");\\n        \\n        uint256 tokenID = vS.getTotalMinted();\\n        \\n        vS.mintVoyayer(msg.sender, tokenID);\\n        \\n        if (tokenID == 0) {\\n            vS._setTokenURI(tokenID, vS.getToken0URI());\\n        } else {\\n            vS.setTokenIDWithoutURI(msg.sender, tokenID);\\n        }\\n        \\n        vS.setTotalMinted(vS.getTotalMinted().add(1));\\n        vS.setExpiredWhitelist(msg.sender, true);\\n        vS.setWhitelistExpired(vS.getWhitelistExpired().add(1));\\n    }\\n\\n    /**\\n    * Mint Voyagers\\uff0c\\u521d\\u59cb\\u5316: 1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\\n    */\\n    function mintVoyager() public\\n    {\\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \\\"Set tokenURI first\\\");\\n        // require(verified(Sig.ethSignedHash(msg.sender), signature), \\\"Not verified\\\");\\n        // require(!expiredWhitelist[msg.sender], \\\"Expired\\\");\\n        // require(mintIsActive, \\\"Unactive to mint Voyager\\\");\\n        // require(whitelistExpired.add(1) <= maxWhitelisted, \\\"Mint would exceed max supply of Voyagers\\\");\\n        (uint fee1, uint fee2) = vS.getLevelUpFee(vS.minLevel());\\n        // \\u4f59\\u989d\\u8db3\\u591f\\n        require(IERC20(dgtAddress).balanceOf(msg.sender) >= fee1, \\n                                            \\\"Unsufficient dgt token\\\");\\n        require(IERC20(dspAddress).balanceOf(msg.sender) >= fee2, \\n                                    \\\"Unsufficient dsp token\\\");\\n        // todo: \\u8f6c\\u8d26DGT\\u5230\\u91d1\\u5e93\\u5408\\u7ea6\\n        IERC20(dgtAddress).safeTransferFrom(msg.sender, address(this), fee1);\\n        // todo: \\u9500\\u6bc1DSP\\n        IERC20(dspAddress).safeTransferFrom(msg.sender, address(this), fee2);\\n        \\n        uint256 tokenID = vS.getTotalMinted();\\n        \\n        vS.mintVoyayer(msg.sender, tokenID);\\n        \\n        if (tokenID == 0) {\\n            vS._setTokenURI(tokenID, vS.getToken0URI());\\n        } else {\\n            vS.setTokenIDWithoutURI(msg.sender, tokenID);\\n        }\\n        \\n        vS.setTotalMinted(vS.getTotalMinted().add(1));\\n        // expiredWhitelist[msg.sender] = true;\\n    }\\n\\n    function changeTokenURI(uint256 tokenID, string memory _tokenURI) public {\\n        vS._setTokenURI(tokenID, _tokenURI);\\n    }\\n    \\n    // tokenID\\u4e3a0\\u7684tokenURI \\n    function setToken0URI(string memory _tokenURI) public {\\n        vS.token0URI(_tokenURI);\\n    }\\n\\n    // \\u83b7\\u53d6address\\u5f85\\u751f\\u6210URI\\u7684tokenID\\uff1atokenIDWithoutURI[address]\\n\\n    // \\u83b7\\u53d6tokenID\\u7684level: levelOfVoyager[tokenID]\\n\\n    // \\u68c0\\u67e5\\u540e\\u7aef\\u53d6\\u56de\\u4e0e\\u5b58\\u50a8id\\uff0c\\n    function setTokenURI(uint256 _tokenid, uint256 _level, string memory _tokenURI) public {\\n        uint256 tokenID = vS.getTokenIDWithoutURI(msg.sender);\\n        uint256 level = vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level;\\n\\n        require(tokenID > 0, \\\"Unvalid token\\\");\\n        require(vS.ownerOf(tokenID) == msg.sender, \\\"Not owner\\\");\\n        require(_tokenid == tokenID, \\\"Consistent tokenID\\\");\\n        require(level == _level, \\\"Consistent level\\\");\\n        require(!vS.getSetByOwner(tokenID, level), \\\"Set over once\\\");\\n        vS._setTokenURI(tokenID, _tokenURI);\\n\\n        vS.setTokenIDWithoutURI(msg.sender, 0);\\n        vS.setSetByOwner(tokenID, level, true);\\n    }\\n\\n    // \\u5347\\u7ea7\\u903b\\u8f91,\\u66f4\\u65b0: 1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\\n    function levelUp(uint256 tokenID) public nonReentrant {\\n        require(tokenID != 0, \\\"Not 0 token\\\");\\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \\\"Unvalid token\\\");\\n        require(vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level < vS.maxLevel(), \\n                                                          \\\"Already max level\\\");\\n        uint fee1;\\n        uint fee2;\\n        uint level = vS.getLevel(tokenID);\\n        (fee1, fee2) = vS.getLevelUpFee(level);\\n        // \\u4f59\\u989d\\u8db3\\u591f\\n        require(IERC20(dgtAddress).balanceOf(msg.sender) >= fee1, \\n                                            \\\"Unsufficient dgt token\\\");\\n        require(IERC20(dspAddress).balanceOf(msg.sender) >= fee2, \\n                                    \\\"Unsufficient dsp token\\\");\\n        // todo: \\u8f6c\\u8d26DGT\\u5230\\u91d1\\u5e93\\u5408\\u7ea6\\n        IERC20(dgtAddress).safeTransferFrom(msg.sender, address(this), fee1);\\n        // todo: \\u9500\\u6bc1DSP\\n        IERC20(dspAddress).safeTransferFrom(msg.sender, address(this), fee2);\\n\\n        // \\u5b8c\\u6210\\u5347\\u7ea7\\uff0c\\u66f4\\u65b0\\u4e0d\\u540clevel\\u7684\\u6570\\u91cf\\uff0c\\bNFT\\u7684level\\n        vS.setTokenLevelCount(msg.sender, vS.getLevel(tokenID), \\n                    vS.getTokenLevelCount(msg.sender, vS.getLevel(tokenID))-1);\\n        vS.setLevel(tokenID, vS.getLevel(tokenID) + 1);\\n        // levelOfVoyager[tokenID] = voyagers[tokenID].level;\\n        vS.setTokenLevelCount(msg.sender, vS.getLevel(tokenID), \\n                    vS.getTokenLevelCount(msg.sender, vS.getLevel(tokenID))+1);\\n        vS.setTokenIDWithoutURI(msg.sender, tokenID);\\n\\n        // \\u66f4\\u65b0maxLevel\\n        if (vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level > vS.getMaxLevelOfOwner(msg.sender)) {\\n            vS.setMaxLevelOfOwner(msg.sender, vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level);\\n        }\\n    }\\n\\n    function setFee1TokenAddress(address _token1) external {\\n        dgtAddress = _token1;\\n    }\\n\\n    function setFee2TokenAddress(address _token2) external {\\n        dspAddress = _token2;\\n    }\\n\\n    // /* Test functions */\\n    // function testMintVoyager(\\n    //     bytes memory signature\\n    // ) public view returns (bool)\\n    // {\\n    //     // require(vS.getTokenIDWithoutURI(msg.sender) == 0, \\\"Set tokenURI first\\\");\\n    //     return Sig.verified(Sig.ethSignedHash(msg.sender), signature, admin());\\n    // }\\n}\\n\",\"keccak256\":\"0x29163edb5f4ed32358a1e3e752ca9eb7bfec16f0acc9c2f60979cc656f697c51\",\"license\":\"MIT\"},\"contracts/voyager/VoyagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./VoyagerAccessControl.sol\\\";\\nimport \\\"./BaseStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"../reference/Sig.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ncontract VoyagerStorage is ERC721, IERC721Enumerable, BaseStorage, VoyagerAccessControl {\\n    using SafeMath for uint;\\n    // using SafeERC20 for IERC20;\\n\\n    /// @dev An array containing the Voyager struct for all Voyagers in existence. The ID of\\n    /// each Voyager is actually an index into this array.\\n    Voyager[] public voyagers;\\n\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => Voyager)) public ownedVoyagers;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) public ownedVoyagersIndex;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) public allVoyagersIndex;\\n\\n    /// @dev A mapping from Voyager to the max level of the Voyager. \\n    mapping (address => uint256) public maxLevelOfOwner;\\n\\n    /// @dev A mapping from owner to token amount of each level. \\n    mapping (address => mapping(uint256 => uint256)) public tokenLevelCount;\\n\\n    mapping(uint256 => string) private _tokenURIs;\\n    mapping(uint256 => mapping(uint256 => bool)) public setByOwner; // tokenURI is set by owner in certain level\\n    mapping(address => uint256) private _tokenIDWithoutURI;\\n    mapping (address => bool) private _expiredWhitelist; \\n\\n    uint private _maxWhitelisted = 1000;\\n    uint private _totalMinted;\\n    uint private _whitelistExpired;\\n    string private _token0URI;\\n\\n    constructor(uint256 _maxLevel) ERC721(\\\"Voyager\\\", \\\"VOG\\\")  {\\n        maxLevel = _maxLevel;\\n        initialLevelUpFees();\\n    }\\n    \\n    function getVoyager(uint _index) public view returns (Voyager memory){\\n        return voyagers[_index];\\n    }\\n    \\n    function getSetByOwner(uint _tokenId, uint _level) public view returns (bool) {\\n        return setByOwner[_tokenId][_level];\\n    }\\n\\n    function setSetByOwner(uint _tokenId, uint _level, bool _isSet) public onlyProxy{\\n        setByOwner[_tokenId][_level] = _isSet;\\n    }\\n    \\n\\n    function getTokenIDWithoutURI(address _addr) public view returns (uint) {\\n        return _tokenIDWithoutURI[_addr];\\n    }\\n\\n    function setTokenIDWithoutURI(address _addr, uint _tokenId) public onlyProxy {\\n        _tokenIDWithoutURI[_addr] = _tokenId;\\n    }\\n\\n    function getMaxWhitelisted() public view returns (uint) {\\n        return _maxWhitelisted;\\n    }\\n\\n    function getTotalMinted() public view returns (uint) {\\n        return _totalMinted;\\n    }\\n\\n    function setTotalMinted(uint _amount) public onlyProxy {\\n        _totalMinted = _amount;\\n    }\\n\\n    function getWhitelistExpired() public view returns (uint){\\n        return _whitelistExpired;\\n    }\\n\\n    function setWhitelistExpired(uint _amount) public onlyProxy {\\n        _whitelistExpired = _amount;\\n    }\\n\\n    function getToken0URI() public view returns (string memory) {\\n        return _token0URI;\\n    }\\n\\n    function token0URI(string memory _string) public onlyProxy {\\n        _token0URI = _string;\\n    }\\n\\n    function getExpiredWhitelist(address _addr) public view returns (bool) {\\n        return _expiredWhitelist[_addr];\\n    }\\n\\n    function setExpiredWhitelist(address _addr, bool _isExpired) public onlyProxy {\\n        _expiredWhitelist[_addr] = _isExpired;\\n    }\\n\\n    function getAllVoyagerIndex(uint _tokenId) public view returns (uint) {\\n        return allVoyagersIndex[_tokenId];\\n    }\\n\\n    function getMaxLevelOfOwner(address _addr) public view returns (uint) {\\n        return maxLevelOfOwner[_addr];\\n    }\\n\\n    function setMaxLevelOfOwner(address _addr, uint _level) public onlyProxy {\\n        maxLevelOfOwner[_addr] = _level;\\n    }\\n\\n    function getTokenLevelCount(address _addr, uint _level) public view returns (uint) {\\n        return tokenLevelCount[_addr][_level];\\n    }\\n\\n    function setTokenLevelCount(address _addr, uint _level, uint _amount) public onlyProxy {\\n        tokenLevelCount[_addr][_level] = _amount;\\n    }\\n\\n    function mintVoyayer(address _addr, uint _tokenId) public onlyProxy {\\n        _safeMint(_addr, _tokenId);\\n    }\\n\\n    function transfer(address _to, uint _tokenId) public {\\n        _safeTransfer(msg.sender, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return ownedVoyagers[owner][index].id;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return voyagers.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < VoyagerStorage.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return voyagers[index].id;\\n    }\\n\\n    function initialLevelUpFees() internal {\\n        for (uint i=0; i < maxLevel; i++) {\\n            levelUpFees.push(FeeComponent(i.add(1).mul(10 * decimals),i.add(1).mul(100 * decimals)));\\n        }\\n    }\\n\\n        // \\u5728transfer\\u4e4b\\u524d\\u66f4\\u65b0:1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override virtual {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n            _updateSenderMaxLevel(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n            _updateReceiverMaxLevel(to, tokenId);\\n            tokenLevelCount[to][voyagers[allVoyagersIndex[tokenId]].level] += 1;\\n        }\\n    }\\n\\n    function _updateSenderMaxLevel(address from, uint256 tokenId) private {\\n        // update from address maxLevel\\n        uint curLevel = voyagers[allVoyagersIndex[tokenId]].level;\\n        require(curLevel <= maxLevelOfOwner[from], \\\"Level over max\\\");\\n        // ownershipTokenCount[from] -= 1;\\n        tokenLevelCount[from][curLevel] -= 1;\\n\\n        if (ERC721.balanceOf(from) == 0) {\\n            maxLevelOfOwner[from] = 0;\\n        } else if ( curLevel == maxLevelOfOwner[from] ) {\\n            for (; curLevel > 0; curLevel--) {\\n                if (tokenLevelCount[from][curLevel] > 0) {\\n                    maxLevelOfOwner[from] = curLevel;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _updateReceiverMaxLevel(address to, uint256 tokenId) private {\\n        // update to address maxLevel\\n        uint curLevel = voyagers[allVoyagersIndex[tokenId]].level;\\n        if (curLevel > maxLevelOfOwner[to]) {\\n            maxLevelOfOwner[to] = curLevel;\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        ownedVoyagers[to][length] = voyagers[allVoyagersIndex[tokenId]];\\n        ownedVoyagersIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        allVoyagersIndex[tokenId] = voyagers.length;\\n        if (tokenId == 0) {\\n            voyagers.push(Voyager(uint8(maxLevel), tokenId));\\n        } else {\\n            voyagers.push(Voyager(uint8(minLevel), tokenId));\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = ownedVoyagersIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            Voyager  storage lastVoyager = ownedVoyagers[from][lastTokenIndex];\\n\\n            ownedVoyagers[from][tokenIndex] = lastVoyager; // Move the last token to the slot of the to-delete token\\n            ownedVoyagersIndex[lastVoyager.id] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete ownedVoyagersIndex[tokenId];\\n        delete ownedVoyagers[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n        \\n        // token array\\u7684max index \\n        uint256 lastTokenIndex = voyagers.length - 1;\\n        // \\u88ab\\u5220\\u9664token\\u6240\\u5728\\u7684array index\\n        uint256 tokenIndex = allVoyagersIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        \\n        // token array\\u4e2dmax index\\u7684token id\\n        Voyager storage lastVoyager = voyagers[lastTokenIndex];\\n\\n        // \\u7528\\u6700\\u540e\\u4e00\\u4e2aVoyager\\u66ff\\u6362\\u88ab\\u5220\\u9664\\u7684\\u90a3\\u4e2a\\n        voyagers[tokenIndex] = lastVoyager; // Move the last token to the slot of the to-delete token\\n        // \\u66f4\\u65b0\\u6700\\u540e\\u4e00\\u4e2atoken\\u7684index\\n        allVoyagersIndex[lastVoyager.id] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete allVoyagersIndex[tokenId];\\n        voyagers.pop();\\n    }\\n\\n    /// @dev Updates the level up fee as well as mint fee. Can only\\n    ///  be called by the Admin address.\\n    /// todo: \\u53ef\\u8bbe\\u7f6emaxLevel\\n    /// todo: \\u52a0maxLevel\\u9650\\u5236\\u6761\\u4ef6\\n    /// todo\\uff1a\\u52a0\\u63a5\\u53e3\\u83b7\\u53d6\\u94f8\\u9020\\u6216\\u5347\\u7ea7\\u7684\\u8d39\\u7528\\n    function setLevelUpFee(uint256 _toLevel, uint256 _dgt, uint256 _dsp) external onlyOwner {\\n        require(_toLevel <= maxLevel, \\\"Over max level\\\");\\n        require(levelUpFees.length >= _toLevel-1, \\\"Add fee from low level\\\");\\n        if (levelUpFees.length == _toLevel-1) {\\n            levelUpFees.push(FeeComponent(_dgt, _dsp));\\n        } else {\\n            levelUpFees[_toLevel-1] = FeeComponent(_dgt, _dsp);\\n        }\\n    }\\n\\n    function setCoolDown(uint256 _toLevel, uint32 _interval) external onlyOwner {\\n        require (_toLevel > 1 && _toLevel <= cooldowns.length.add(1), \\\"Over max level\\\"); \\n        cooldowns[_toLevel-2] = _interval;\\n    }\\n\\n\\n    /// @dev The address of the ClockAuction contract that handles sales of Kitties. \\n    /// This same contract handles both peer-to-peer.\\n    // SaleClockAuction public saleAuction;\\n    // todo\\uff1a\\u83b7\\u53d6\\u5347\\u7ea7\\u7684\\u8d39\\u7528\\n    function getLevelUpFee(uint256 level) public view returns (uint, uint) {\\n        return (levelUpFees[level].dgt, levelUpFees[level].dsp);\\n    }\\n\\n    function getLevel(uint tokenId) public view returns (uint){\\n        return voyagers[allVoyagersIndex[tokenId]].level;\\n    }\\n\\n    function setLevel(uint tokenId, uint level) public onlyProxy {\\n        voyagers[allVoyagersIndex[tokenId]].level = uint8(level);\\n    }\\n\\n    /*     \\n    * Set URI for NFT with tokenId \\n    */\\n    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) public virtual onlyProxy {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[_tokenId] = _tokenURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        \\n        return _tokenURI;\\n    }\\n\\n    function setFee1TokenAddress(address _token1) public onlyProxy {\\n        dgtAddress = _token1;\\n    }\\n\\n    function setFee2TokenAddress(address _token2) public onlyProxy {\\n        dspAddress = _token2;\\n    }\\n}\\n\",\"keccak256\":\"0x3b59d9ac76ee2282f5b718197f6b22677d3d94ee71dcbd5a7492ddbcd0d7853e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x670de0b6b3a764000060025561012060405261070860809081526201518060a0526202a30060c0526205460060e05262093a8061010052620000469060039060056200006b565b5060016004556103e86006553480156200005f57600080fd5b50600160085562000125565b600183019183908215620000fc5791602002820160005b83821115620000c857835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030262000082565b8015620000fa5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620000c8565b505b506200010a9291506200010e565b5090565b5b808211156200010a57600081556001016200010f565b612b3d80620001356000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063942eb8c3116100ad578063b7d1070711610071578063b7d1070714610270578063c1cd3338146102a0578063c2e8dd4a146102a8578063cc06c359146102d8578063e3e7688a146102e157600080fd5b8063942eb8c3146101f457806396fe4288146102245780639d6fac6f1461022d578063a1382b5a14610255578063aa30c4b71461025d57600080fd5b806338e514fe116100f457806338e514fe1461018857806353bb0ab3146101b35780637a599e81146101c65780637fb3a9a2146101d957806393d31cff146101ec57600080fd5b80630ce90ec2146101265780631dd3a3651461013b578063313ce56714610168578063378dc3dc1461017f575b600080fd5b6101396101343660046128b5565b6102f4565b005b61014e6101493660046128b5565b6110d5565b604080519283526020830191909152015b60405180910390f35b61017160025481565b60405190815260200161015f565b61017160065481565b60015461019b906001600160a01b031681565b6040516001600160a01b03909116815260200161015f565b6101396101c136600461294d565b611103565b6101396101d43660046127b3565b6115f7565b6101396101e73660046128e5565b61165c565b6101396116c3565b61013961020236600461275b565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61017160045481565b61024061023b3660046128b5565b611d50565b60405163ffffffff909116815260200161015f565b610171611d80565b60095461019b906001600160a01b031681565b61013961027e36600461275b565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b610139611e01565b6101396102b636600461275b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61017160055481565b60005461019b906001600160a01b031681565b6002600854141561034c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026008558061038c5760405162461bcd60e51b815260206004820152600b60248201526a2737ba1018103a37b5b2b760a91b6044820152606401610343565b600954604051630e4d620560e01b81523360048201526001600160a01b0390911690630e4d62059060240160206040518083038186803b1580156103cf57600080fd5b505afa1580156103e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040791906128cd565b156104445760405162461bcd60e51b815260206004820152600d60248201526c2ab73b30b634b2103a37b5b2b760991b6044820152606401610343565b600960009054906101000a90046001600160a01b03166001600160a01b031663cc06c3596040518163ffffffff1660e01b815260040160206040518083038186803b15801561049257600080fd5b505afa1580156104a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca91906128cd565b6009546040516304252ae160e51b8152600481018490526001600160a01b0390911690637e5ea2829082906384a55c209060240160206040518083038186803b15801561051657600080fd5b505afa15801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e91906128cd565b6040518263ffffffff1660e01b815260040161056c91815260200190565b604080518083038186803b15801561058357600080fd5b505afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190612859565b5160ff16106106005760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e481b585e081b195d995b607a1b6044820152606401610343565b600954604051630219207560e61b815260048101839052600091829182916001600160a01b0316906386481d409060240160206040518083038186803b15801561064957600080fd5b505afa15801561065d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068191906128cd565b600954604051632f40faf760e01b8152600481018390529192506001600160a01b031690632f40faf790602401604080518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd919061292a565b6000546040516370a0823160e01b815233600482015292955090935084916001600160a01b03909116906370a082319060240160206040518083038186803b15801561074857600080fd5b505afa15801561075c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078091906128cd565b10156107c75760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103233ba103a37b5b2b760511b6044820152606401610343565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561080a57600080fd5b505afa15801561081e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084291906128cd565b10156108895760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103239b8103a37b5b2b760511b6044820152606401610343565b6000546108a1906001600160a01b0316333086612448565b6001546108b9906001600160a01b0316333085612448565b600954604051630219207560e61b8152600481018690526001600160a01b03909116906380ea5a8390339083906386481d409060240160206040518083038186803b15801561090757600080fd5b505afa15801561091b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093f91906128cd565b600954604051630219207560e61b8152600481018a90526001916001600160a01b031690636d3f450b90339083906386481d409060240160206040518083038186803b15801561098e57600080fd5b505afa1580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c691906128cd565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610a0a57600080fd5b505afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4291906128cd565b610a4c9190612a80565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015610a9a57600080fd5b505af1158015610aae573d6000803e3d6000fd5b5050600954604051630219207560e61b8152600481018890526001600160a01b0390911692506370a93b369150869083906386481d409060240160206040518083038186803b158015610b0057600080fd5b505afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3891906128cd565b610b43906001612a68565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015610b8157600080fd5b505af1158015610b95573d6000803e3d6000fd5b5050600954604051630219207560e61b8152600481018890526001600160a01b0390911692506380ea5a839150339083906386481d409060240160206040518083038186803b158015610be757600080fd5b505afa158015610bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1f91906128cd565b600954604051630219207560e61b8152600481018a90526001600160a01b0390911690636d3f450b90339083906386481d409060240160206040518083038186803b158015610c6d57600080fd5b505afa158015610c81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca591906128cd565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610ce957600080fd5b505afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2191906128cd565b610d2c906001612a68565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015610d7a57600080fd5b505af1158015610d8e573d6000803e3d6000fd5b5050600954604051639d47207160e01b8152336004820152602481018890526001600160a01b039091169250639d4720719150604401600060405180830381600087803b158015610dde57600080fd5b505af1158015610df2573d6000803e3d6000fd5b505060095460405163984027a760e01b81523360048201526001600160a01b03909116925063984027a7915060240160206040518083038186803b158015610e3957600080fd5b505afa158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7191906128cd565b6009546040516304252ae160e51b8152600481018790526001600160a01b0390911690637e5ea2829082906384a55c209060240160206040518083038186803b158015610ebd57600080fd5b505afa158015610ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef591906128cd565b6040518263ffffffff1660e01b8152600401610f1391815260200190565b604080518083038186803b158015610f2a57600080fd5b505afa158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f629190612859565b5160ff1611156110ca576009546040516304252ae160e51b8152600481018690526001600160a01b0390911690630d2176ed9033908390637e5ea2829082906384a55c209060240160206040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa91906128cd565b6040518263ffffffff1660e01b815260040161101891815260200190565b604080518083038186803b15801561102f57600080fd5b505afa158015611043573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110679190612859565b5160405160e084901b6001600160e01b03191681526001600160a01b03909216600483015260ff166024820152604401600060405180830381600087803b1580156110b157600080fd5b505af11580156110c5573d6000803e3d6000fd5b505050505b505060016008555050565b600781815481106110e557600080fd5b60009182526020909120600290910201805460019091015490915082565b600954604051630e4d620560e01b81523360048201526000916001600160a01b031690630e4d62059060240160206040518083038186803b15801561114757600080fd5b505afa15801561115b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117f91906128cd565b6009546040516304252ae160e51b8152600481018390529192506000916001600160a01b0390911690637e5ea2829082906384a55c209060240160206040518083038186803b1580156111d157600080fd5b505afa1580156111e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120991906128cd565b6040518263ffffffff1660e01b815260040161122791815260200190565b604080518083038186803b15801561123e57600080fd5b505afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112769190612859565b5160ff169050816112b95760405162461bcd60e51b815260206004820152600d60248201526c2ab73b30b634b2103a37b5b2b760991b6044820152606401610343565b6009546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b1580156112fd57600080fd5b505afa158015611311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113359190612777565b6001600160a01b0316146113775760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610343565b8185146113bb5760405162461bcd60e51b815260206004820152601260248201527110dbdb9cda5cdd195b9d081d1bdad95b925160721b6044820152606401610343565b8381146113fd5760405162461bcd60e51b815260206004820152601060248201526f10dbdb9cda5cdd195b9d081b195d995b60821b6044820152606401610343565b600954604051637538bcfd60e01b815260048101849052602481018390526001600160a01b0390911690637538bcfd9060440160206040518083038186803b15801561144857600080fd5b505afa15801561145c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114809190612793565b156114bd5760405162461bcd60e51b815260206004820152600d60248201526c536574206f766572206f6e636560981b6044820152606401610343565b600954604051622a710d60e31b81526001600160a01b03909116906301538868906114ee90859087906004016129f6565b600060405180830381600087803b15801561150857600080fd5b505af115801561151c573d6000803e3d6000fd5b5050600954604051639d47207160e01b8152336004820152600060248201526001600160a01b039091169250639d4720719150604401600060405180830381600087803b15801561156c57600080fd5b505af1158015611580573d6000803e3d6000fd5b505060095460405163682fffaf60e01b81526004810186905260248101859052600160448201526001600160a01b03909116925063682fffaf9150606401600060405180830381600087803b1580156115d857600080fd5b505af11580156115ec573d6000803e3d6000fd5b505050505050505050565b60095460405163a1b3d1ff60e01b81526001600160a01b039091169063a1b3d1ff906116279084906004016129e3565b600060405180830381600087803b15801561164157600080fd5b505af1158015611655573d6000803e3d6000fd5b5050505050565b600954604051622a710d60e31b81526001600160a01b039091169063015388689061168d90859085906004016129f6565b600060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b505050505050565b600954604051630e4d620560e01b81523360048201526001600160a01b0390911690630e4d62059060240160206040518083038186803b15801561170657600080fd5b505afa15801561171a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173e91906128cd565b156117805760405162461bcd60e51b815260206004820152601260248201527114d95d081d1bdad95b95549248199a5c9cdd60721b6044820152606401610343565b600954604051630554924960e51b81523360048201526001600160a01b039091169063aa9249209060240160206040518083038186803b1580156117c357600080fd5b505afa1580156117d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fb9190612793565b156118325760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b6044820152606401610343565b600960009054906101000a90046001600160a01b03166001600160a01b031663860998b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561188057600080fd5b505afa158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b891906128cd565b6119496001600960009054906101000a90046001600160a01b03166001600160a01b03166325ebda5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561190b57600080fd5b505afa15801561191f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194391906128cd565b906124a8565b11156119a85760405162461bcd60e51b815260206004820152602860248201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f6620604482015267566f79616765727360c01b6064820152608401610343565b60095460408051630ca1c5c960e01b815290516000926001600160a01b031691630ca1c5c9916004808301926020929190829003018186803b1580156119ed57600080fd5b505afa158015611a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2591906128cd565b600954604051634541a7fb60e11b8152336004820152602481018390529192506001600160a01b031690638a834ff690604401600060405180830381600087803b158015611a7257600080fd5b505af1158015611a86573d6000803e3d6000fd5b505050508060001415611b71576009546040805163b9e1bbf960e01b815290516001600160a01b03909216916301538868918491849163b9e1bbf9916004808301926000929190829003018186803b158015611ae157600080fd5b505afa158015611af5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b1d91908101906127e6565b6040518363ffffffff1660e01b8152600401611b3a9291906129f6565b600060405180830381600087803b158015611b5457600080fd5b505af1158015611b68573d6000803e3d6000fd5b50505050611bd6565b600954604051639d47207160e01b8152336004820152602481018390526001600160a01b0390911690639d47207190604401600060405180830381600087803b158015611bbd57600080fd5b505af1158015611bd1573d6000803e3d6000fd5b505050505b60095460408051630ca1c5c960e01b815290516001600160a01b03909216916316dbf90691611c2a916001918591630ca1c5c991600480820192602092909190829003018186803b15801561190b57600080fd5b6040518263ffffffff1660e01b8152600401611c4891815260200190565b600060405180830381600087803b158015611c6257600080fd5b505af1158015611c76573d6000803e3d6000fd5b505060095460405163ca0a9e3d60e01b8152336004820152600160248201526001600160a01b03909116925063ca0a9e3d9150604401600060405180830381600087803b158015611cc657600080fd5b505af1158015611cda573d6000803e3d6000fd5b5050600954604080516325ebda5b60e01b815290516001600160a01b03909216935063440372f89250611d329160019185916325ebda5b91600480820192602092909190829003018186803b15801561190b57600080fd5b6040518263ffffffff1660e01b815260040161162791815260200190565b60038160058110611d6057600080fd5b60089182820401919006600402915054906101000a900463ffffffff1681565b600954604051630e4d620560e01b81523360048201526000916001600160a01b031690630e4d62059060240160206040518083038186803b158015611dc457600080fd5b505afa158015611dd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfc91906128cd565b905090565b600954604051630e4d620560e01b81523360048201526001600160a01b0390911690630e4d62059060240160206040518083038186803b158015611e4457600080fd5b505afa158015611e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7c91906128cd565b15611ebe5760405162461bcd60e51b815260206004820152601260248201527114d95d081d1bdad95b95549248199a5c9cdd60721b6044820152606401610343565b600954604080516312dfc85160e31b8152905160009283926001600160a01b0390911691632f40faf79183916396fe428891600480820192602092909190829003018186803b158015611f1057600080fd5b505afa158015611f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4891906128cd565b6040518263ffffffff1660e01b8152600401611f6691815260200190565b604080518083038186803b158015611f7d57600080fd5b505afa158015611f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb5919061292a565b6000546040516370a0823160e01b815233600482015292945090925083916001600160a01b03909116906370a082319060240160206040518083038186803b15801561200057600080fd5b505afa158015612014573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203891906128cd565b101561207f5760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103233ba103a37b5b2b760511b6044820152606401610343565b6001546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b1580156120c257600080fd5b505afa1580156120d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fa91906128cd565b10156121415760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103239b8103a37b5b2b760511b6044820152606401610343565b600054612159906001600160a01b0316333085612448565b600154612171906001600160a01b0316333084612448565b60095460408051630ca1c5c960e01b815290516000926001600160a01b031691630ca1c5c9916004808301926020929190829003018186803b1580156121b657600080fd5b505afa1580156121ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ee91906128cd565b600954604051634541a7fb60e11b8152336004820152602481018390529192506001600160a01b031690638a834ff690604401600060405180830381600087803b15801561223b57600080fd5b505af115801561224f573d6000803e3d6000fd5b50505050806000141561233a576009546040805163b9e1bbf960e01b815290516001600160a01b03909216916301538868918491849163b9e1bbf9916004808301926000929190829003018186803b1580156122aa57600080fd5b505afa1580156122be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122e691908101906127e6565b6040518363ffffffff1660e01b81526004016123039291906129f6565b600060405180830381600087803b15801561231d57600080fd5b505af1158015612331573d6000803e3d6000fd5b5050505061239f565b600954604051639d47207160e01b8152336004820152602481018390526001600160a01b0390911690639d47207190604401600060405180830381600087803b15801561238657600080fd5b505af115801561239a573d6000803e3d6000fd5b505050505b60095460408051630ca1c5c960e01b815290516001600160a01b03909216916316dbf906916123f3916001918591630ca1c5c991600480820192602092909190829003018186803b15801561190b57600080fd5b6040518263ffffffff1660e01b815260040161241191815260200190565b600060405180830381600087803b15801561242b57600080fd5b505af115801561243f573d6000803e3d6000fd5b50505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526124a29085906124bb565b50505050565b60006124b48284612a68565b9392505050565b6000612510826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125929092919063ffffffff16565b80519091501561258d578080602001905181019061252e9190612793565b61258d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610343565b505050565b60606125a184846000856125a9565b949350505050565b60608247101561260a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610343565b843b6126585760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610343565b600080866001600160a01b0316858760405161267491906129c7565b60006040518083038185875af1925050503d80600081146126b1576040519150601f19603f3d011682016040523d82523d6000602084013e6126b6565b606091505b50915091506126c68282866126d1565b979650505050505050565b606083156126e05750816124b4565b8251156126f05782518084602001fd5b8160405162461bcd60e51b815260040161034391906129e3565b600082601f83011261271a578081fd5b813561272d61272882612a40565b612a0f565b818152846020838601011115612741578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121561276c578081fd5b81356124b481612aef565b600060208284031215612788578081fd5b81516124b481612aef565b6000602082840312156127a4578081fd5b815180151581146124b4578182fd5b6000602082840312156127c4578081fd5b813567ffffffffffffffff8111156127da578182fd5b6125a18482850161270a565b6000602082840312156127f7578081fd5b815167ffffffffffffffff81111561280d578182fd5b8201601f8101841361281d578182fd5b805161282b61272882612a40565b81815285602083850101111561283f578384fd5b612850826020830160208601612a97565b95945050505050565b60006040828403121561286a578081fd5b6040516040810181811067ffffffffffffffff8211171561288d5761288d612ad9565b604052825160ff811681146128a0578283fd5b81526020928301519281019290925250919050565b6000602082840312156128c6578081fd5b5035919050565b6000602082840312156128de578081fd5b5051919050565b600080604083850312156128f7578081fd5b82359150602083013567ffffffffffffffff811115612914578182fd5b6129208582860161270a565b9150509250929050565b6000806040838503121561293c578182fd5b505080516020909101519092909150565b600080600060608486031215612961578081fd5b8335925060208401359150604084013567ffffffffffffffff811115612985578182fd5b6129918682870161270a565b9150509250925092565b600081518084526129b3816020860160208601612a97565b601f01601f19169290920160200192915050565b600082516129d9818460208701612a97565b9190910192915050565b6020815260006124b4602083018461299b565b8281526040602082015260006125a1604083018461299b565b604051601f8201601f1916810167ffffffffffffffff81118282101715612a3857612a38612ad9565b604052919050565b600067ffffffffffffffff821115612a5a57612a5a612ad9565b50601f01601f191660200190565b60008219821115612a7b57612a7b612ac3565b500190565b600082821015612a9257612a92612ac3565b500390565b60005b83811015612ab2578181015183820152602001612a9a565b838111156124a25750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612b0457600080fd5b5056fea2646970667358221220135f8524d1f8fd5d8beca5ef4394b31a5b5a4f80b177440f16154adb0258818464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063942eb8c3116100ad578063b7d1070711610071578063b7d1070714610270578063c1cd3338146102a0578063c2e8dd4a146102a8578063cc06c359146102d8578063e3e7688a146102e157600080fd5b8063942eb8c3146101f457806396fe4288146102245780639d6fac6f1461022d578063a1382b5a14610255578063aa30c4b71461025d57600080fd5b806338e514fe116100f457806338e514fe1461018857806353bb0ab3146101b35780637a599e81146101c65780637fb3a9a2146101d957806393d31cff146101ec57600080fd5b80630ce90ec2146101265780631dd3a3651461013b578063313ce56714610168578063378dc3dc1461017f575b600080fd5b6101396101343660046128b5565b6102f4565b005b61014e6101493660046128b5565b6110d5565b604080519283526020830191909152015b60405180910390f35b61017160025481565b60405190815260200161015f565b61017160065481565b60015461019b906001600160a01b031681565b6040516001600160a01b03909116815260200161015f565b6101396101c136600461294d565b611103565b6101396101d43660046127b3565b6115f7565b6101396101e73660046128e5565b61165c565b6101396116c3565b61013961020236600461275b565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61017160045481565b61024061023b3660046128b5565b611d50565b60405163ffffffff909116815260200161015f565b610171611d80565b60095461019b906001600160a01b031681565b61013961027e36600461275b565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b610139611e01565b6101396102b636600461275b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61017160055481565b60005461019b906001600160a01b031681565b6002600854141561034c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026008558061038c5760405162461bcd60e51b815260206004820152600b60248201526a2737ba1018103a37b5b2b760a91b6044820152606401610343565b600954604051630e4d620560e01b81523360048201526001600160a01b0390911690630e4d62059060240160206040518083038186803b1580156103cf57600080fd5b505afa1580156103e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040791906128cd565b156104445760405162461bcd60e51b815260206004820152600d60248201526c2ab73b30b634b2103a37b5b2b760991b6044820152606401610343565b600960009054906101000a90046001600160a01b03166001600160a01b031663cc06c3596040518163ffffffff1660e01b815260040160206040518083038186803b15801561049257600080fd5b505afa1580156104a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca91906128cd565b6009546040516304252ae160e51b8152600481018490526001600160a01b0390911690637e5ea2829082906384a55c209060240160206040518083038186803b15801561051657600080fd5b505afa15801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e91906128cd565b6040518263ffffffff1660e01b815260040161056c91815260200190565b604080518083038186803b15801561058357600080fd5b505afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190612859565b5160ff16106106005760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e481b585e081b195d995b607a1b6044820152606401610343565b600954604051630219207560e61b815260048101839052600091829182916001600160a01b0316906386481d409060240160206040518083038186803b15801561064957600080fd5b505afa15801561065d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068191906128cd565b600954604051632f40faf760e01b8152600481018390529192506001600160a01b031690632f40faf790602401604080518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd919061292a565b6000546040516370a0823160e01b815233600482015292955090935084916001600160a01b03909116906370a082319060240160206040518083038186803b15801561074857600080fd5b505afa15801561075c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078091906128cd565b10156107c75760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103233ba103a37b5b2b760511b6044820152606401610343565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561080a57600080fd5b505afa15801561081e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084291906128cd565b10156108895760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103239b8103a37b5b2b760511b6044820152606401610343565b6000546108a1906001600160a01b0316333086612448565b6001546108b9906001600160a01b0316333085612448565b600954604051630219207560e61b8152600481018690526001600160a01b03909116906380ea5a8390339083906386481d409060240160206040518083038186803b15801561090757600080fd5b505afa15801561091b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093f91906128cd565b600954604051630219207560e61b8152600481018a90526001916001600160a01b031690636d3f450b90339083906386481d409060240160206040518083038186803b15801561098e57600080fd5b505afa1580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c691906128cd565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610a0a57600080fd5b505afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4291906128cd565b610a4c9190612a80565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015610a9a57600080fd5b505af1158015610aae573d6000803e3d6000fd5b5050600954604051630219207560e61b8152600481018890526001600160a01b0390911692506370a93b369150869083906386481d409060240160206040518083038186803b158015610b0057600080fd5b505afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3891906128cd565b610b43906001612a68565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015610b8157600080fd5b505af1158015610b95573d6000803e3d6000fd5b5050600954604051630219207560e61b8152600481018890526001600160a01b0390911692506380ea5a839150339083906386481d409060240160206040518083038186803b158015610be757600080fd5b505afa158015610bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1f91906128cd565b600954604051630219207560e61b8152600481018a90526001600160a01b0390911690636d3f450b90339083906386481d409060240160206040518083038186803b158015610c6d57600080fd5b505afa158015610c81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca591906128cd565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610ce957600080fd5b505afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2191906128cd565b610d2c906001612a68565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015610d7a57600080fd5b505af1158015610d8e573d6000803e3d6000fd5b5050600954604051639d47207160e01b8152336004820152602481018890526001600160a01b039091169250639d4720719150604401600060405180830381600087803b158015610dde57600080fd5b505af1158015610df2573d6000803e3d6000fd5b505060095460405163984027a760e01b81523360048201526001600160a01b03909116925063984027a7915060240160206040518083038186803b158015610e3957600080fd5b505afa158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7191906128cd565b6009546040516304252ae160e51b8152600481018790526001600160a01b0390911690637e5ea2829082906384a55c209060240160206040518083038186803b158015610ebd57600080fd5b505afa158015610ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef591906128cd565b6040518263ffffffff1660e01b8152600401610f1391815260200190565b604080518083038186803b158015610f2a57600080fd5b505afa158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f629190612859565b5160ff1611156110ca576009546040516304252ae160e51b8152600481018690526001600160a01b0390911690630d2176ed9033908390637e5ea2829082906384a55c209060240160206040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa91906128cd565b6040518263ffffffff1660e01b815260040161101891815260200190565b604080518083038186803b15801561102f57600080fd5b505afa158015611043573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110679190612859565b5160405160e084901b6001600160e01b03191681526001600160a01b03909216600483015260ff166024820152604401600060405180830381600087803b1580156110b157600080fd5b505af11580156110c5573d6000803e3d6000fd5b505050505b505060016008555050565b600781815481106110e557600080fd5b60009182526020909120600290910201805460019091015490915082565b600954604051630e4d620560e01b81523360048201526000916001600160a01b031690630e4d62059060240160206040518083038186803b15801561114757600080fd5b505afa15801561115b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117f91906128cd565b6009546040516304252ae160e51b8152600481018390529192506000916001600160a01b0390911690637e5ea2829082906384a55c209060240160206040518083038186803b1580156111d157600080fd5b505afa1580156111e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120991906128cd565b6040518263ffffffff1660e01b815260040161122791815260200190565b604080518083038186803b15801561123e57600080fd5b505afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112769190612859565b5160ff169050816112b95760405162461bcd60e51b815260206004820152600d60248201526c2ab73b30b634b2103a37b5b2b760991b6044820152606401610343565b6009546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b1580156112fd57600080fd5b505afa158015611311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113359190612777565b6001600160a01b0316146113775760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610343565b8185146113bb5760405162461bcd60e51b815260206004820152601260248201527110dbdb9cda5cdd195b9d081d1bdad95b925160721b6044820152606401610343565b8381146113fd5760405162461bcd60e51b815260206004820152601060248201526f10dbdb9cda5cdd195b9d081b195d995b60821b6044820152606401610343565b600954604051637538bcfd60e01b815260048101849052602481018390526001600160a01b0390911690637538bcfd9060440160206040518083038186803b15801561144857600080fd5b505afa15801561145c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114809190612793565b156114bd5760405162461bcd60e51b815260206004820152600d60248201526c536574206f766572206f6e636560981b6044820152606401610343565b600954604051622a710d60e31b81526001600160a01b03909116906301538868906114ee90859087906004016129f6565b600060405180830381600087803b15801561150857600080fd5b505af115801561151c573d6000803e3d6000fd5b5050600954604051639d47207160e01b8152336004820152600060248201526001600160a01b039091169250639d4720719150604401600060405180830381600087803b15801561156c57600080fd5b505af1158015611580573d6000803e3d6000fd5b505060095460405163682fffaf60e01b81526004810186905260248101859052600160448201526001600160a01b03909116925063682fffaf9150606401600060405180830381600087803b1580156115d857600080fd5b505af11580156115ec573d6000803e3d6000fd5b505050505050505050565b60095460405163a1b3d1ff60e01b81526001600160a01b039091169063a1b3d1ff906116279084906004016129e3565b600060405180830381600087803b15801561164157600080fd5b505af1158015611655573d6000803e3d6000fd5b5050505050565b600954604051622a710d60e31b81526001600160a01b039091169063015388689061168d90859085906004016129f6565b600060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b505050505050565b600954604051630e4d620560e01b81523360048201526001600160a01b0390911690630e4d62059060240160206040518083038186803b15801561170657600080fd5b505afa15801561171a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173e91906128cd565b156117805760405162461bcd60e51b815260206004820152601260248201527114d95d081d1bdad95b95549248199a5c9cdd60721b6044820152606401610343565b600954604051630554924960e51b81523360048201526001600160a01b039091169063aa9249209060240160206040518083038186803b1580156117c357600080fd5b505afa1580156117d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fb9190612793565b156118325760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b6044820152606401610343565b600960009054906101000a90046001600160a01b03166001600160a01b031663860998b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561188057600080fd5b505afa158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b891906128cd565b6119496001600960009054906101000a90046001600160a01b03166001600160a01b03166325ebda5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561190b57600080fd5b505afa15801561191f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194391906128cd565b906124a8565b11156119a85760405162461bcd60e51b815260206004820152602860248201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f6620604482015267566f79616765727360c01b6064820152608401610343565b60095460408051630ca1c5c960e01b815290516000926001600160a01b031691630ca1c5c9916004808301926020929190829003018186803b1580156119ed57600080fd5b505afa158015611a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2591906128cd565b600954604051634541a7fb60e11b8152336004820152602481018390529192506001600160a01b031690638a834ff690604401600060405180830381600087803b158015611a7257600080fd5b505af1158015611a86573d6000803e3d6000fd5b505050508060001415611b71576009546040805163b9e1bbf960e01b815290516001600160a01b03909216916301538868918491849163b9e1bbf9916004808301926000929190829003018186803b158015611ae157600080fd5b505afa158015611af5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b1d91908101906127e6565b6040518363ffffffff1660e01b8152600401611b3a9291906129f6565b600060405180830381600087803b158015611b5457600080fd5b505af1158015611b68573d6000803e3d6000fd5b50505050611bd6565b600954604051639d47207160e01b8152336004820152602481018390526001600160a01b0390911690639d47207190604401600060405180830381600087803b158015611bbd57600080fd5b505af1158015611bd1573d6000803e3d6000fd5b505050505b60095460408051630ca1c5c960e01b815290516001600160a01b03909216916316dbf90691611c2a916001918591630ca1c5c991600480820192602092909190829003018186803b15801561190b57600080fd5b6040518263ffffffff1660e01b8152600401611c4891815260200190565b600060405180830381600087803b158015611c6257600080fd5b505af1158015611c76573d6000803e3d6000fd5b505060095460405163ca0a9e3d60e01b8152336004820152600160248201526001600160a01b03909116925063ca0a9e3d9150604401600060405180830381600087803b158015611cc657600080fd5b505af1158015611cda573d6000803e3d6000fd5b5050600954604080516325ebda5b60e01b815290516001600160a01b03909216935063440372f89250611d329160019185916325ebda5b91600480820192602092909190829003018186803b15801561190b57600080fd5b6040518263ffffffff1660e01b815260040161162791815260200190565b60038160058110611d6057600080fd5b60089182820401919006600402915054906101000a900463ffffffff1681565b600954604051630e4d620560e01b81523360048201526000916001600160a01b031690630e4d62059060240160206040518083038186803b158015611dc457600080fd5b505afa158015611dd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfc91906128cd565b905090565b600954604051630e4d620560e01b81523360048201526001600160a01b0390911690630e4d62059060240160206040518083038186803b158015611e4457600080fd5b505afa158015611e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7c91906128cd565b15611ebe5760405162461bcd60e51b815260206004820152601260248201527114d95d081d1bdad95b95549248199a5c9cdd60721b6044820152606401610343565b600954604080516312dfc85160e31b8152905160009283926001600160a01b0390911691632f40faf79183916396fe428891600480820192602092909190829003018186803b158015611f1057600080fd5b505afa158015611f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4891906128cd565b6040518263ffffffff1660e01b8152600401611f6691815260200190565b604080518083038186803b158015611f7d57600080fd5b505afa158015611f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb5919061292a565b6000546040516370a0823160e01b815233600482015292945090925083916001600160a01b03909116906370a082319060240160206040518083038186803b15801561200057600080fd5b505afa158015612014573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203891906128cd565b101561207f5760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103233ba103a37b5b2b760511b6044820152606401610343565b6001546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b1580156120c257600080fd5b505afa1580156120d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fa91906128cd565b10156121415760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103239b8103a37b5b2b760511b6044820152606401610343565b600054612159906001600160a01b0316333085612448565b600154612171906001600160a01b0316333084612448565b60095460408051630ca1c5c960e01b815290516000926001600160a01b031691630ca1c5c9916004808301926020929190829003018186803b1580156121b657600080fd5b505afa1580156121ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ee91906128cd565b600954604051634541a7fb60e11b8152336004820152602481018390529192506001600160a01b031690638a834ff690604401600060405180830381600087803b15801561223b57600080fd5b505af115801561224f573d6000803e3d6000fd5b50505050806000141561233a576009546040805163b9e1bbf960e01b815290516001600160a01b03909216916301538868918491849163b9e1bbf9916004808301926000929190829003018186803b1580156122aa57600080fd5b505afa1580156122be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122e691908101906127e6565b6040518363ffffffff1660e01b81526004016123039291906129f6565b600060405180830381600087803b15801561231d57600080fd5b505af1158015612331573d6000803e3d6000fd5b5050505061239f565b600954604051639d47207160e01b8152336004820152602481018390526001600160a01b0390911690639d47207190604401600060405180830381600087803b15801561238657600080fd5b505af115801561239a573d6000803e3d6000fd5b505050505b60095460408051630ca1c5c960e01b815290516001600160a01b03909216916316dbf906916123f3916001918591630ca1c5c991600480820192602092909190829003018186803b15801561190b57600080fd5b6040518263ffffffff1660e01b815260040161241191815260200190565b600060405180830381600087803b15801561242b57600080fd5b505af115801561243f573d6000803e3d6000fd5b50505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526124a29085906124bb565b50505050565b60006124b48284612a68565b9392505050565b6000612510826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125929092919063ffffffff16565b80519091501561258d578080602001905181019061252e9190612793565b61258d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610343565b505050565b60606125a184846000856125a9565b949350505050565b60608247101561260a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610343565b843b6126585760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610343565b600080866001600160a01b0316858760405161267491906129c7565b60006040518083038185875af1925050503d80600081146126b1576040519150601f19603f3d011682016040523d82523d6000602084013e6126b6565b606091505b50915091506126c68282866126d1565b979650505050505050565b606083156126e05750816124b4565b8251156126f05782518084602001fd5b8160405162461bcd60e51b815260040161034391906129e3565b600082601f83011261271a578081fd5b813561272d61272882612a40565b612a0f565b818152846020838601011115612741578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121561276c578081fd5b81356124b481612aef565b600060208284031215612788578081fd5b81516124b481612aef565b6000602082840312156127a4578081fd5b815180151581146124b4578182fd5b6000602082840312156127c4578081fd5b813567ffffffffffffffff8111156127da578182fd5b6125a18482850161270a565b6000602082840312156127f7578081fd5b815167ffffffffffffffff81111561280d578182fd5b8201601f8101841361281d578182fd5b805161282b61272882612a40565b81815285602083850101111561283f578384fd5b612850826020830160208601612a97565b95945050505050565b60006040828403121561286a578081fd5b6040516040810181811067ffffffffffffffff8211171561288d5761288d612ad9565b604052825160ff811681146128a0578283fd5b81526020928301519281019290925250919050565b6000602082840312156128c6578081fd5b5035919050565b6000602082840312156128de578081fd5b5051919050565b600080604083850312156128f7578081fd5b82359150602083013567ffffffffffffffff811115612914578182fd5b6129208582860161270a565b9150509250929050565b6000806040838503121561293c578182fd5b505080516020909101519092909150565b600080600060608486031215612961578081fd5b8335925060208401359150604084013567ffffffffffffffff811115612985578182fd5b6129918682870161270a565b9150509250925092565b600081518084526129b3816020860160208601612a97565b601f01601f19169290920160200192915050565b600082516129d9818460208701612a97565b9190910192915050565b6020815260006124b4602083018461299b565b8281526040602082015260006125a1604083018461299b565b604051601f8201601f1916810167ffffffffffffffff81118282101715612a3857612a38612ad9565b604052919050565b600067ffffffffffffffff821115612a5a57612a5a612ad9565b50601f01601f191660200190565b60008219821115612a7b57612a7b612ac3565b500190565b600082821015612a9257612a92612ac3565b500390565b60005b83811015612ab2578181015183820152602001612a9a565b838111156124a25750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612b0457600080fd5b5056fea2646970667358221220135f8524d1f8fd5d8beca5ef4394b31a5b5a4f80b177440f16154adb0258818464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cooldowns(uint256)": {
        "notice": "不同等级升级的时间间隔,最大cooldowns是7天"
      },
      "mintVoyager()": {
        "notice": "Mint Voyagers，初始化: 1.最大level, 2.不同level数量，3.所有权，4.持有总量"
      },
      "mintVoyagerByWhitelist()": {
        "notice": "Mint Voyagers，初始化: 1.最大level, 2.不同level数量，3.所有权，4.持有总量"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5133,
        "contract": "contracts/voyager/VoyagerLogic.sol:VoyagerLogic",
        "label": "dgtAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5135,
        "contract": "contracts/voyager/VoyagerLogic.sol:VoyagerLogic",
        "label": "dspAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5140,
        "contract": "contracts/voyager/VoyagerLogic.sol:VoyagerLogic",
        "label": "decimals",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5176,
        "contract": "contracts/voyager/VoyagerLogic.sol:VoyagerLogic",
        "label": "cooldowns",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint32)5_storage"
      },
      {
        "astId": 5179,
        "contract": "contracts/voyager/VoyagerLogic.sol:VoyagerLogic",
        "label": "minLevel",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5181,
        "contract": "contracts/voyager/VoyagerLogic.sol:VoyagerLogic",
        "label": "maxLevel",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5184,
        "contract": "contracts/voyager/VoyagerLogic.sol:VoyagerLogic",
        "label": "initialSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5188,
        "contract": "contracts/voyager/VoyagerLogic.sol:VoyagerLogic",
        "label": "levelUpFees",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(FeeComponent)5145_storage)dyn_storage"
      },
      {
        "astId": 206,
        "contract": "contracts/voyager/VoyagerLogic.sol:VoyagerLogic",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6616,
        "contract": "contracts/voyager/VoyagerLogic.sol:VoyagerLogic",
        "label": "vS",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(VoyagerStorage)8542"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(FeeComponent)5145_storage)dyn_storage": {
        "base": "t_struct(FeeComponent)5145_storage",
        "encoding": "dynamic_array",
        "label": "struct BaseStorage.FeeComponent[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)5_storage": {
        "base": "t_uint32",
        "encoding": "inplace",
        "label": "uint32[5]",
        "numberOfBytes": "32"
      },
      "t_contract(VoyagerStorage)8542": {
        "encoding": "inplace",
        "label": "contract VoyagerStorage",
        "numberOfBytes": "20"
      },
      "t_struct(FeeComponent)5145_storage": {
        "encoding": "inplace",
        "label": "struct BaseStorage.FeeComponent",
        "members": [
          {
            "astId": 5142,
            "contract": "contracts/voyager/VoyagerLogic.sol:VoyagerLogic",
            "label": "dgt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5144,
            "contract": "contracts/voyager/VoyagerLogic.sol:VoyagerLogic",
            "label": "dsp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}