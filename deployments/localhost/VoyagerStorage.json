{
  "address": "0x598df3b1c2993321c6098b490464a9Db4712e79c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLevel",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allVoyagersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cooldowns",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dgtAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dspAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipMintableState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAllVoyagerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getExpiredWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "getLevelUpFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getMaxLevelOfOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxWhitelisted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "getSetByOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken0URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getTokenIDWithoutURI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "getTokenLevelCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getVoyager",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "level",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct BaseStorage.Voyager",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelistExpired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "levelUpFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dgt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dsp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxLevelOfOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintVoyayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownedVoyagers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownedVoyagersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "setByOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_interval",
          "type": "uint32"
        }
      ],
      "name": "setCoolDown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isExpired",
          "type": "bool"
        }
      ],
      "name": "setExpiredWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "setFee1TokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token2",
          "type": "address"
        }
      ],
      "name": "setFee2TokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "setLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dgt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dsp",
          "type": "uint256"
        }
      ],
      "name": "setLevelUpFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "setMaxLevelOfOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "setProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isSet",
          "type": "bool"
        }
      ],
      "name": "setSetByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "setTokenIDWithoutURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTokenLevelCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTotalMinted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistExpired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_string",
          "type": "string"
        }
      ],
      "name": "token0URI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenLevelCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voyagers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7c02e5b431f39b202800441d5f4d80fdf8473dff87fbf1ca3938309f15a7ce5",
  "receipt": {
    "to": null,
    "from": "0x6993AffA5572139D896B67Fe3A108B51EB6f8B53",
    "contractAddress": "0x598df3b1c2993321c6098b490464a9Db4712e79c",
    "transactionIndex": 0,
    "gasUsed": "3429922",
    "logsBloom": "0x
    "blockHash": "0xa8541fd49311e41a2b28526917b3732a21d10470cc07d319bc96ccd356923070",
    "transactionHash": "0xb7c02e5b431f39b202800441d5f4d80fdf8473dff87fbf1ca3938309f15a7ce5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9531832,
        "transactionHash": "0xb7c02e5b431f39b202800441d5f4d80fdf8473dff87fbf1ca3938309f15a7ce5",
        "address": "0x598df3b1c2993321c6098b490464a9Db4712e79c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006993affa5572139d896b67fe3a108b51eb6f8b53"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa8541fd49311e41a2b28526917b3732a21d10470cc07d319bc96ccd356923070"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9531832,
        "transactionHash": "0xb7c02e5b431f39b202800441d5f4d80fdf8473dff87fbf1ca3938309f15a7ce5",
        "address": "0x598df3b1c2993321c6098b490464a9Db4712e79c",
        "topics": [
          "0xf8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000006993affa5572139d896b67fe3a108b51eb6f8b53",
        "logIndex": 1,
        "blockHash": "0xa8541fd49311e41a2b28526917b3732a21d10470cc07d319bc96ccd356923070"
      }
    ],
    "blockNumber": 9531832,
    "cumulativeGasUsed": "3429922",
    "status": 1,
    "byzantium": true
  },
  "args": [
    6
  ],
  "solcInputHash": "3c70c77d428e61bb6242bf0749abc803",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVoyagersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dgtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dspAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipMintableState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAllVoyagerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getExpiredWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getLevelUpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMaxLevelOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWhitelisted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getSetByOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken0URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTokenIDWithoutURI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getTokenLevelCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVoyager\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseStorage.Voyager\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelUpFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dgt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dsp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxLevelOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mintVoyayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedVoyagers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedVoyagersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setByOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_interval\",\"type\":\"uint32\"}],\"name\":\"setCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExpired\",\"type\":\"bool\"}],\"name\":\"setExpiredWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"setFee1TokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"}],\"name\":\"setFee2TokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dgt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dsp\",\"type\":\"uint256\"}],\"name\":\"setLevelUpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setMaxLevelOfOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSet\",\"type\":\"bool\"}],\"name\":\"setSetByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setTokenIDWithoutURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTokenLevelCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTotalMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWhitelistExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"token0URI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLevelCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voyagers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"admin()\":{\"details\":\"Returns the address of the current admin.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getLevelUpFee(uint256)\":{\"details\":\"The address of the ClockAuction contract that handles sales of Kitties.  This same contract handles both peer-to-peer.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setLevelUpFee(uint256,uint256,uint256)\":{\"details\":\"Updates the level up fee as well as mint fee. Can only  be called by the Admin address. todo: \\u53ef\\u8bbe\\u7f6emaxLevel todo: \\u52a0maxLevel\\u9650\\u5236\\u6761\\u4ef6 todo\\uff1a\\u52a0\\u63a5\\u53e3\\u83b7\\u53d6\\u94f8\\u9020\\u6216\\u5347\\u7ea7\\u7684\\u8d39\\u7528\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferAdmin(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newAdmin`). Can only be called by the current admin.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"maxLevelOfOwner\":{\"details\":\"A mapping from Voyager to the max level of the Voyager. \"},\"tokenLevelCount\":{\"details\":\"A mapping from owner to token amount of each level. \"},\"voyagers\":{\"details\":\"An array containing the Voyager struct for all Voyagers in existence. The ID of each Voyager is actually an index into this array.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cooldowns(uint256)\":{\"notice\":\"\\u4e0d\\u540c\\u7b49\\u7ea7\\u5347\\u7ea7\\u7684\\u65f6\\u95f4\\u95f4\\u9694,\\u6700\\u5927cooldowns\\u662f7\\u5929\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyager/VoyagerStorage.sol\":\"VoyagerStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/reference/Sig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Sig {\\n\\n    using ECDSA for bytes32;\\n\\n    function addressHash(address _addr) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_addr));\\n    }\\n\\n    function ethSignedHash(address _addr) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_addr)).toEthSignedMessageHash();\\n    }\\n\\n    function recover(bytes32 hash, bytes memory signature) public pure returns(address) {\\n        return hash.recover(signature);\\n    }\\n\\n    function verified(bytes32 hash, bytes memory signature, address signer) public pure returns (bool){\\n        return signer == recover(hash, signature);\\n    }\\n}\\n\",\"keccak256\":\"0x4ff42be9fde5215138aec5a4fd5c356ee2c77e96fc379168bac390025a62e5a7\",\"license\":\"MIT\"},\"contracts/voyager/BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract BaseStorage {\\n    address public dgtAddress;\\n    address public dspAddress;\\n\\n    uint public decimals = 10 ** 18;\\n\\n    struct FeeComponent {\\n        uint256 dgt;\\n        uint256 dsp;\\n    }\\n\\n    struct Voyager {\\n        // Level of Voyager is from 1 to 6\\n        uint8 level;\\n        // Id of the Voyager\\n        uint256 id;\\n        // todo: image of the Voyager\\u662f\\u5426\\u5728struct\\u4e2d\\u5c55\\u793a \\n    }\\n\\n    /*** CONSTANTS ***/\\n    /// \\u4e0d\\u540c\\u7b49\\u7ea7\\u5347\\u7ea7\\u7684\\u65f6\\u95f4\\u95f4\\u9694,\\u6700\\u5927cooldowns\\u662f7\\u5929\\n    uint32[5] public cooldowns = [\\n        uint32(30 minutes),\\n        uint32(1 days),\\n        uint32(2 days),\\n        uint32(4 days),\\n        uint32(7 days)\\n    ];\\n\\n    /*** STORAGE ***/\\n    uint256 public minLevel = 1;\\n    uint256 public maxLevel;\\n    uint256 public initialSupply = 1000;\\n\\n    FeeComponent[] public levelUpFees;\\n}\",\"keccak256\":\"0xcdd667a7e738d4c9efb2c491a155934157b38a305ada5117ecc66c8b7e16278d\",\"license\":\"MIT\"},\"contracts/voyager/VoyagerAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../reference/Sig.sol\\\";\\n\\ncontract VoyagerAccessControl is Ownable, ReentrancyGuard {\\n    using SafeMath for uint;\\n\\n    // event ContractUpgrade(address newContract);\\n    event AdminTransferred(address oldAdmin, address newAdmin);\\n\\n    address private _admin;\\n    address public proxy;\\n    bool public mintIsActive = true;\\n\\n    constructor() {\\n        _setAdmin(_msgSender());\\n    }\\n\\n    function verified(bytes32 hash, bytes memory signature) public view returns (bool){\\n        return admin() == Sig.recover(hash, signature);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current admin.\\n     */\\n    function admin() public view virtual returns (address) {\\n        return _admin;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(admin() == _msgSender(), \\\"Invalid Admin: caller is not the admin\\\");\\n        _;\\n    }\\n\\n    function _setAdmin(address newAdmin) private {\\n        address oldAdmin = _admin;\\n        _admin = newAdmin;\\n        emit AdminTransferred(oldAdmin, newAdmin);\\n    }\\n\\n    function setProxy(address _proxy) external onlyOwner {\\n        require(_proxy != address(0), \\\"Invalid Address\\\");\\n        proxy = _proxy;\\n    }\\n\\n    modifier onlyProxy() {\\n        require(proxy == _msgSender(), \\\"Not Permit: caller is not the proxy\\\"); \\n        _;\\n    }\\n\\n    modifier sigVerified(bytes memory signature) {\\n        require(verified(Sig.ethSignedHash(msg.sender), signature), \\\"Not verified\\\");\\n        _;\\n    }\\n\\n    modifier activeMint() {\\n        require(mintIsActive, \\\"Unactive to mint Voyager\\\");\\n        _;\\n    } \\n        \\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newAdmin`).\\n     * Can only be called by the current admin.\\n     */\\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Invalid Admin: new admin is the zero address\\\");\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /*\\n    * Pause sale if active, make active if paused\\n    */\\n    function flipMintableState() public onlyAdmin {\\n        mintIsActive = !mintIsActive;\\n    }\\n}\\n\",\"keccak256\":\"0x1a408690664c19438c7cc273ac64b24c1cb3b56d29099442eb0252ea05604773\",\"license\":\"MIT\"},\"contracts/voyager/VoyagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./VoyagerAccessControl.sol\\\";\\nimport \\\"./BaseStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"../reference/Sig.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ncontract VoyagerStorage is ERC721, IERC721Enumerable, BaseStorage, VoyagerAccessControl {\\n    using SafeMath for uint;\\n    // using SafeERC20 for IERC20;\\n\\n    /// @dev An array containing the Voyager struct for all Voyagers in existence. The ID of\\n    /// each Voyager is actually an index into this array.\\n    Voyager[] public voyagers;\\n\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => Voyager)) public ownedVoyagers;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) public ownedVoyagersIndex;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) public allVoyagersIndex;\\n\\n    /// @dev A mapping from Voyager to the max level of the Voyager. \\n    mapping (address => uint256) public maxLevelOfOwner;\\n\\n    /// @dev A mapping from owner to token amount of each level. \\n    mapping (address => mapping(uint256 => uint256)) public tokenLevelCount;\\n\\n    mapping(uint256 => string) private _tokenURIs;\\n    mapping(uint256 => mapping(uint256 => bool)) public setByOwner; // tokenURI is set by owner in certain level\\n    mapping(address => uint256) private _tokenIDWithoutURI;\\n    mapping (address => bool) private _expiredWhitelist; \\n\\n    uint private _maxWhitelisted = 1000;\\n    uint private _totalMinted;\\n    uint private _whitelistExpired;\\n    string private _token0URI;\\n\\n    constructor(uint256 _maxLevel) ERC721(\\\"Voyager\\\", \\\"VOG\\\")  {\\n        maxLevel = _maxLevel;\\n        initialLevelUpFees();\\n    }\\n    \\n    function getVoyager(uint _index) public view returns (Voyager memory){\\n        return voyagers[_index];\\n    }\\n    \\n    function getSetByOwner(uint _tokenId, uint _level) public view returns (bool) {\\n        return setByOwner[_tokenId][_level];\\n    }\\n\\n    function setSetByOwner(uint _tokenId, uint _level, bool _isSet) public onlyProxy{\\n        setByOwner[_tokenId][_level] = _isSet;\\n    }\\n    \\n\\n    function getTokenIDWithoutURI(address _addr) public view returns (uint) {\\n        return _tokenIDWithoutURI[_addr];\\n    }\\n\\n    function setTokenIDWithoutURI(address _addr, uint _tokenId) public onlyProxy {\\n        _tokenIDWithoutURI[_addr] = _tokenId;\\n    }\\n\\n    function getMaxWhitelisted() public view returns (uint) {\\n        return _maxWhitelisted;\\n    }\\n\\n    function getTotalMinted() public view returns (uint) {\\n        return _totalMinted;\\n    }\\n\\n    function setTotalMinted(uint _amount) public onlyProxy {\\n        _totalMinted = _amount;\\n    }\\n\\n    function getWhitelistExpired() public view returns (uint){\\n        return _whitelistExpired;\\n    }\\n\\n    function setWhitelistExpired(uint _amount) public onlyProxy {\\n        _whitelistExpired = _amount;\\n    }\\n\\n    function getToken0URI() public view returns (string memory) {\\n        return _token0URI;\\n    }\\n\\n    function token0URI(string memory _string) public onlyProxy {\\n        _token0URI = _string;\\n    }\\n\\n    function getExpiredWhitelist(address _addr) public view returns (bool) {\\n        return _expiredWhitelist[_addr];\\n    }\\n\\n    function setExpiredWhitelist(address _addr, bool _isExpired) public onlyProxy {\\n        _expiredWhitelist[_addr] = _isExpired;\\n    }\\n\\n    function getAllVoyagerIndex(uint _tokenId) public view returns (uint) {\\n        return allVoyagersIndex[_tokenId];\\n    }\\n\\n    function getMaxLevelOfOwner(address _addr) public view returns (uint) {\\n        return maxLevelOfOwner[_addr];\\n    }\\n\\n    function setMaxLevelOfOwner(address _addr, uint _level) public onlyProxy {\\n        maxLevelOfOwner[_addr] = _level;\\n    }\\n\\n    function getTokenLevelCount(address _addr, uint _level) public view returns (uint) {\\n        return tokenLevelCount[_addr][_level];\\n    }\\n\\n    function setTokenLevelCount(address _addr, uint _level, uint _amount) public onlyProxy {\\n        tokenLevelCount[_addr][_level] = _amount;\\n    }\\n\\n    function mintVoyayer(address _addr, uint _tokenId) public onlyProxy {\\n        _safeMint(_addr, _tokenId);\\n    }\\n\\n    function transfer(address _to, uint _tokenId) public {\\n        _safeTransfer(msg.sender, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return ownedVoyagers[owner][index].id;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return voyagers.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < VoyagerStorage.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return voyagers[index].id;\\n    }\\n\\n    function initialLevelUpFees() internal {\\n        for (uint i=0; i < maxLevel; i++) {\\n            levelUpFees.push(FeeComponent(i.add(1).mul(10 * decimals),i.add(1).mul(100 * decimals)));\\n        }\\n    }\\n\\n        // \\u5728transfer\\u4e4b\\u524d\\u66f4\\u65b0:1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override virtual {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n            _updateSenderMaxLevel(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n            _updateReceiverMaxLevel(to, tokenId);\\n            tokenLevelCount[to][voyagers[allVoyagersIndex[tokenId]].level] += 1;\\n        }\\n    }\\n\\n    function _updateSenderMaxLevel(address from, uint256 tokenId) private {\\n        // update from address maxLevel\\n        uint curLevel = voyagers[allVoyagersIndex[tokenId]].level;\\n        require(curLevel <= maxLevelOfOwner[from], \\\"Level over max\\\");\\n        // ownershipTokenCount[from] -= 1;\\n        tokenLevelCount[from][curLevel] -= 1;\\n\\n        if (ERC721.balanceOf(from) == 0) {\\n            maxLevelOfOwner[from] = 0;\\n        } else if ( curLevel == maxLevelOfOwner[from] ) {\\n            for (; curLevel > 0; curLevel--) {\\n                if (tokenLevelCount[from][curLevel] > 0) {\\n                    maxLevelOfOwner[from] = curLevel;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _updateReceiverMaxLevel(address to, uint256 tokenId) private {\\n        // update to address maxLevel\\n        uint curLevel = voyagers[allVoyagersIndex[tokenId]].level;\\n        if (curLevel > maxLevelOfOwner[to]) {\\n            maxLevelOfOwner[to] = curLevel;\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        ownedVoyagers[to][length] = voyagers[allVoyagersIndex[tokenId]];\\n        ownedVoyagersIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        allVoyagersIndex[tokenId] = voyagers.length;\\n        if (tokenId == 0) {\\n            voyagers.push(Voyager(uint8(maxLevel), tokenId));\\n        } else {\\n            voyagers.push(Voyager(uint8(minLevel), tokenId));\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = ownedVoyagersIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            Voyager  storage lastVoyager = ownedVoyagers[from][lastTokenIndex];\\n\\n            ownedVoyagers[from][tokenIndex] = lastVoyager; // Move the last token to the slot of the to-delete token\\n            ownedVoyagersIndex[lastVoyager.id] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete ownedVoyagersIndex[tokenId];\\n        delete ownedVoyagers[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n        \\n        // token array\\u7684max index \\n        uint256 lastTokenIndex = voyagers.length - 1;\\n        // \\u88ab\\u5220\\u9664token\\u6240\\u5728\\u7684array index\\n        uint256 tokenIndex = allVoyagersIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        \\n        // token array\\u4e2dmax index\\u7684token id\\n        Voyager storage lastVoyager = voyagers[lastTokenIndex];\\n\\n        // \\u7528\\u6700\\u540e\\u4e00\\u4e2aVoyager\\u66ff\\u6362\\u88ab\\u5220\\u9664\\u7684\\u90a3\\u4e2a\\n        voyagers[tokenIndex] = lastVoyager; // Move the last token to the slot of the to-delete token\\n        // \\u66f4\\u65b0\\u6700\\u540e\\u4e00\\u4e2atoken\\u7684index\\n        allVoyagersIndex[lastVoyager.id] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete allVoyagersIndex[tokenId];\\n        voyagers.pop();\\n    }\\n\\n    /// @dev Updates the level up fee as well as mint fee. Can only\\n    ///  be called by the Admin address.\\n    /// todo: \\u53ef\\u8bbe\\u7f6emaxLevel\\n    /// todo: \\u52a0maxLevel\\u9650\\u5236\\u6761\\u4ef6\\n    /// todo\\uff1a\\u52a0\\u63a5\\u53e3\\u83b7\\u53d6\\u94f8\\u9020\\u6216\\u5347\\u7ea7\\u7684\\u8d39\\u7528\\n    function setLevelUpFee(uint256 _toLevel, uint256 _dgt, uint256 _dsp) external onlyOwner {\\n        require(_toLevel <= maxLevel, \\\"Over max level\\\");\\n        require(levelUpFees.length >= _toLevel-1, \\\"Add fee from low level\\\");\\n        if (levelUpFees.length == _toLevel-1) {\\n            levelUpFees.push(FeeComponent(_dgt, _dsp));\\n        } else {\\n            levelUpFees[_toLevel-1] = FeeComponent(_dgt, _dsp);\\n        }\\n    }\\n\\n    function setCoolDown(uint256 _toLevel, uint32 _interval) external onlyOwner {\\n        require (_toLevel > 1 && _toLevel <= cooldowns.length.add(1), \\\"Over max level\\\"); \\n        cooldowns[_toLevel-2] = _interval;\\n    }\\n\\n\\n    /// @dev The address of the ClockAuction contract that handles sales of Kitties. \\n    /// This same contract handles both peer-to-peer.\\n    // SaleClockAuction public saleAuction;\\n    // todo\\uff1a\\u83b7\\u53d6\\u5347\\u7ea7\\u7684\\u8d39\\u7528\\n    function getLevelUpFee(uint256 level) public view returns (uint, uint) {\\n        return (levelUpFees[level].dgt, levelUpFees[level].dsp);\\n    }\\n\\n    function getLevel(uint tokenId) public view returns (uint){\\n        return voyagers[allVoyagersIndex[tokenId]].level;\\n    }\\n\\n    function setLevel(uint tokenId, uint level) public onlyProxy {\\n        voyagers[allVoyagersIndex[tokenId]].level = uint8(level);\\n    }\\n\\n    /*     \\n    * Set URI for NFT with tokenId \\n    */\\n    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) public virtual onlyProxy {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[_tokenId] = _tokenURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        \\n        return _tokenURI;\\n    }\\n\\n    function setFee1TokenAddress(address _token1) public onlyProxy {\\n        dgtAddress = _token1;\\n    }\\n\\n    function setFee2TokenAddress(address _token2) public onlyProxy {\\n        dspAddress = _token2;\\n    }\\n}\\n\",\"keccak256\":\"0x3b59d9ac76ee2282f5b718197f6b22677d3d94ee71dcbd5a7492ddbcd0d7853e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x670de0b6b3a764000060085561012060405261070860809081526201518060a0526202a30060c0526205460060e05262093a806101005262000046906009906005620002d1565b506001600a556103e8600c8190556011805460ff60a01b1916600160a01b179055601c553480156200007757600080fd5b506040516200379c3803806200379c8339810160408190526200009a9162000408565b60408051808201825260078152662b37bcb0b3b2b960c91b602080830191825283518085019094526003845262564f4760e81b908401528151919291620000e49160009162000374565b508051620000fa90600190602084019062000374565b50505062000117620001116200013d60201b60201c565b62000141565b6001600f55620001273362000193565b600b81905562000136620001f4565b50620004cf565b3390565b600e80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b601080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6910160405180910390a15050565b60005b600b54811015620002ab57600d604051806040016040528062000253600854600a6200022491906200043c565b6200023f600187620002ae60201b62001da61790919060201c565b620002c360201b62001db91790919060201c565b81526020016200026d60085460646200022491906200043c565b905281546001818101845560009384526020938490208351600290930201918255929091015191015580620002a2816200049b565b915050620001f7565b50565b6000620002bc828462000421565b9392505050565b6000620002bc82846200043c565b600183019183908215620003625791602002820160005b838211156200032e57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302620002e8565b8015620003605782816101000a81549063ffffffff02191690556004016020816003010492830192600103026200032e565b505b5062000370929150620003f1565b5090565b82805462000382906200045e565b90600052602060002090601f016020900481019282620003a6576000855562000362565b82601f10620003c157805160ff191683800117855562000362565b8280016001018555821562000362579182015b8281111562000362578251825591602001919060010190620003d4565b5b80821115620003705760008155600101620003f2565b6000602082840312156200041a578081fd5b5051919050565b60008219821115620004375762000437620004b9565b500190565b6000816000190483118215151615620004595762000459620004b9565b500290565b600181811c908216806200047357607f821691505b602082108114156200049557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620004b257620004b2620004b9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6132bd80620004df6000396000f3fe608060405234801561001057600080fd5b50600436106104125760003560e01c806375829def11610220578063a1b3d1ff11610130578063ca0a9e3d116100b8578063e985e9c511610087578063e985e9c514610a1f578063ec55688914610a5b578063f018525514610a6e578063f2fde38b14610a76578063f851a44014610a8957600080fd5b8063ca0a9e3d146109c2578063cc06c359146109d5578063d1d26b28146109de578063e3e7688a14610a0c57600080fd5b8063aa924920116100ff578063aa92492014610955578063b88d4fde14610981578063b9e1bbf914610994578063c2e8dd4a1461099c578063c87b56dd146109af57600080fd5b8063a1b3d1ff14610909578063a22cb4651461091c578063a9059cbb1461092f578063a94ad6961461094257600080fd5b80638ef10c28116101b357806396fe42881161018257806396fe42881461088957806397107d6d14610892578063984027a7146108a55780639d472071146108ce5780639d6fac6f146108e157600080fd5b80638ef10c281461080a57806393d0b35414610836578063942eb8c31461086e57806395d89b411461088157600080fd5b8063860998b8116101ef578063860998b8146107cb57806386481d40146107d35780638a834ff6146107e65780638da5cb5b146107f957600080fd5b806375829def146107545780637e5ea2821461076757806380ea5a831461079857806384a55c20146107ab57600080fd5b80632f745c5911610326578063471a4294116102ae5780636d3f450b1161027d5780636d3f450b146106c257806370a08231146106f857806370a93b361461070b578063715018a61461071e5780637538bcfd1461072657600080fd5b8063471a4294146106755780634f6ccce7146106895780636352211e1461069c578063682fffaf146106af57600080fd5b8063378dc3dc116102f5578063378dc3dc1461060857806338e514fe146106115780633a0ccef11461062457806342842e0e1461064f578063440372f81461066257600080fd5b80632f745c59146105b9578063313ce567146105cc57806334f15bd7146105d55780633764d924146105e857600080fd5b8063143e7d56116103a95780631e5d9e1b116103785780631e5d9e1b1461054b5780632369e9e31461056b57806323b872dd1461058b57806325ebda5b1461059e5780632f40faf7146105a657600080fd5b8063143e7d56146104f557806316dbf9061461050857806318160ddd1461051b5780631dd3a3651461052357600080fd5b8063095ea7b3116103e5578063095ea7b3146104945780630ca1c5c9146104a75780630d2176ed146104b95780630e4d6205146104cc57600080fd5b8063015388681461041757806301ffc9a71461042c57806306fdde0314610454578063081812fc14610469575b600080fd5b61042a610425366004612e4d565b610a9a565b005b61043f61043a366004612e92565b610b6a565b60405190151581526020015b60405180910390f35b61045c610b95565b60405161044b9190613062565b61047c610477366004612efd565b610c27565b6040516001600160a01b03909116815260200161044b565b61042a6104a2366004612dee565b610cbc565b601d545b60405190815260200161044b565b61042a6104c7366004612dee565b610dcd565b6104ab6104da366004612ca0565b6001600160a01b03166000908152601a602052604090205490565b61042a610503366004612f6a565b610e13565b61042a610516366004612efd565b610fc5565b6012546104ab565b610536610531366004612efd565b610ff4565b6040805192835260208301919091520161044b565b6104ab610559366004612ca0565b60166020526000908152604090205481565b6104ab610579366004612efd565b60156020526000908152604090205481565b61042a610599366004612d10565b611022565b601e546104ab565b6105366105b4366004612efd565b611053565b6104ab6105c7366004612dee565b6110c5565b6104ab60085481565b61043f6105e3366004612e4d565b61115e565b6104ab6105f6366004612efd565b60146020526000908152604090205481565b6104ab600c5481565b60075461047c906001600160a01b031681565b6104ab610632366004612dee565b601760209081526000928352604080842090915290825290205481565b61042a61065d366004612d10565b611216565b61042a610670366004612efd565b611231565b60115461043f90600160a01b900460ff1681565b6104ab610697366004612efd565b611260565b61047c6106aa366004612efd565b611308565b61042a6106bd366004612f36565b61137f565b6104ab6106d0366004612dee565b6001600160a01b03919091166000908152601760209081526040808320938352929052205490565b6104ab610706366004612ca0565b6113d3565b61042a610719366004612f15565b61145a565b61042a6114dc565b61043f610734366004612f15565b600091825260196020908152604080842092845291905290205460ff1690565b61042a610762366004612ca0565b611512565b61077a610775366004612efd565b6115b3565b60408051825160ff168152602092830151928101929092520161044b565b61042a6107a6366004612e19565b61161b565b6104ab6107b9366004612efd565b60009081526015602052604090205490565b601c546104ab565b6104ab6107e1366004612efd565b61166b565b61042a6107f4366004612dee565b6116b7565b600e546001600160a01b031661047c565b61081d610818366004612efd565b6116ef565b6040805160ff909316835260208301919091520161044b565b61081d610844366004612dee565b60136020908152600092835260408084209091529082529020805460019091015460ff9091169082565b61042a61087c366004612ca0565b611721565b61045c61176d565b6104ab600a5481565b61042a6108a0366004612ca0565b61177c565b6104ab6108b3366004612ca0565b6001600160a01b031660009081526016602052604090205490565b61042a6108dc366004612dee565b611810565b6108f46108ef366004612efd565b611856565b60405163ffffffff909116815260200161044b565b61042a610917366004612eca565b611886565b61042a61092a366004612dba565b6118c3565b61042a61093d366004612dee565b611988565b61042a610950366004612f95565b6119a3565b61043f610963366004612ca0565b6001600160a01b03166000908152601b602052604090205460ff1690565b61042a61098f366004612d50565b611a7e565b61045c611ab6565b61042a6109aa366004612ca0565b611ac5565b61045c6109bd366004612efd565b611b11565b61042a6109d0366004612dba565b611c2f565b6104ab600b5481565b61043f6109ec366004612f15565b601960209081526000928352604080842090915290825290205460ff1681565b60065461047c906001600160a01b031681565b61043f610a2d366004612cd8565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60115461047c906001600160a01b031681565b61042a611c84565b61042a610a84366004612ca0565b611d0e565b6010546001600160a01b031661047c565b6011546001600160a01b03163314610acd5760405162461bcd60e51b8152600401610ac4906130fc565b60405180910390fd5b6000828152600260205260409020546001600160a01b0316610b465760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ac4565b60008281526018602090815260409091208251610b6592840190612b6b565b505050565b60006001600160e01b0319821663780e9d6360e01b1480610b8f5750610b8f82611dc5565b92915050565b606060008054610ba4906131f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd0906131f5565b8015610c1d5780601f10610bf257610100808354040283529160200191610c1d565b820191906000526020600020905b815481529060010190602001808311610c0057829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610ca05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ac4565b506000908152600460205260409020546001600160a01b031690565b6000610cc782611308565b9050806001600160a01b0316836001600160a01b03161415610d355760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610ac4565b336001600160a01b0382161480610d515750610d518133610a2d565b610dc35760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610ac4565b610b658383611e15565b6011546001600160a01b03163314610df75760405162461bcd60e51b8152600401610ac4906130fc565b6001600160a01b03909116600090815260166020526040902055565b600e546001600160a01b03163314610e3d5760405162461bcd60e51b8152600401610ac4906130c7565b600b54831115610e805760405162461bcd60e51b815260206004820152600e60248201526d13dd995c881b585e081b195d995b60921b6044820152606401610ac4565b610e8b6001846131c7565b600d541015610ed55760405162461bcd60e51b81526020600482015260166024820152751059190819995948199c9bdb481b1bddc81b195d995b60521b6044820152606401610ac4565b610ee06001846131c7565b600d541415610f62576040805180820190915291825260208201908152600d805460018101825560009190915291517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5600290930292830155517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb69091015550565b6040805180820190915282815260208101829052600d610f836001866131c7565b81548110610fa157634e487b7160e01b600052603260045260246000fd5b60009182526020918290208351600290920201908155910151600190910155505050565b6011546001600160a01b03163314610fef5760405162461bcd60e51b8152600401610ac4906130fc565b601d55565b600d818154811061100457600080fd5b60009182526020909120600290910201805460019091015490915082565b61102c3382611e83565b6110485760405162461bcd60e51b8152600401610ac49061313f565b610b65838383611f7a565b600080600d838154811061107757634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160000154600d84815481106110aa57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001015491509150915091565b60006110d0836113d3565b82106111325760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610ac4565b506001600160a01b03919091166000908152601360209081526040808320938352929052206001015490565b6040516319045a2560e01b8152600090736748dAeA9f2F668ED4a425000E4d61b07797CA75906319045a259061119a9086908690600401613049565b60206040518083038186803b1580156111b257600080fd5b505af41580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190612cbc565b6001600160a01b03166112056010546001600160a01b031690565b6001600160a01b0316149392505050565b610b6583838360405180602001604052806000815250611a7e565b6011546001600160a01b0316331461125b5760405162461bcd60e51b8152600401610ac4906130fc565b601e55565b600061126b60125490565b82106112ce5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610ac4565b601282815481106112ef57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101549050919050565b6000818152600260205260408120546001600160a01b031680610b8f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610ac4565b6011546001600160a01b031633146113a95760405162461bcd60e51b8152600401610ac4906130fc565b60009283526019602090815260408085209385529290529120805460ff1916911515919091179055565b60006001600160a01b03821661143e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610ac4565b506001600160a01b031660009081526003602052604090205490565b6011546001600160a01b031633146114845760405162461bcd60e51b8152600401610ac4906130fc565b6000828152601560205260409020546012805483929081106114b657634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201805460ff191660ff929092169190911790555050565b600e546001600160a01b031633146115065760405162461bcd60e51b8152600401610ac4906130c7565b6115106000612125565b565b600e546001600160a01b0316331461153c5760405162461bcd60e51b8152600401610ac4906130c7565b6001600160a01b0381166115a75760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642041646d696e3a206e65772061646d696e206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401610ac4565b6115b081612177565b50565b6040805180820190915260008082526020820152601282815481106115e857634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051808201909152600290920201805460ff168252600101549181019190915292915050565b6011546001600160a01b031633146116455760405162461bcd60e51b8152600401610ac4906130fc565b6001600160a01b0390921660009081526017602090815260408083209383529290522055565b60008181526015602052604081205460128054909190811061169d57634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015460ff1692915050565b6011546001600160a01b031633146116e15760405162461bcd60e51b8152600401610ac4906130fc565b6116eb82826121d8565b5050565b601281815481106116ff57600080fd5b60009182526020909120600290910201805460019091015460ff909116915082565b6011546001600160a01b0316331461174b5760405162461bcd60e51b8152600401610ac4906130fc565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b606060018054610ba4906131f5565b600e546001600160a01b031633146117a65760405162461bcd60e51b8152600401610ac4906130c7565b6001600160a01b0381166117ee5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b6044820152606401610ac4565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6011546001600160a01b0316331461183a5760405162461bcd60e51b8152600401610ac4906130fc565b6001600160a01b039091166000908152601a6020526040902055565b6009816005811061186657600080fd5b60089182820401919006600402915054906101000a900463ffffffff1681565b6011546001600160a01b031633146118b05760405162461bcd60e51b8152600401610ac4906130fc565b80516116eb90601f906020840190612b6b565b6001600160a01b03821633141561191c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ac4565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6116eb338383604051806020016040528060008152506121f2565b600e546001600160a01b031633146119cd5760405162461bcd60e51b8152600401610ac4906130c7565b6001821180156119e857506119e460056001611da6565b8211155b611a255760405162461bcd60e51b815260206004820152600e60248201526d13dd995c881b585e081b195d995b60921b6044820152606401610ac4565b806009611a336002856131c7565b60058110611a5157634e487b7160e01b600052603260045260246000fd5b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050565b611a883383611e83565b611aa45760405162461bcd60e51b8152600401610ac49061313f565b611ab0848484846121f2565b50505050565b6060601f8054610ba4906131f5565b6011546001600160a01b03163314611aef5760405162461bcd60e51b8152600401610ac4906130fc565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600260205260409020546060906001600160a01b0316611b905760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610ac4565b60008281526018602052604081208054611ba9906131f5565b80601f0160208091040260200160405190810160405280929190818152602001828054611bd5906131f5565b8015611c225780601f10611bf757610100808354040283529160200191611c22565b820191906000526020600020905b815481529060010190602001808311611c0557829003601f168201915b5093979650505050505050565b6011546001600160a01b03163314611c595760405162461bcd60e51b8152600401610ac4906130fc565b6001600160a01b03919091166000908152601b60205260409020805460ff1916911515919091179055565b6010546001600160a01b03163314611ced5760405162461bcd60e51b815260206004820152602660248201527f496e76616c69642041646d696e3a2063616c6c6572206973206e6f74207468656044820152651030b236b4b760d11b6064820152608401610ac4565b6011805460ff60a01b198116600160a01b9182900460ff1615909102179055565b600e546001600160a01b03163314611d385760405162461bcd60e51b8152600401610ac4906130c7565b6001600160a01b038116611d9d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ac4565b6115b081612125565b6000611db28284613190565b9392505050565b6000611db282846131a8565b60006001600160e01b031982166380ac58cd60e01b1480611df657506001600160e01b03198216635b5e139f60e01b145b80610b8f57506301ffc9a760e01b6001600160e01b0319831614610b8f565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611e4a82611308565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611efc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ac4565b6000611f0783611308565b9050806001600160a01b0316846001600160a01b03161480611f425750836001600160a01b0316611f3784610c27565b6001600160a01b0316145b80611f7257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611f8d82611308565b6001600160a01b031614611ff55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610ac4565b6001600160a01b0382166120575760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ac4565b612062838383612225565b61206d600082611e15565b6001600160a01b03831660009081526003602052604081208054600192906120969084906131c7565b90915550506001600160a01b03821660009081526003602052604081208054600192906120c4908490613190565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600e80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b601080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6910160405180910390a15050565b6116eb82826040518060200160405280600081525061233a565b6121fd848484611f7a565b6122098484848461236d565b611ab05760405162461bcd60e51b8152600401610ac490613075565b6001600160a01b0383166122415761223c8161247a565b61226e565b816001600160a01b0316836001600160a01b03161461226e5761226483826125a9565b61226e8382612668565b6001600160a01b03821661228557610b65816127f0565b826001600160a01b0316826001600160a01b031614610b65576122a882826128fb565b6122b28282612993565b6001600160a01b0382166000908152601760209081526040808320848452601590925282205460128054600194929081106122fd57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060029092029091015460ff16835282019290925260400181208054909190612330908490613190565b9091555050505050565b6123448383612a1d565b612351600084848461236d565b610b655760405162461bcd60e51b8152600401610ac490613075565b60006001600160a01b0384163b1561246f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906123b190339089908890889060040161300c565b602060405180830381600087803b1580156123cb57600080fd5b505af19250505080156123fb575060408051601f3d908101601f191682019092526123f891810190612eae565b60015b612455573d808015612429576040519150601f19603f3d011682016040523d82523d6000602084013e61242e565b606091505b50805161244d5760405162461bcd60e51b8152600401610ac490613075565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611f72565b506001949350505050565b6012546000828152601560205260409020558061251d5760408051808201909152600b5460ff9081168252602082019283526012805460018101825560009190915291517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34446002909302928301805460ff19169190921617905590517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344590910155565b60408051808201909152600a5460ff9081168252602082019283526012805460018101825560009190915291517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34446002909302928301805460ff19169190921617905590517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344590910155565b600060016125b6846113d3565b6125c091906131c7565b60008381526014602052604090205490915080821461262a576001600160a01b038416600090815260136020908152604080832085845282528083208484528184208154815460ff191660ff90911617815560019182015491018190558352601490915290208190555b5060009182526014602090815260408084208490556001600160a01b0390941683526013815283832091835252908120805460ff1916815560010155565b60008181526015602052604081205460128054909190811061269a57634e487b7160e01b600052603260045260246000fd5b600091825260208083206002909202909101546001600160a01b0386168352601690915260409091205460ff909116915081111561270b5760405162461bcd60e51b815260206004820152600e60248201526d098caeccad840deeccae440dac2f60931b6044820152606401610ac4565b6001600160a01b0383166000908152601760209081526040808320848452909152812080546001929061273f9084906131c7565b9091555061274e9050836113d3565b61276e5750506001600160a01b0316600090815260166020526040812055565b6001600160a01b038316600090815260166020526040902054811415610b65575b8015610b65576001600160a01b0383166000908152601760209081526040808320848452909152902054156127de576001600160a01b0383166000908152601660205260409020819055505050565b806127e8816131de565b91505061278f565b601254600090612802906001906131c7565b6000838152601560205260408120546012805493945090928490811061283857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202019050806012838154811061286a57634e487b7160e01b600052603260045260246000fd5b600091825260208083208454600290930201805460ff191660ff909316929092178255600193840154918401919091559183015481526015909152604080822084905585825281205560128054806128d257634e487b7160e01b600052603160045260246000fd5b600082815260208120600260001990930192830201805460ff1916815560010155905550505050565b6000612906836113d3565b6000838152601560205260409020546012805492935091811061293957634e487b7160e01b600052603260045260246000fd5b600091825260208083206001600160a01b039096168352601381526040808420858552825280842060029093029096018054835460ff191660ff909116178355600190810154920191909155928152601490925291902055565b6000818152601560205260408120546012805490919081106129c557634e487b7160e01b600052603260045260246000fd5b600091825260208083206002909202909101546001600160a01b0386168352601690915260409091205460ff9091169150811115610b65576001600160a01b0383166000908152601660205260409020819055505050565b6001600160a01b038216612a735760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ac4565b6000818152600260205260409020546001600160a01b031615612ad85760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ac4565b612ae460008383612225565b6001600160a01b0382166000908152600360205260408120805460019290612b0d908490613190565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612b77906131f5565b90600052602060002090601f016020900481019282612b995760008555612bdf565b82601f10612bb257805160ff1916838001178555612bdf565b82800160010185558215612bdf579182015b82811115612bdf578251825591602001919060010190612bc4565b50612beb929150612bef565b5090565b5b80821115612beb5760008155600101612bf0565b80358015158114612c1457600080fd5b919050565b600082601f830112612c29578081fd5b813567ffffffffffffffff80821115612c4457612c44613246565b604051601f8301601f19908116603f01168101908282118183101715612c6c57612c6c613246565b81604052838152866020858801011115612c84578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215612cb1578081fd5b8135611db28161325c565b600060208284031215612ccd578081fd5b8151611db28161325c565b60008060408385031215612cea578081fd5b8235612cf58161325c565b91506020830135612d058161325c565b809150509250929050565b600080600060608486031215612d24578081fd5b8335612d2f8161325c565b92506020840135612d3f8161325c565b929592945050506040919091013590565b60008060008060808587031215612d65578081fd5b8435612d708161325c565b93506020850135612d808161325c565b925060408501359150606085013567ffffffffffffffff811115612da2578182fd5b612dae87828801612c19565b91505092959194509250565b60008060408385031215612dcc578182fd5b8235612dd78161325c565b9150612de560208401612c04565b90509250929050565b60008060408385031215612e00578182fd5b8235612e0b8161325c565b946020939093013593505050565b600080600060608486031215612e2d578283fd5b8335612e388161325c565b95602085013595506040909401359392505050565b60008060408385031215612e5f578182fd5b82359150602083013567ffffffffffffffff811115612e7c578182fd5b612e8885828601612c19565b9150509250929050565b600060208284031215612ea3578081fd5b8135611db281613271565b600060208284031215612ebf578081fd5b8151611db281613271565b600060208284031215612edb578081fd5b813567ffffffffffffffff811115612ef1578182fd5b611f7284828501612c19565b600060208284031215612f0e578081fd5b5035919050565b60008060408385031215612f27578182fd5b50508035926020909101359150565b600080600060608486031215612f4a578081fd5b8335925060208401359150612f6160408501612c04565b90509250925092565b600080600060608486031215612f7e578081fd5b505081359360208301359350604090920135919050565b60008060408385031215612fa7578182fd5b82359150602083013563ffffffff81168114612d05578182fd5b60008151808452815b81811015612fe657602081850181015186830182015201612fca565b81811115612ff75782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061303f90830184612fc1565b9695505050505050565b828152604060208201526000611f726040830184612fc1565b602081526000611db26020830184612fc1565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526023908201527f4e6f74205065726d69743a2063616c6c6572206973206e6f74207468652070726040820152626f787960e81b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156131a3576131a3613230565b500190565b60008160001904831182151516156131c2576131c2613230565b500290565b6000828210156131d9576131d9613230565b500390565b6000816131ed576131ed613230565b506000190190565b600181811c9082168061320957607f821691505b6020821081141561322a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146115b057600080fd5b6001600160e01b0319811681146115b057600080fdfea2646970667358221220249638a9037577bad8ab6710c54513f2359b47457bca309bd64bcfc7033621ab64736f6c63430008040033",
  "deployedBytecode": "$bfe2affd5a69741b1d0756c60605649423$__906319045a259061119a9086908690600401613049565b60206040518083038186803b1580156111b257600080fd5b505af41580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190612cbc565b6001600160a01b03166112056010546001600160a01b031690565b6001600160a01b0316149392505050565b610b6583838360405180602001604052806000815250611a7e565b6011546001600160a01b0316331461125b5760405162461bcd60e51b8152600401610ac4906130fc565b601e55565b600061126b60125490565b82106112ce5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610ac4565b601282815481106112ef57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101549050919050565b6000818152600260205260408120546001600160a01b031680610b8f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610ac4565b6011546001600160a01b031633146113a95760405162461bcd60e51b8152600401610ac4906130fc565b60009283526019602090815260408085209385529290529120805460ff1916911515919091179055565b60006001600160a01b03821661143e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610ac4565b506001600160a01b031660009081526003602052604090205490565b6011546001600160a01b031633146114845760405162461bcd60e51b8152600401610ac4906130fc565b6000828152601560205260409020546012805483929081106114b657634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201805460ff191660ff929092169190911790555050565b600e546001600160a01b031633146115065760405162461bcd60e51b8152600401610ac4906130c7565b6115106000612125565b565b600e546001600160a01b0316331461153c5760405162461bcd60e51b8152600401610ac4906130c7565b6001600160a01b0381166115a75760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642041646d696e3a206e65772061646d696e206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401610ac4565b6115b081612177565b50565b6040805180820190915260008082526020820152601282815481106115e857634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051808201909152600290920201805460ff168252600101549181019190915292915050565b6011546001600160a01b031633146116455760405162461bcd60e51b8152600401610ac4906130fc565b6001600160a01b0390921660009081526017602090815260408083209383529290522055565b60008181526015602052604081205460128054909190811061169d57634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015460ff1692915050565b6011546001600160a01b031633146116e15760405162461bcd60e51b8152600401610ac4906130fc565b6116eb82826121d8565b5050565b601281815481106116ff57600080fd5b60009182526020909120600290910201805460019091015460ff909116915082565b6011546001600160a01b0316331461174b5760405162461bcd60e51b8152600401610ac4906130fc565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b606060018054610ba4906131f5565b600e546001600160a01b031633146117a65760405162461bcd60e51b8152600401610ac4906130c7565b6001600160a01b0381166117ee5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b6044820152606401610ac4565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6011546001600160a01b0316331461183a5760405162461bcd60e51b8152600401610ac4906130fc565b6001600160a01b039091166000908152601a6020526040902055565b6009816005811061186657600080fd5b60089182820401919006600402915054906101000a900463ffffffff1681565b6011546001600160a01b031633146118b05760405162461bcd60e51b8152600401610ac4906130fc565b80516116eb90601f906020840190612b6b565b6001600160a01b03821633141561191c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ac4565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6116eb338383604051806020016040528060008152506121f2565b600e546001600160a01b031633146119cd5760405162461bcd60e51b8152600401610ac4906130c7565b6001821180156119e857506119e460056001611da6565b8211155b611a255760405162461bcd60e51b815260206004820152600e60248201526d13dd995c881b585e081b195d995b60921b6044820152606401610ac4565b806009611a336002856131c7565b60058110611a5157634e487b7160e01b600052603260045260246000fd5b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050565b611a883383611e83565b611aa45760405162461bcd60e51b8152600401610ac49061313f565b611ab0848484846121f2565b50505050565b6060601f8054610ba4906131f5565b6011546001600160a01b03163314611aef5760405162461bcd60e51b8152600401610ac4906130fc565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600260205260409020546060906001600160a01b0316611b905760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610ac4565b60008281526018602052604081208054611ba9906131f5565b80601f0160208091040260200160405190810160405280929190818152602001828054611bd5906131f5565b8015611c225780601f10611bf757610100808354040283529160200191611c22565b820191906000526020600020905b815481529060010190602001808311611c0557829003601f168201915b5093979650505050505050565b6011546001600160a01b03163314611c595760405162461bcd60e51b8152600401610ac4906130fc565b6001600160a01b03919091166000908152601b60205260409020805460ff1916911515919091179055565b6010546001600160a01b03163314611ced5760405162461bcd60e51b815260206004820152602660248201527f496e76616c69642041646d696e3a2063616c6c6572206973206e6f74207468656044820152651030b236b4b760d11b6064820152608401610ac4565b6011805460ff60a01b198116600160a01b9182900460ff1615909102179055565b600e546001600160a01b03163314611d385760405162461bcd60e51b8152600401610ac4906130c7565b6001600160a01b038116611d9d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ac4565b6115b081612125565b6000611db28284613190565b9392505050565b6000611db282846131a8565b60006001600160e01b031982166380ac58cd60e01b1480611df657506001600160e01b03198216635b5e139f60e01b145b80610b8f57506301ffc9a760e01b6001600160e01b0319831614610b8f565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611e4a82611308565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611efc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ac4565b6000611f0783611308565b9050806001600160a01b0316846001600160a01b03161480611f425750836001600160a01b0316611f3784610c27565b6001600160a01b0316145b80611f7257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611f8d82611308565b6001600160a01b031614611ff55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610ac4565b6001600160a01b0382166120575760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ac4565b612062838383612225565b61206d600082611e15565b6001600160a01b03831660009081526003602052604081208054600192906120969084906131c7565b90915550506001600160a01b03821660009081526003602052604081208054600192906120c4908490613190565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600e80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b601080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6910160405180910390a15050565b6116eb82826040518060200160405280600081525061233a565b6121fd848484611f7a565b6122098484848461236d565b611ab05760405162461bcd60e51b8152600401610ac490613075565b6001600160a01b0383166122415761223c8161247a565b61226e565b816001600160a01b0316836001600160a01b03161461226e5761226483826125a9565b61226e8382612668565b6001600160a01b03821661228557610b65816127f0565b826001600160a01b0316826001600160a01b031614610b65576122a882826128fb565b6122b28282612993565b6001600160a01b0382166000908152601760209081526040808320848452601590925282205460128054600194929081106122fd57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060029092029091015460ff16835282019290925260400181208054909190612330908490613190565b9091555050505050565b6123448383612a1d565b612351600084848461236d565b610b655760405162461bcd60e51b8152600401610ac490613075565b60006001600160a01b0384163b1561246f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906123b190339089908890889060040161300c565b602060405180830381600087803b1580156123cb57600080fd5b505af19250505080156123fb575060408051601f3d908101601f191682019092526123f891810190612eae565b60015b612455573d808015612429576040519150601f19603f3d011682016040523d82523d6000602084013e61242e565b606091505b50805161244d5760405162461bcd60e51b8152600401610ac490613075565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611f72565b506001949350505050565b6012546000828152601560205260409020558061251d5760408051808201909152600b5460ff9081168252602082019283526012805460018101825560009190915291517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34446002909302928301805460ff19169190921617905590517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344590910155565b60408051808201909152600a5460ff9081168252602082019283526012805460018101825560009190915291517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34446002909302928301805460ff19169190921617905590517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344590910155565b600060016125b6846113d3565b6125c091906131c7565b60008381526014602052604090205490915080821461262a576001600160a01b038416600090815260136020908152604080832085845282528083208484528184208154815460ff191660ff90911617815560019182015491018190558352601490915290208190555b5060009182526014602090815260408084208490556001600160a01b0390941683526013815283832091835252908120805460ff1916815560010155565b60008181526015602052604081205460128054909190811061269a57634e487b7160e01b600052603260045260246000fd5b600091825260208083206002909202909101546001600160a01b0386168352601690915260409091205460ff909116915081111561270b5760405162461bcd60e51b815260206004820152600e60248201526d098caeccad840deeccae440dac2f60931b6044820152606401610ac4565b6001600160a01b0383166000908152601760209081526040808320848452909152812080546001929061273f9084906131c7565b9091555061274e9050836113d3565b61276e5750506001600160a01b0316600090815260166020526040812055565b6001600160a01b038316600090815260166020526040902054811415610b65575b8015610b65576001600160a01b0383166000908152601760209081526040808320848452909152902054156127de576001600160a01b0383166000908152601660205260409020819055505050565b806127e8816131de565b91505061278f565b601254600090612802906001906131c7565b6000838152601560205260408120546012805493945090928490811061283857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202019050806012838154811061286a57634e487b7160e01b600052603260045260246000fd5b600091825260208083208454600290930201805460ff191660ff909316929092178255600193840154918401919091559183015481526015909152604080822084905585825281205560128054806128d257634e487b7160e01b600052603160045260246000fd5b600082815260208120600260001990930192830201805460ff1916815560010155905550505050565b6000612906836113d3565b6000838152601560205260409020546012805492935091811061293957634e487b7160e01b600052603260045260246000fd5b600091825260208083206001600160a01b039096168352601381526040808420858552825280842060029093029096018054835460ff191660ff909116178355600190810154920191909155928152601490925291902055565b6000818152601560205260408120546012805490919081106129c557634e487b7160e01b600052603260045260246000fd5b600091825260208083206002909202909101546001600160a01b0386168352601690915260409091205460ff9091169150811115610b65576001600160a01b0383166000908152601660205260409020819055505050565b6001600160a01b038216612a735760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ac4565b6000818152600260205260409020546001600160a01b031615612ad85760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ac4565b612ae460008383612225565b6001600160a01b0382166000908152600360205260408120805460019290612b0d908490613190565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612b77906131f5565b90600052602060002090601f016020900481019282612b995760008555612bdf565b82601f10612bb257805160ff1916838001178555612bdf565b82800160010185558215612bdf579182015b82811115612bdf578251825591602001919060010190612bc4565b50612beb929150612bef565b5090565b5b80821115612beb5760008155600101612bf0565b80358015158114612c1457600080fd5b919050565b600082601f830112612c29578081fd5b813567ffffffffffffffff80821115612c4457612c44613246565b604051601f8301601f19908116603f01168101908282118183101715612c6c57612c6c613246565b81604052838152866020858801011115612c84578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215612cb1578081fd5b8135611db28161325c565b600060208284031215612ccd578081fd5b8151611db28161325c565b60008060408385031215612cea578081fd5b8235612cf58161325c565b91506020830135612d058161325c565b809150509250929050565b600080600060608486031215612d24578081fd5b8335612d2f8161325c565b92506020840135612d3f8161325c565b929592945050506040919091013590565b60008060008060808587031215612d65578081fd5b8435612d708161325c565b93506020850135612d808161325c565b925060408501359150606085013567ffffffffffffffff811115612da2578182fd5b612dae87828801612c19565b91505092959194509250565b60008060408385031215612dcc578182fd5b8235612dd78161325c565b9150612de560208401612c04565b90509250929050565b60008060408385031215612e00578182fd5b8235612e0b8161325c565b946020939093013593505050565b600080600060608486031215612e2d578283fd5b8335612e388161325c565b95602085013595506040909401359392505050565b60008060408385031215612e5f578182fd5b82359150602083013567ffffffffffffffff811115612e7c578182fd5b612e8885828601612c19565b9150509250929050565b600060208284031215612ea3578081fd5b8135611db281613271565b600060208284031215612ebf578081fd5b8151611db281613271565b600060208284031215612edb578081fd5b813567ffffffffffffffff811115612ef1578182fd5b611f7284828501612c19565b600060208284031215612f0e578081fd5b5035919050565b60008060408385031215612f27578182fd5b50508035926020909101359150565b600080600060608486031215612f4a578081fd5b8335925060208401359150612f6160408501612c04565b90509250925092565b600080600060608486031215612f7e578081fd5b505081359360208301359350604090920135919050565b60008060408385031215612fa7578182fd5b82359150602083013563ffffffff81168114612d05578182fd5b60008151808452815b81811015612fe657602081850181015186830182015201612fca565b81811115612ff75782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061303f90830184612fc1565b9695505050505050565b828152604060208201526000611f726040830184612fc1565b602081526000611db26020830184612fc1565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526023908201527f4e6f74205065726d69743a2063616c6c6572206973206e6f74207468652070726040820152626f787960e81b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156131a3576131a3613230565b500190565b60008160001904831182151516156131c2576131c2613230565b500290565b6000828210156131d9576131d9613230565b500390565b6000816131ed576131ed613230565b506000190190565b600181811c9082168061320957607f821691505b6020821081141561322a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146115b057600080fd5b6001600160e01b0319811681146115b057600080fdfea2646970667358221220249638a9037577bad8ab6710c54513f2359b47457bca309bd64bcfc7033621ab64736f6c63430008040033",
  "libraries": {
    "Sig": "0x6748dAeA9f2F668ED4a425000E4d61b07797CA75"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "admin()": {
        "details": "Returns the address of the current admin."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getLevelUpFee(uint256)": {
        "details": "The address of the ClockAuction contract that handles sales of Kitties.  This same contract handles both peer-to-peer."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setLevelUpFee(uint256,uint256,uint256)": {
        "details": "Updates the level up fee as well as mint fee. Can only  be called by the Admin address. todo: 可设置maxLevel todo: 加maxLevel限制条件 todo：加接口获取铸造或升级的费用"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferAdmin(address)": {
        "details": "Transfers ownership of the contract to a new account (`newAdmin`). Can only be called by the current admin."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "maxLevelOfOwner": {
        "details": "A mapping from Voyager to the max level of the Voyager. "
      },
      "tokenLevelCount": {
        "details": "A mapping from owner to token amount of each level. "
      },
      "voyagers": {
        "details": "An array containing the Voyager struct for all Voyagers in existence. The ID of each Voyager is actually an index into this array."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cooldowns(uint256)": {
        "notice": "不同等级升级的时间间隔,最大cooldowns是7天"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1196,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1198,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1202,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1206,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1210,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1216,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5133,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "dgtAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5135,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "dspAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5140,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "decimals",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5176,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "cooldowns",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint32)5_storage"
      },
      {
        "astId": 5179,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "minLevel",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5181,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "maxLevel",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5184,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "initialSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5188,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "levelUpFees",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(FeeComponent)5145_storage)dyn_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_owner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 206,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_status",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6424,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_admin",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 6426,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "proxy",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 6429,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "mintIsActive",
        "offset": 20,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 7452,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "voyagers",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(Voyager)5150_storage)dyn_storage"
      },
      {
        "astId": 7459,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "ownedVoyagers",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Voyager)5150_storage))"
      },
      {
        "astId": 7463,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "ownedVoyagersIndex",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7467,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "allVoyagersIndex",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7472,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "maxLevelOfOwner",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7479,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "tokenLevelCount",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7483,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7489,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "setByOwner",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 7493,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_tokenIDWithoutURI",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7497,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_expiredWhitelist",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7500,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_maxWhitelisted",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 7502,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_totalMinted",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 7504,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_whitelistExpired",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 7506,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_token0URI",
        "offset": 0,
        "slot": "31",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(FeeComponent)5145_storage)dyn_storage": {
        "base": "t_struct(FeeComponent)5145_storage",
        "encoding": "dynamic_array",
        "label": "struct BaseStorage.FeeComponent[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Voyager)5150_storage)dyn_storage": {
        "base": "t_struct(Voyager)5150_storage",
        "encoding": "dynamic_array",
        "label": "struct BaseStorage.Voyager[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)5_storage": {
        "base": "t_uint32",
        "encoding": "inplace",
        "label": "uint32[5]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Voyager)5150_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct BaseStorage.Voyager))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Voyager)5150_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Voyager)5150_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BaseStorage.Voyager)",
        "numberOfBytes": "32",
        "value": "t_struct(Voyager)5150_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FeeComponent)5145_storage": {
        "encoding": "inplace",
        "label": "struct BaseStorage.FeeComponent",
        "members": [
          {
            "astId": 5142,
            "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
            "label": "dgt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5144,
            "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
            "label": "dsp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voyager)5150_storage": {
        "encoding": "inplace",
        "label": "struct BaseStorage.Voyager",
        "members": [
          {
            "astId": 5147,
            "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5149,
            "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}