{
  "address": "0x33FcA39756779f0d890E2c7BF72F0320B01f441b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voyagerStorage",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_changeTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_mintVoyager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "_mintVoyagerByWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnDSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "changeTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curVersion",
      "outputs": [
        {
          "internalType": "address",
          "name": "voyagerLogic",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayVersion",
      "outputs": [
        {
          "internalType": "address",
          "name": "voyagerLogic",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayVersionName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dsp",
      "outputs": [
        {
          "internalType": "contract DeepSeaPlankton",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipMintableState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        }
      ],
      "name": "getLogicContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voyagerLogic",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "levelUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mineIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintVoyager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mintVoyagerByWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "setFee1TokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token2",
          "type": "address"
        }
      ],
      "name": "setFee2TokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "setProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setToken0URI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newVersion",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_voyagerLogic",
          "type": "address"
        }
      ],
      "name": "setUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vS",
      "outputs": [
        {
          "internalType": "contract VoyagerStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "versionList",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawDGT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7831754078bfc381171634460beff59a0607e92141b09647be910fcd8d405ea4",
  "receipt": {
    "to": null,
    "from": "0x6993AffA5572139D896B67Fe3A108B51EB6f8B53",
    "contractAddress": "0x33FcA39756779f0d890E2c7BF72F0320B01f441b",
    "transactionIndex": 1,
    "gasUsed": "4340584",
    "logsBloom": "0x
    "blockHash": "0xe5a84986025edf9aeeb7f08a1886eead0a9bab46201a719689bad3c7af219a19",
    "transactionHash": "0x7831754078bfc381171634460beff59a0607e92141b09647be910fcd8d405ea4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9687306,
        "transactionHash": "0x7831754078bfc381171634460beff59a0607e92141b09647be910fcd8d405ea4",
        "address": "0x33FcA39756779f0d890E2c7BF72F0320B01f441b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006993affa5572139d896b67fe3a108b51eb6f8b53"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe5a84986025edf9aeeb7f08a1886eead0a9bab46201a719689bad3c7af219a19"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 9687306,
        "transactionHash": "0x7831754078bfc381171634460beff59a0607e92141b09647be910fcd8d405ea4",
        "address": "0x33FcA39756779f0d890E2c7BF72F0320B01f441b",
        "topics": [
          "0xf8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000006993affa5572139d896b67fe3a108b51eb6f8b53",
        "logIndex": 2,
        "blockHash": "0xe5a84986025edf9aeeb7f08a1886eead0a9bab46201a719689bad3c7af219a19"
      }
    ],
    "blockNumber": 9687306,
    "cumulativeGasUsed": "4435091",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3EFE7499cCD3E02faF6B0D201587F23E641fa24D"
  ],
  "solcInputHash": "111832c4bd8240d32d619a68a1c12b62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voyagerStorage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_changeTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintVoyager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"_mintVoyagerByWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnDSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"changeTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"voyagerLogic\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"voyagerLogic\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayVersionName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dsp\",\"outputs\":[{\"internalType\":\"contract DeepSeaPlankton\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipMintableState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"getLogicContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voyagerLogic\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"levelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mineIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintVoyager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintVoyagerByWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"setFee1TokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"}],\"name\":\"setFee2TokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setToken0URI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_voyagerLogic\",\"type\":\"address\"}],\"name\":\"setUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vS\",\"outputs\":[{\"internalType\":\"contract VoyagerStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawDGT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"admin()\":{\"details\":\"Returns the address of the current admin.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferAdmin(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newAdmin`). Can only be called by the current admin.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyager/Voyager.sol\":\"Voyager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/dsp/DeepSeaPlankton.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./HasMinters.sol\\\";\\n\\n// interface IERC20Detailed {\\n//   function name() external view returns (string memory _name);\\n//   function symbol() external view returns (string memory _symbol);\\n//   function decimals() external view returns (uint8 _decimals);\\n// }\\n\\ncontract DeepSeaPlankton is ERC20Burnable, HasMinters, ReentrancyGuard {\\n\\n    constructor() ERC20(\\\"Deep Sea Plankton\\\", \\\"DSP\\\") {\\n        address[] memory _minters = new address[](2);\\n        _minters[0] = owner();\\n        _minters[1] = admin;\\n        addMinters(_minters);\\n    }\\n\\n    mapping (address => uint) public mintable;\\n\\n    function mintByMinter(address _to, uint256 _value) public onlyMinter nonReentrant {\\n        _mint(_to, _value);\\n    }\\n\\n    // process: \\n    // 0. \\u5728\\u540e\\u7aef\\u5b8c\\u6210\\u53ef\\u63d0\\u53d6\\u91d1\\u989d\\u6821\\u9a8c\\uff1b\\n    // 1. \\u5728\\u7528\\u6237\\u53d1\\u8d77\\u63d0\\u53d6\\u65f6\\uff0c\\u540e\\u7aef\\u7ed9\\u7528\\u6237\\u6dfb\\u52a0\\u53ef\\u63d0\\u53d6\\u91d1\\u989d\\uff1b\\n    // 2. \\u540e\\u7aef\\u7ed9\\u7528\\u6237\\u6dfb\\u52a0mint\\u6570\\u91cf\\uff1b\\n    // 3. \\u7528\\u6237\\u5b8c\\u6210mint\\uff0c\\u91cd\\u7f6e\\u6570\\u503c\\u4e3a0.\\n\\n    function addMintable(address _to, uint _value) public onlyMinter nonReentrant {\\n        mintable[_to] += _value;\\n    }\\n\\n    function mintByUser() public nonReentrant {\\n        require(mintable[msg.sender] > 0, \\\"No mintable\\\");\\n        // todo: \\u9650\\u5236\\u4e0d\\u540c\\u7b49\\u7ea7\\u4e00\\u6b21\\u53efmint\\u7684\\u6570\\u91cf\\u4e0a\\u9650\\n        _mint(msg.sender, mintable[msg.sender]);\\n        mintable[msg.sender] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xb2e7e615a319d3795ad60873f74ce36d4dbc5be9a8fc8b38630d9411828eb5a4\",\"license\":\"MIT\"},\"contracts/dsp/HasAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract HasAdmin is Ownable {\\n  event AdminChanged(address indexed _oldAdmin, address indexed _newAdmin);\\n  event AdminRemoved(address indexed _oldAdmin);\\n\\n  address public admin;\\n\\n  modifier onlyAdmin {\\n    require(msg.sender == admin, \\\"HasAdmin: not admin\\\");\\n    _;\\n  }\\n\\n  constructor() {\\n    admin = msg.sender;\\n    emit AdminChanged(address(0), admin);\\n  }\\n\\n  function changeAdmin(address _newAdmin) external onlyOwner {\\n    require(_newAdmin != address(0), \\\"HasAdmin: new admin is the zero address\\\");\\n    emit AdminChanged(admin, _newAdmin);\\n    admin = _newAdmin;\\n  }\\n\\n  function removeAdmin() external onlyOwner {\\n    emit AdminRemoved(admin);\\n    admin = address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xb5ea7cd10f05001175d17f4640115a0e514b9b7f18d44548d7a2d3ff5cddf905\",\"license\":\"MIT\"},\"contracts/dsp/HasMinters.sol\":{\"content\":\"// File: access/HasMinters.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasAdmin.sol\\\";\\n\\ncontract HasMinters is HasAdmin {\\n  event MinterAdded(address indexed _minter);\\n  event MinterRemoved(address indexed _minter);\\n\\n  address[] public minters;\\n  mapping (address => bool) public minter;\\n\\n  modifier onlyMinter {\\n    require(minter[msg.sender]);\\n    _;\\n  }\\n\\n  function addMinters(address[] memory _addedMinters) public onlyOwner {\\n    address _minter;\\n\\n    for (uint256 i = 0; i < _addedMinters.length; i++) {\\n      _minter = _addedMinters[i];\\n\\n      if (!minter[_minter]) {\\n        minters.push(_minter);\\n        minter[_minter] = true;\\n        emit MinterAdded(_minter);\\n      }\\n    }\\n  }\\n\\n  function removeMinters(address[] memory _removedMinters) public onlyOwner {\\n    address _minter;\\n\\n    for (uint256 i = 0; i < _removedMinters.length; i++) {\\n      _minter = _removedMinters[i];\\n\\n      if (minter[_minter]) {\\n        minter[_minter] = false;\\n        emit MinterRemoved(_minter);\\n      }\\n    }\\n\\n    uint256 i = 0;\\n\\n    while (i < minters.length) {\\n      _minter = minters[i];\\n\\n      if (!minter[_minter]) {\\n        minters[i] = minters[minters.length - 1];\\n        delete minters[minters.length - 1];\\n      } else {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  function isMinter(address _addr) public view returns (bool) {\\n    return minter[_addr];\\n  }\\n}\",\"keccak256\":\"0x51a03b5cc59a39e2a1795fa4181b0665392cd2b1c35112541d32276ee64cd10e\"},\"contracts/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./Sig.sol\\\";\\n\\ncontract AccessControl is Ownable, ReentrancyGuard {\\n    using SafeMath for uint;\\n\\n    // event ContractUpgrade(address newContract);\\n    event AdminTransferred(address oldAdmin, address newAdmin);\\n\\n    address private _admin;\\n    address public proxy;\\n    bool public mintIsActive = true;\\n    bool public mineIsActive = true;\\n\\n    constructor() {\\n        _setAdmin(_msgSender());\\n    }\\n\\n    function verified(bytes32 hash, bytes memory signature) public view returns (bool){\\n        return admin() == Sig.recover(hash, signature);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current admin.\\n     */\\n    function admin() public view virtual returns (address) {\\n        return _admin;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(admin() == _msgSender(), \\\"Invalid Admin: caller is not the admin\\\");\\n        _;\\n    }\\n\\n    function _setAdmin(address newAdmin) private {\\n        address oldAdmin = _admin;\\n        _admin = newAdmin;\\n        emit AdminTransferred(oldAdmin, newAdmin);\\n    }\\n\\n    function setProxy(address _proxy) external onlyOwner {\\n        require(_proxy != address(0), \\\"Invalid Address\\\");\\n        proxy = _proxy;\\n    }\\n\\n    modifier onlyProxy() {\\n        require(proxy == _msgSender(), \\\"Not Permit: caller is not the proxy\\\"); \\n        _;\\n    }\\n\\n    modifier sigVerified(bytes memory signature) {\\n        require(verified(Sig.ethSignedHash(msg.sender), signature), \\\"Not verified\\\");\\n        _;\\n    }\\n\\n    modifier activeMint() {\\n        require(mintIsActive, \\\"Unactive to mint\\\");\\n        _;\\n    } \\n\\n    modifier activeMine() {\\n        require(mineIsActive, \\\"Unactive to mint\\\");\\n        _;\\n    } \\n    \\n    modifier notZeroAddress(address addr) {\\n        require(addr != address(0), \\\"Zero address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newAdmin`).\\n     * Can only be called by the current admin.\\n     */\\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Invalid Admin: new admin is the zero address\\\");\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /*\\n    * Pause sale if active, make active if paused\\n    */\\n    function flipMintableState() public onlyAdmin {\\n        mintIsActive = !mintIsActive;\\n    }\\n}\\n\",\"keccak256\":\"0xa4be9d8bd9df054d314615a9f75903ce7082db68313ee25177f59ea1242b2c16\",\"license\":\"MIT\"},\"contracts/utils/Sig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Sig {\\n\\n    using ECDSA for bytes32;\\n\\n    function addressHash(address _addr) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_addr));\\n    }\\n\\n    function ethSignedHash(address _addr) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_addr)).toEthSignedMessageHash();\\n    }\\n\\n    function recover(bytes32 hash, bytes memory signature) public pure returns(address) {\\n        return hash.recover(signature);\\n    }\\n\\n    function verified(bytes32 hash, bytes memory signature, address signer) public pure returns (bool){\\n        return signer == recover(hash, signature);\\n    }\\n}\\n\",\"keccak256\":\"0x4ff42be9fde5215138aec5a4fd5c356ee2c77e96fc379168bac390025a62e5a7\",\"license\":\"MIT\"},\"contracts/voyager/BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract BaseStorage {\\n    address public dgtAddress;\\n    address public dspAddress;\\n\\n    uint public decimals = 10 ** 18;\\n\\n    struct FeeComponent {\\n        uint256 dgt;\\n        uint256 dsp;\\n    }\\n\\n    struct Voyager {\\n        // Level of Voyager is from 1 to 6\\n        uint8 level;\\n        // Id of the Voyager\\n        uint256 id;\\n        address minter;\\n        // todo: image of the Voyager\\u662f\\u5426\\u5728struct\\u4e2d\\u5c55\\u793a \\n        uint256 startHoldingTime; // NFT\\u6301\\u6709\\u603b\\u65f6\\u957f\\n        uint256 levelStartHoldingTime; // \\u5f53\\u524d\\u7b49\\u7ea7\\u6301\\u6709\\u65f6\\u95f4\\n    }\\n\\n    /*** CONSTANTS ***/\\n    /// \\u4e0d\\u540c\\u7b49\\u7ea7\\u5347\\u7ea7\\u7684\\u65f6\\u95f4\\u95f4\\u9694,\\u6700\\u5927cooldowns\\u662f7\\u5929\\n    uint32[5] public cooldowns = [\\n        uint32(30 minutes),\\n        uint32(1 days),\\n        uint32(2 days),\\n        uint32(4 days),\\n        uint32(7 days)\\n    ];\\n\\n    /*** STORAGE ***/\\n    uint256 public minLevel = 1;\\n    uint256 public maxLevel;\\n    uint256 public initialSupply = 1000;\\n\\n    FeeComponent[] public levelUpFees;\\n\\n    uint[6] public levelUpDGT = [100, 100, 100, 300, 1000, 1000];\\n    uint[6] public levelUpDSP = [3593, 3683, 3808, 7457, 11230, 18686];\\n    // todo: \\u5df2\\u7ecf\\u4e58\\u8fc710**18\\n    uint256[6] public levelUpDSPParam1 = [3621, 3972, 4097, 7763, 11553, 19044]; \\n    uint256[6] public levelUpDSPParam2 = [3621, 3668, 3793, 7459, 11249, 18740]; \\n\\n    // constructor() {\\n    //     levelUpDSPParam.push([1772280209, 980723583462, 246158456134135, 22391115099470864, 1198780346498323712, 3601786559875276341248]);\\n    //     levelUpDSPParam.push([1772280209, 980723583462, 246158456134124, 22391115099468928, 1198780346498212096, 3691786559875272671232]);\\n    //     levelUpDSPParam.push([1789655505, 990338520554, 248571774331527, 22610635835739876, 1210533094993398272, 3816215839874055405568]);\\n    //     levelUpDSPParam.push([3544560418, 1961447166924, 492316912268235, 44782230198936496, 2397560692996402176, 7473573119750552158208]);\\n    //     levelUpDSPParam.push([5316840627, 2942170750386, 738475368402420, 67173345298413568, 3596341039494998528, 11255359679625831645184]);\\n    //     levelUpDSPParam.push([8861401046, 4903617917310, 1230792280670524, 111955575497332560, 5993901732490513408, 18728932799376372269056]);\\n    // }\\n}\\n\",\"keccak256\":\"0xf7b1a5e8af3c7f439398c8edec09ee88d1797a6d10050e00a6c73525f466e373\",\"license\":\"MIT\"},\"contracts/voyager/Voyager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./VoyagerProxy.sol\\\";\\nimport \\\"./VoyagerLogic.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"../dsp/DeepSeaPlankton.sol\\\";\\n\\ncontract Voyager is VoyagerProxy, Pausable {\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n    // VoyagerLogic public voyagerLogic;\\n    // VoyagerStorage public vS\\n    DeepSeaPlankton public dsp;\\n\\n    constructor(\\n        address _voyagerStorage\\n        // address _voyagerLogic\\n    )\\n    {\\n        // require(_DGTToken != address(0) && _DGTBeneficiary != address(0) &&\\n        //         _ips != address(0) && _gps != address(0) &&\\n        //         _lps != address(0) && _vts != address(0), \\\"Invalid Address\\\");\\n        require(_voyagerStorage != address(0) , \\\"Invalid Address\\\");\\n\\n        // DGTToken = _DGTToken;\\n        // DGTBeneficiary = _DGTBeneficiary;\\n        // voyagerLogic = VoyagerLogic(_voyagerLogic);\\n        vS = VoyagerStorage(_voyagerStorage);\\n    }\\n\\n    function initialize(\\n        address _voyagerLogic\\n    )\\n        external onlyOwner\\n    {\\n        require(!initialized, \\\"Already Initialized\\\");\\n        setUpgrade(\\\"0.0.1\\\", _voyagerLogic);\\n        executeUpgrade();\\n        initialized = true;\\n    }\\n\\n    function setPause(\\n    )\\n        external onlyOwner\\n    {\\n        _pause();\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unPause(\\n    )\\n        external onlyOwner\\n    {\\n        _unpause();\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    // todo: using delegatecall fufill functions \\n    function _mintVoyagerByWhitelist(\\n        bytes memory signature\\n    ) external sigVerified(signature) activeMint whenNotPaused nonReentrant {\\n        // (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\\n        //     \\\"mintVoyagerByWhitelist(bytes)\\\")),\\n        //     signature));\\n        // require(status, \\\"mintVoyagerByWhitelist Failed\\\");\\n    }\\n    \\n    //   \\n    function mintVoyagerByWhitelist(\\n        bytes memory signature\\n    ) public sigVerified(signature) activeMint whenNotPaused nonReentrant\\n    {\\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \\\"Set tokenURI first\\\");\\n        // require(verified(Sig.ethSignedHash(msg.sender), signature), \\\"Not verified\\\");\\n        require(!vS.getExpiredWhitelist(msg.sender), \\\"Expired\\\");\\n        // require(mintIsActive, \\\"Unactive to mint Voyager\\\");\\n        require(vS.getWhitelistExpired().add(1) <= vS.getMaxWhitelisted(), \\n                            \\\"Mint would exceed max supply of Voyagers\\\");\\n        \\n        uint256 tokenID = vS.getTotalMinted();\\n        \\n        vS.mintVoyayer(msg.sender, tokenID);\\n        \\n        if (tokenID == 0) {\\n            vS._setTokenURI(tokenID, vS.getToken0URI());\\n        } else {\\n            vS.setTokenIDWithoutURI(msg.sender, tokenID);\\n        }\\n        \\n        vS.setTotalMinted(vS.getTotalMinted().add(1));\\n        vS.setExpiredWhitelist(msg.sender, true);\\n        vS.setWhitelistExpired(vS.getWhitelistExpired().add(1));\\n    }\\n\\n    function _mintVoyager() external activeMint whenNotPaused nonReentrant {\\n        (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\\n            \\\"mintVoyager()\\\"))));\\n        require(status, \\\"mintVoyager Failed\\\");\\n    }    \\n\\n    function mintVoyager() public\\n    {\\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \\\"Set tokenURI first\\\");\\n        // require(verified(Sig.ethSignedHash(msg.sender), signature), \\\"Not verified\\\");\\n        // require(!expiredWhitelist[msg.sender], \\\"Expired\\\");\\n        // require(mintIsActive, \\\"Unactive to mint Voyager\\\");\\n        // require(whitelistExpired.add(1) <= maxWhitelisted, \\\"Mint would exceed max supply of Voyagers\\\");\\n        uint256 tokenID = vS.getTotalMinted();\\n\\n        (uint fee1, uint fee2) = vS.getMintFee();\\n        // \\u4f59\\u989d\\u8db3\\u591f\\n        require(IERC20(vS.dgtAddress()).balanceOf(msg.sender) >= fee1, \\n                                            \\\"Unsufficient dgt token\\\");\\n        require(IERC20(vS.dspAddress()).balanceOf(msg.sender) >= fee2, \\n                                    \\\"Unsufficient dsp token\\\");\\n        // todo: \\u8f6c\\u8d26DGT\\u5230\\u91d1\\u5e93\\u5408\\u7ea6\\n        IERC20(vS.dgtAddress()).safeTransferFrom(msg.sender, address(this), fee1);\\n        // todo: \\u9500\\u6bc1DSP\\n        IERC20(vS.dspAddress()).safeTransferFrom(msg.sender, address(this), fee2);\\n        \\n        vS.mintVoyayer(msg.sender, tokenID);\\n        \\n        if (tokenID == 0) {\\n            vS._setTokenURI(tokenID, vS.getToken0URI());\\n        } else {\\n            vS.setTokenIDWithoutURI(msg.sender, tokenID);\\n        }\\n        \\n        vS.setTotalMinted(vS.getTotalMinted().add(1));\\n        // expiredWhitelist[msg.sender] = true;\\n    }\\n\\n    function _changeTokenURI(\\n        uint256 tokenID, \\n        string memory _tokenURI\\n    ) external onlyAdmin whenNotPaused \\n    {\\n        (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\\n            \\\"changeTokenURI(uint256,string)\\\")),\\n            tokenID, _tokenURI));\\n        require(status, \\\"changeTokenURI Failed\\\");\\n    }  \\n\\n    function changeTokenURI(uint256 tokenID, string memory _tokenURI) public onlyAdmin {\\n        vS._setTokenURI(tokenID, _tokenURI);\\n    }\\n\\n    // function _setToken0URI(\\n    //     string memory _tokenURI\\n    // ) external onlyOwner whenNotPaused \\n    // {\\n    //     (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\\n    //         \\\"setToken0URI(string)\\\")),\\n    //         _tokenURI));\\n    //     require(status, \\\"setToken0URI Failed\\\");\\n    // }\\n\\n    function setToken0URI(string memory _tokenURI) public onlyAdmin {\\n        vS.token0URI(_tokenURI);\\n    }\\n\\n    // function _setTokenURI(\\n    //     uint256 _tokenid, \\n    //     uint256 _level, \\n    //     string memory _tokenURI\\n    // ) external whenNotPaused \\n    // {\\n    //     (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\\n    //         \\\"setTokenURI(uint256,uint256,string)\\\")),\\n    //         _tokenid, _level, _tokenURI));\\n    //     require(status, \\\"setTokenURI Failed\\\");\\n    // }\\n\\n    function setTokenURI(address _user, uint256 _tokenid, uint256 _level, string memory _tokenURI) public onlyAdmin {\\n        uint256 tokenID = vS.getTokenIDWithoutURI(_user);\\n        uint256 level = vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level;\\n\\n        require(tokenID > 0, \\\"Unvalid token\\\");\\n        require(vS.ownerOf(tokenID) == _user, \\\"Not owner\\\");\\n        require(_tokenid == tokenID, \\\"Consistent tokenID\\\");\\n        require(level == _level, \\\"Consistent level\\\");\\n        require(!vS.getSetByOwner(tokenID, level), \\\"Set over once\\\");\\n        vS._setTokenURI(tokenID, _tokenURI);\\n\\n        vS.setTokenIDWithoutURI(_user, 0);\\n        vS.setSetByOwner(tokenID, level, true);\\n    }\\n\\n    // function _levelUp(\\n    //     uint256 tokenID\\n    // ) external whenNotPaused \\n    // {\\n    //     (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\\n    //         \\\"levelUp(uint256)\\\")),\\n    //         tokenID));\\n    //     require(status, \\\"levelUp Failed\\\");\\n    // } \\n\\n    // \\u5347\\u7ea7\\u903b\\u8f91,\\u66f4\\u65b0: 1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\\n    function levelUp(uint256 tokenID) public nonReentrant {\\n        require(tokenID != 0, \\\"Not 0 token\\\");\\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \\\"Unvalid token\\\");\\n        require(vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level < vS.maxLevel(), \\n                                                          \\\"Already max level\\\");\\n        uint fee1;\\n        uint fee2;\\n        uint level = vS.getLevel(tokenID);\\n        (fee1, fee2) = vS.getLevelUpFeeV2(tokenID);\\n        // \\u4f59\\u989d\\u8db3\\u591f\\n        require(IERC20(vS.dgtAddress()).balanceOf(msg.sender) >= fee1, \\n                                            \\\"Unsufficient dgt token\\\");\\n        require(IERC20(vS.dspAddress()).balanceOf(msg.sender) >= fee2, \\n                                    \\\"Unsufficient dsp token\\\");\\n        // todo: \\u8f6c\\u8d26DGT\\u5230\\u91d1\\u5e93\\u5408\\u7ea6\\n        IERC20(vS.dgtAddress()).safeTransferFrom(msg.sender, address(this), fee1);\\n        // todo: \\u9500\\u6bc1DSP\\n        IERC20(vS.dspAddress()).safeTransferFrom(msg.sender, address(this), fee2);\\n\\n        // \\u5b8c\\u6210\\u5347\\u7ea7\\uff0c\\u66f4\\u65b0\\u4e0d\\u540clevel\\u7684\\u6570\\u91cf\\uff0c\\bNFT\\u7684level\\n        vS.setTokenLevelCount(msg.sender, vS.getLevel(tokenID), \\n                    vS.getTokenLevelCount(msg.sender, vS.getLevel(tokenID))-1);\\n        vS.setLevel(tokenID, vS.getLevel(tokenID) + 1);\\n        vS.setLevelStartHoldingTime(tokenID, block.timestamp);\\n        // levelOfVoyager[tokenID] = voyagers[tokenID].level;\\n        vS.setTokenLevelCount(msg.sender, vS.getLevel(tokenID), \\n                    vS.getTokenLevelCount(msg.sender, vS.getLevel(tokenID))+1);\\n        vS.setTokenIDWithoutURI(msg.sender, tokenID);\\n\\n        // \\u66f4\\u65b0maxLevel\\n        if (vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level > vS.getMaxLevelOfOwner(msg.sender)) {\\n            vS.setMaxLevelOfOwner(msg.sender, vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level);\\n        }\\n    }\\n\\n    // function _setFee1TokenAddress(\\n    //     address _token1\\n    // ) external onlyOwner whenNotPaused \\n    // {\\n    //     (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\\n    //         \\\"setFee1TokenAddress(address)\\\")),\\n    //         _token1));\\n    //     require(status, \\\"setFee1TokenAddress Failed\\\");\\n    // } \\n\\n    // function _setFee2TokenAddress(\\n    //     address _token2\\n    // ) external onlyOwner whenNotPaused \\n    // {\\n    //     (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\\n    //         \\\"setFee2TokenAddress(address)\\\")),\\n    //         _token2));\\n    //     require(status, \\\"setFee2TokenAddress Failed\\\");\\n    // } \\n\\n    function setFee1TokenAddress(\\n        address _token1\\n    ) public onlyAdmin whenNotPaused notZeroAddress(_token1) nonReentrant\\n    {\\n        vS.setFee1TokenAddress(_token1);\\n    }\\n\\n    function setFee2TokenAddress(\\n        address _token2\\n    ) public onlyAdmin whenNotPaused notZeroAddress(_token2) nonReentrant\\n    {\\n        vS.setFee2TokenAddress(_token2);\\n        dsp = DeepSeaPlankton(_token2);\\n    }\\n\\n    function withdrawDGT(uint _amount, address _to) public onlyOwner whenNotPaused nonReentrant {\\n        require(IERC20(vS.dgtAddress()).balanceOf(msg.sender) >= _amount, \\\"Insufficient balance\\\");\\n        IERC20(vS.dgtAddress()).transfer(_to, _amount);\\n    }\\n\\n    function burnDSP() public onlyOwner whenNotPaused nonReentrant {\\n        dsp.burn(IERC20(vS.dspAddress()).balanceOf(address(this)));\\n    }\\n\\n    // warning: same logic in VoyagerStorage smart contract\\n    // function setLevelUpFee(uint256 _toLevel, uint256 _dgt, uint256 _dsp) public onlyOwner {\\n    //     vS.setLevelUpFee(_toLevel, _dgt, _dsp);\\n    // }\\n    // function testDelegatecall() external {\\n    //     (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\\n    //         \\\"testDelegatecall()\\\"))));\\n    //     require(status, \\\"levelUp Failed\\\");\\n    // }\\n    \\n}\\n\",\"keccak256\":\"0xc273934826067978409dc9bb0c0ed2fed8ab698c60da5ef7869c742efb34ba77\",\"license\":\"MIT\"},\"contracts/voyager/VoyagerLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./VoyagerStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../utils/Sig.sol\\\";\\n\\n// 500\\u4e2a\\u521b\\u4e16\\u94f8\\u9020\\u6743\\uff0c\\u5176\\u4f59\\u94f8\\u9020\\u8981\\u6d88\\u8017DGT\\u548cDSP\\n// \\u6ee1\\u8db3\\u6761\\u4ef6\\u89e6\\u53d1NFT\\u5347\\u7ea7\\n// 1. \\u5c5e\\u6027\\u8bbe\\u7f6e\\uff1a\\u7b49\\u7ea7\\u3001\\u56fe\\u7247\\u3001\\u7f16\\u53f7\\n// \\n// \\u5408\\u7ea6\\u53ca\\u5176\\u529f\\u80fd\\uff1a\\n// 1. VoyagerAccessControl: \\u63a7\\u5236\\u64cd\\u4f5c\\u6743\\u9650\\n// 2. VoyagerBase: \\u901a\\u7528\\u57fa\\u7840\\u7684\\u6570\\u636e\\u7ed3\\u6784\\u3001\\u53d8\\u91cf\\n// 3. SaleClockAuction: \\u7528\\u4e8eVoyager\\u7684\\u62cd\\u5356\\u51fa\\u552e\\n\\n// /// @title The facet of the Voyager core contract that manages Voyager levelup.\\n// /// @author Andrew Fang (https://www.github.com/Andrew-DeepGo)\\n// /// @dev Ref: todo\\ncontract VoyagerLogic is BaseStorage, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    VoyagerStorage public vS;\\n    \\n    function testSetVs(address _vs) public {\\n        vS = VoyagerStorage(_vs);\\n    }\\n\\n    function testDelegatecall() external view returns (uint){\\n        return vS.getTokenIDWithoutURI(msg.sender);\\n    }\\n\\n    /**\\n    * Mint Voyagers\\uff0c\\u521d\\u59cb\\u5316: 1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\\n    */\\n    function mintVoyagerByWhitelist() external\\n    {\\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \\\"Set tokenURI first\\\");\\n        // require(verified(Sig.ethSignedHash(msg.sender), signature), \\\"Not verified\\\");\\n        require(!vS.getExpiredWhitelist(msg.sender), \\\"Expired\\\");\\n        // require(mintIsActive, \\\"Unactive to mint Voyager\\\");\\n        require(vS.getWhitelistExpired().add(1) <= vS.getMaxWhitelisted(), \\n                            \\\"Mint would exceed max supply of Voyagers\\\");\\n        \\n        uint256 tokenID = vS.getTotalMinted();\\n        \\n        vS.mintVoyayer(msg.sender, tokenID);\\n        \\n        if (tokenID == 0) {\\n            vS._setTokenURI(tokenID, vS.getToken0URI());\\n        } else {\\n            vS.setTokenIDWithoutURI(msg.sender, tokenID);\\n        }\\n        \\n        vS.setTotalMinted(vS.getTotalMinted().add(1));\\n        vS.setExpiredWhitelist(msg.sender, true);\\n        vS.setWhitelistExpired(vS.getWhitelistExpired().add(1));\\n    }\\n\\n    /**\\n    * Mint Voyagers\\uff0c\\u521d\\u59cb\\u5316: 1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\\n    */\\n    function mintVoyager() public\\n    {\\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \\\"Set tokenURI first\\\");\\n        // require(verified(Sig.ethSignedHash(msg.sender), signature), \\\"Not verified\\\");\\n        // require(!expiredWhitelist[msg.sender], \\\"Expired\\\");\\n        // require(mintIsActive, \\\"Unactive to mint Voyager\\\");\\n        // require(whitelistExpired.add(1) <= maxWhitelisted, \\\"Mint would exceed max supply of Voyagers\\\");\\n        (uint fee1, uint fee2) = vS.getLevelUpFee(vS.minLevel());\\n        // \\u4f59\\u989d\\u8db3\\u591f\\n        require(IERC20(dgtAddress).balanceOf(msg.sender) >= fee1, \\n                                            \\\"Unsufficient dgt token\\\");\\n        require(IERC20(dspAddress).balanceOf(msg.sender) >= fee2, \\n                                    \\\"Unsufficient dsp token\\\");\\n        // todo: \\u8f6c\\u8d26DGT\\u5230\\u91d1\\u5e93\\u5408\\u7ea6\\n        IERC20(dgtAddress).safeTransferFrom(msg.sender, address(this), fee1);\\n        // todo: \\u9500\\u6bc1DSP\\n        IERC20(dspAddress).safeTransferFrom(msg.sender, address(this), fee2);\\n        \\n        uint256 tokenID = vS.getTotalMinted();\\n        \\n        vS.mintVoyayer(msg.sender, tokenID);\\n        \\n        if (tokenID == 0) {\\n            vS._setTokenURI(tokenID, vS.getToken0URI());\\n        } else {\\n            vS.setTokenIDWithoutURI(msg.sender, tokenID);\\n        }\\n        \\n        vS.setTotalMinted(vS.getTotalMinted().add(1));\\n        // expiredWhitelist[msg.sender] = true;\\n    }\\n\\n    function changeTokenURI(uint256 tokenID, string memory _tokenURI) public {\\n        vS._setTokenURI(tokenID, _tokenURI);\\n    }\\n    \\n    // tokenID\\u4e3a0\\u7684tokenURI \\n    function setToken0URI(string memory _tokenURI) public {\\n        vS.token0URI(_tokenURI);\\n    }\\n\\n    // \\u83b7\\u53d6address\\u5f85\\u751f\\u6210URI\\u7684tokenID\\uff1atokenIDWithoutURI[address]\\n\\n    // \\u83b7\\u53d6tokenID\\u7684level: levelOfVoyager[tokenID]\\n\\n    // \\u68c0\\u67e5\\u540e\\u7aef\\u53d6\\u56de\\u4e0e\\u5b58\\u50a8id\\uff0c\\n    function setTokenURI(uint256 _tokenid, uint256 _level, string memory _tokenURI) public {\\n        uint256 tokenID = vS.getTokenIDWithoutURI(msg.sender);\\n        uint256 level = vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level;\\n\\n        require(tokenID > 0, \\\"Unvalid token\\\");\\n        require(vS.ownerOf(tokenID) == msg.sender, \\\"Not owner\\\");\\n        require(_tokenid == tokenID, \\\"Consistent tokenID\\\");\\n        require(level == _level, \\\"Consistent level\\\");\\n        require(!vS.getSetByOwner(tokenID, level), \\\"Set over once\\\");\\n        vS._setTokenURI(tokenID, _tokenURI);\\n\\n        vS.setTokenIDWithoutURI(msg.sender, 0);\\n        vS.setSetByOwner(tokenID, level, true);\\n    }\\n\\n    // \\u5347\\u7ea7\\u903b\\u8f91,\\u66f4\\u65b0: 1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\\n    function levelUp(uint256 tokenID) public nonReentrant {\\n        require(tokenID != 0, \\\"Not 0 token\\\");\\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \\\"Unvalid token\\\");\\n        require(vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level < vS.maxLevel(), \\n                                                          \\\"Already max level\\\");\\n        uint fee1;\\n        uint fee2;\\n        uint level = vS.getLevel(tokenID);\\n        (fee1, fee2) = vS.getLevelUpFee(level);\\n        // \\u4f59\\u989d\\u8db3\\u591f\\n        require(IERC20(dgtAddress).balanceOf(msg.sender) >= fee1, \\n                                            \\\"Unsufficient dgt token\\\");\\n        require(IERC20(dspAddress).balanceOf(msg.sender) >= fee2, \\n                                    \\\"Unsufficient dsp token\\\");\\n        // todo: \\u8f6c\\u8d26DGT\\u5230\\u91d1\\u5e93\\u5408\\u7ea6\\n        IERC20(dgtAddress).safeTransferFrom(msg.sender, address(this), fee1);\\n        // todo: \\u9500\\u6bc1DSP\\n        IERC20(dspAddress).safeTransferFrom(msg.sender, address(this), fee2);\\n\\n        // \\u5b8c\\u6210\\u5347\\u7ea7\\uff0c\\u66f4\\u65b0\\u4e0d\\u540clevel\\u7684\\u6570\\u91cf\\uff0c\\bNFT\\u7684level\\n        vS.setTokenLevelCount(msg.sender, vS.getLevel(tokenID), \\n                    vS.getTokenLevelCount(msg.sender, vS.getLevel(tokenID))-1);\\n        vS.setLevel(tokenID, vS.getLevel(tokenID) + 1);\\n        // levelOfVoyager[tokenID] = voyagers[tokenID].level;\\n        vS.setTokenLevelCount(msg.sender, vS.getLevel(tokenID), \\n                    vS.getTokenLevelCount(msg.sender, vS.getLevel(tokenID))+1);\\n        vS.setTokenIDWithoutURI(msg.sender, tokenID);\\n\\n        // \\u66f4\\u65b0maxLevel\\n        if (vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level > vS.getMaxLevelOfOwner(msg.sender)) {\\n            vS.setMaxLevelOfOwner(msg.sender, vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level);\\n        }\\n    }\\n\\n    function setFee1TokenAddress(address _token1) external {\\n        dgtAddress = _token1;\\n    }\\n\\n    function setFee2TokenAddress(address _token2) external {\\n        dspAddress = _token2;\\n    }\\n\\n    // /* Test functions */\\n    // function testMintVoyager(\\n    //     bytes memory signature\\n    // ) public view returns (bool)\\n    // {\\n    //     // require(vS.getTokenIDWithoutURI(msg.sender) == 0, \\\"Set tokenURI first\\\");\\n    //     return Sig.verified(Sig.ethSignedHash(msg.sender), signature, admin());\\n    // }\\n}\\n\",\"keccak256\":\"0xdb94ecad8ac5cb92d46b399df420a64711161d2d1a591f5d2e8aad4f539a49e5\",\"license\":\"MIT\"},\"contracts/voyager/VoyagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"./VoyagerStorage.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ncontract VoyagerProxy is AccessControl {\\n    using SafeMath for uint256;\\n\\n    VoyagerStorage public vS;\\n\\n    struct LogicContracts {\\n        address voyagerLogic;\\n    }\\n\\n    mapping(string => LogicContracts) internal versions;\\n    LogicContracts public curVersion;\\n    LogicContracts public delayVersion;\\n    string[] public versionList;\\n    string public versionName;\\n    string public delayVersionName;\\n    uint256 constant delayTime = 24 hours;\\n    uint256 public startTime;\\n    bool public initialized;\\n\\n    // event SetUpgrade(string version, address IPlogic, address GPDepositLogic, address GPWithdrawLogic,\\n    //                 address LPLogic, address VaultLogic, address StateLogic, address LiquidationLogic);\\n    // event ExecuteUpgrade(string version, address IPlogic, address GPDepositLogic, address GPWithdrawLogic,\\n    //                 address LPLogic, address VaultLogic, address StateLogic, address LiquidationLogic);\\n    // event Rollback();\\n\\n    function setUpgrade(\\n        string memory _newVersion,\\n        address _voyagerLogic\\n    )\\n        public onlyOwner\\n    {\\n        require(_voyagerLogic != address(0), \\\"Wrong Address\\\");\\n        require(bytes(_newVersion).length > 0, \\\"Empty Version\\\");\\n        require(keccak256(abi.encodePacked(versionName)) != keccak256(abi.encodePacked(_newVersion)), \\\"Existing Version\\\");\\n        delayVersionName = _newVersion;\\n        delayVersion.voyagerLogic = _voyagerLogic;\\n        startTime = block.timestamp;\\n        // emit SetUpgrade(_newVersion, _ipc, _gpdc, _gpwc, _lpc, _vtc, _stc, _lqdc);\\n    }\\n\\n    function executeUpgrade(\\n    )\\n        public onlyOwner\\n    {\\n        require(delayVersion.voyagerLogic != address(0), \\\"Wrong Address\\\");\\n        if (initialized) {\\n            require(block.timestamp > startTime.add(delayTime), \\\"In Delay\\\" );\\n        }\\n        versions[delayVersionName] = delayVersion;\\n        versionName = delayVersionName;\\n        curVersion = delayVersion;\\n        versionList.push(delayVersionName);\\n        delayVersionName = \\\"\\\";\\n        delete delayVersion;\\n        // emit ExecuteUpgrade(versionName, curVersion.ipc, curVersion.gpdc, curVersion.gpwc, curVersion.lpc,\\n        //                     curVersion.vtc, curVersion.stc, curVersion.lqdc);\\n    }\\n\\n    function rollback(\\n    )\\n        external onlyOwner\\n    {\\n        delayVersionName = \\\"\\\";\\n        delete delayVersion;\\n        // emit Rollback();\\n    }\\n\\n    function getLogicContracts(\\n        string calldata _version\\n    ) \\n        external view onlyOwner\\n        returns(address)\\n    {\\n        require(bytes(_version).length > 0, \\\"Empty Version\\\");\\n        return (versions[_version].voyagerLogic);\\n    }\\n}\\n\",\"keccak256\":\"0x66839e7aedb52a6cb41ffca9a94c5b0260a3469b3985b1d1bddc226f4f2f857f\",\"license\":\"MIT\"},\"contracts/voyager/VoyagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"./BaseStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"../utils/Sig.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ncontract VoyagerStorage is ERC721, IERC721Enumerable, BaseStorage, AccessControl {\\n    using SafeMath for uint;\\n    // using SafeERC20 for IERC20;\\n\\n    /// @dev An array containing the Voyager struct for all Voyagers in existence. The ID of\\n    /// each Voyager is actually an index into this array.\\n    Voyager[] public voyagers;\\n\\n    // Mapping from owner to Voyager array\\n    mapping(address => uint[]) public ownedVoyagers;\\n    \\n    // Mapping from token ID to index of the owner tokenId list\\n    mapping(address => mapping( uint256 => uint256 )) public ownedVoyagersIndex;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) public allVoyagersIndex;\\n\\n    /// @dev A mapping from Voyager to the max level of the Voyager. \\n    mapping (address => uint256) public maxLevelOfOwner;\\n\\n    /// @dev A mapping from owner to token amount of each level. \\n    mapping (address => mapping(uint256 => uint256)) public tokenLevelCount;\\n\\n    mapping(uint256 => string) private _tokenURIs;\\n    mapping(uint256 => mapping(uint256 => bool)) public setByOwner; // tokenURI is set by owner in certain level\\n    mapping(address => uint256) private _tokenIDWithoutURI;\\n    mapping (address => bool) private _expiredWhitelist; \\n\\n    uint private _maxWhitelisted = 1000;\\n    uint private _totalMinted;\\n    uint private _whitelistExpired;\\n    string private _token0URI;\\n\\n    // todo: update\\n    constructor(uint256 _maxLevel) ERC721(\\\"Voyager\\\", \\\"VOG\\\")  {\\n        maxLevel = _maxLevel;\\n        initialLevelUpFees();\\n    }\\n    \\n    function getOwnedVoyagers(address _addr) public view returns (uint[] memory) {\\n        return ownedVoyagers[_addr];\\n    }\\n\\n    // \\u6301\\u6709\\u4e00\\u5b9a\\u5929\\u6570\\u7684\\u6700\\u5927\\u7b49\\u7ea7\\u6570\\n    function getValidMaxLevel(address owner, uint256 continueDays) public view returns (uint) {\\n        uint balance = ERC721.balanceOf(owner); \\n        uint maxLevel;\\n        Voyager memory voyager;\\n        for (uint i=0; i<balance; i++) {\\n            uint tokenId = ownedVoyagers[owner][i];\\n            voyager = getVoyagerByTokenId(tokenId);\\n            if (voyager.minter == ownerOf(tokenId) && voyager.level > maxLevel) {\\n                maxLevel = voyager.level;\\n            } else if (block.timestamp - voyager.startHoldingTime > (1 days) * continueDays\\n                && voyager.level > maxLevel) {\\n                maxLevel = voyager.level;\\n            }\\n        }\\n        return maxLevel;\\n    }\\n    \\n    function getVoyager(uint _index) public view returns (Voyager memory){\\n        return voyagers[_index];\\n    }\\n\\n    function getVoyagerByTokenId(uint _tokenId) public view returns (Voyager memory){\\n        return voyagers[getAllVoyagerIndex(_tokenId)];\\n    }\\n\\n    \\n    function getSetByOwner(uint _tokenId, uint _level) public view returns (bool) {\\n        return setByOwner[_tokenId][_level];\\n    }\\n\\n    function setSetByOwner(uint _tokenId, uint _level, bool _isSet) public onlyProxy{\\n        setByOwner[_tokenId][_level] = _isSet;\\n    }\\n    \\n\\n    function getTokenIDWithoutURI(address _addr) public view returns (uint) {\\n        return _tokenIDWithoutURI[_addr];\\n    }\\n\\n    function setTokenIDWithoutURI(address _addr, uint _tokenId) public onlyProxy {\\n        _tokenIDWithoutURI[_addr] = _tokenId;\\n    }\\n\\n    function getMaxWhitelisted() public view returns (uint) {\\n        return _maxWhitelisted;\\n    }\\n\\n    function getTotalMinted() public view returns (uint) {\\n        return _totalMinted;\\n    }\\n\\n    function setTotalMinted(uint _amount) public onlyProxy {\\n        _totalMinted = _amount;\\n    }\\n\\n    function getWhitelistExpired() public view returns (uint){\\n        return _whitelistExpired;\\n    }\\n\\n    function setWhitelistExpired(uint _amount) public onlyProxy {\\n        _whitelistExpired = _amount;\\n    }\\n\\n    function getToken0URI() public view returns (string memory) {\\n        return _token0URI;\\n    }\\n\\n    function token0URI(string memory _string) public onlyProxy {\\n        _token0URI = _string;\\n    }\\n\\n    function getExpiredWhitelist(address _addr) public view returns (bool) {\\n        return _expiredWhitelist[_addr];\\n    }\\n\\n    function setExpiredWhitelist(address _addr, bool _isExpired) public onlyProxy {\\n        _expiredWhitelist[_addr] = _isExpired;\\n    }\\n\\n    function getAllVoyagerIndex(uint _tokenId) public view returns (uint) {\\n        return allVoyagersIndex[_tokenId];\\n    }\\n\\n    function getMaxLevelOfOwner(address _addr) public view returns (uint) {\\n        return maxLevelOfOwner[_addr];\\n    }\\n\\n    function setMaxLevelOfOwner(address _addr, uint _level) public onlyProxy {\\n        maxLevelOfOwner[_addr] = _level;\\n    }\\n\\n    function getTokenLevelCount(address _addr, uint _level) public view returns (uint) {\\n        return tokenLevelCount[_addr][_level];\\n    }\\n\\n    function setTokenLevelCount(address _addr, uint _level, uint _amount) public onlyProxy {\\n        tokenLevelCount[_addr][_level] = _amount;\\n    }\\n\\n    function mintVoyayer(address _addr, uint _tokenId) public onlyProxy {\\n        _safeMint(_addr, _tokenId);\\n    }\\n\\n    function transferVoyager(address _to, uint _tokenId) public {\\n        require(getTokenIDWithoutURI(msg.sender) == 0, \\\"Set tokenURI first\\\");\\n        _safeTransfer(msg.sender, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return ownedVoyagers[owner][index];\\n    }\\n\\n    // function tokenIdsOwnedBy(address owner) public view returns (uint[] memory) {\\n    //     uint balance = ERC721.balanceOf(owner);\\n\\n    //     uint[] memory tokenIds;\\n\\n    //     for (uint index=0; index < balance; index++) {\\n    //         tokenIds[index] = ownedVoyagers[owner][index].id;\\n    //     }\\n\\n    //     return tokenIds;\\n    // }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return voyagers.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < VoyagerStorage.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return voyagers[index].id;\\n    }\\n\\n    // \\u5728transfer\\u4e4b\\u524d\\u66f4\\u65b0:1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override virtual {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId, to);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n            _updateSenderMaxLevel(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n            _updateReceiverMaxLevel(to, tokenId);\\n            voyagers[allVoyagersIndex[tokenId]].startHoldingTime = block.timestamp;\\n            voyagers[allVoyagersIndex[tokenId]].levelStartHoldingTime = block.timestamp;\\n            tokenLevelCount[to][voyagers[allVoyagersIndex[tokenId]].level] += 1;\\n        }\\n    }\\n\\n    function _updateSenderMaxLevel(address from, uint256 tokenId) private {\\n        // update from address maxLevel\\n        uint curLevel = voyagers[allVoyagersIndex[tokenId]].level;\\n        require(curLevel <= maxLevelOfOwner[from], \\\"Level over max\\\");\\n        // ownershipTokenCount[from] -= 1;\\n        tokenLevelCount[from][curLevel] -= 1;\\n\\n        if (ERC721.balanceOf(from) == 0) {\\n            maxLevelOfOwner[from] = 0;\\n        } else if ( curLevel == maxLevelOfOwner[from] ) {\\n            for (; curLevel > 0; curLevel--) {\\n                if (tokenLevelCount[from][curLevel] > 0) {\\n                    maxLevelOfOwner[from] = curLevel;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _updateReceiverMaxLevel(address to, uint256 tokenId) private {\\n        // update to address maxLevel\\n        uint curLevel = voyagers[allVoyagersIndex[tokenId]].level;\\n        if (curLevel > maxLevelOfOwner[to]) {\\n            maxLevelOfOwner[to] = curLevel;\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        ownedVoyagers[to].push(tokenId);\\n        ownedVoyagersIndex[to][tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId, address to) private {\\n        allVoyagersIndex[tokenId] = voyagers.length;\\n        if (tokenId == 0) {\\n            voyagers.push(Voyager(uint8(maxLevel), tokenId, to, block.timestamp, block.timestamp));\\n        } else {\\n            voyagers.push(Voyager(uint8(minLevel), tokenId, to, block.timestamp, block.timestamp));\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ownedVoyagers[from].length - 1;\\n        uint256 tokenIndex = ownedVoyagersIndex[from][tokenId];\\n\\n        uint lastVoyager = ownedVoyagers[from][lastTokenIndex];\\n        ownedVoyagers[from][tokenIndex] = lastVoyager;\\n        ownedVoyagersIndex[from][lastVoyager] = tokenIndex;\\n        delete ownedVoyagersIndex[from][tokenId];\\n        ownedVoyagers[from].pop();\\n        // // When the token to delete is the last token, the swap operation is unnecessary\\n        // if (tokenIndex != lastTokenIndex) {\\n        //     Voyager  storage lastVoyager = ownedVoyagers[from][lastTokenIndex];\\n\\n        //     ownedVoyagers[from][tokenIndex] = lastVoyager; // Move the last token to the slot of the to-delete token\\n        //     ownedVoyagersIndex[lastVoyager.id] = tokenIndex; // Update the moved token's index\\n        // }\\n\\n        // // This also deletes the contents at the last position of the array\\n        // delete ownedVoyagersIndex[tokenId];\\n        // delete ownedVoyagers[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n        \\n        // token array\\u7684max index \\n        uint256 lastTokenIndex = voyagers.length - 1;\\n        // \\u88ab\\u5220\\u9664token\\u6240\\u5728\\u7684array index\\n        uint256 tokenIndex = allVoyagersIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        \\n        // token array\\u4e2dmax index\\u7684token id\\n        Voyager storage lastVoyager = voyagers[lastTokenIndex];\\n\\n        // \\u7528\\u6700\\u540e\\u4e00\\u4e2aVoyager\\u66ff\\u6362\\u88ab\\u5220\\u9664\\u7684\\u90a3\\u4e2a\\n        voyagers[tokenIndex] = lastVoyager; // Move the last token to the slot of the to-delete token\\n        // \\u66f4\\u65b0\\u6700\\u540e\\u4e00\\u4e2atoken\\u7684index\\n        allVoyagersIndex[lastVoyager.id] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete allVoyagersIndex[tokenId];\\n        voyagers.pop();\\n    }\\n\\n    /// @dev Updates the level up fee as well as mint fee. Can only\\n    ///  be called by the Admin address.\\n    /// todo: \\u53ef\\u8bbe\\u7f6emaxLevel\\n    /// todo: \\u52a0maxLevel\\u9650\\u5236\\u6761\\u4ef6\\n    /// todo\\uff1a\\u52a0\\u63a5\\u53e3\\u83b7\\u53d6\\u94f8\\u9020\\u6216\\u5347\\u7ea7\\u7684\\u8d39\\u7528\\n    function setLevelUpFee(uint256 _toLevel, uint256 _dgt, uint256 _dsp) external onlyOwner {\\n        require(_toLevel <= maxLevel, \\\"Over max level\\\");\\n        require(levelUpFees.length >= _toLevel-1, \\\"Add fee from low level\\\");\\n        if (levelUpFees.length == _toLevel-1) {\\n            levelUpFees.push(FeeComponent(_dgt, _dsp));\\n        } else {\\n            levelUpFees[_toLevel-1] = FeeComponent(_dgt, _dsp);\\n        }\\n    }\\n\\n    function setCoolDown(uint256 _toLevel, uint32 _interval) external onlyOwner {\\n        require (_toLevel > 1 && _toLevel <= cooldowns.length.add(1), \\\"Over max level\\\"); \\n        cooldowns[_toLevel-2] = _interval;\\n    }\\n\\n    function initialLevelUpFees() internal {\\n        for (uint i=0; i < maxLevel; i++) {\\n            // 1-DGT,1-DSP,2-DGT,2-DSP...\\n            // DGT 100, 100, 100, 300, 1000, 1000\\n            levelUpFees.push(FeeComponent(levelUpDGT[i] * decimals, levelUpDSP[i] * decimals));\\n        }\\n    }\\n\\n    function getLevelUpDSP(uint level, uint holdingDays) public view returns (uint cost) {\\n        if (level == 0) {\\n            cost = levelUpDSPParam1[0];\\n        } else {\\n            if (holdingDays < 153) {\\n                cost = levelUpDSPParam1[level].sub(2 * holdingDays);\\n            } else {\\n                cost = levelUpDSPParam2[level];\\n            }\\n        }\\n\\n        cost = cost.mul(decimals);\\n    }\\n\\n    // todo\\uff1a\\u83b7\\u53d6\\u5347\\u7ea7\\u7684\\u8d39\\u7528\\n    function getLevelUpFee(uint256 level) public view returns (uint, uint) {\\n        return (levelUpFees[level].dgt, levelUpFees[level].dsp);\\n    }\\n\\n    function getMintFee() public view returns (uint, uint) {\\n        return (levelUpDGT[0] * decimals, getLevelUpDSP(0, 1));\\n    }\\n\\n    // todo: \\u5f53\\u524d\\u7b49\\u7ea7\\u5347\\u7ea7\\u7684\\u6d88\\u8017\\n    function getLevelUpFeeV2(uint tokenId) public view returns (uint, uint) {\\n        uint level = getLevel(tokenId);\\n        uint holdingDays = getCurLevelHoldingDays(tokenId);\\n        return (levelUpDGT[level] * decimals, getLevelUpDSP(level, holdingDays));\\n    }\\n\\n    function getLevel(uint tokenId) public view returns (uint){\\n        return voyagers[allVoyagersIndex[tokenId]].level;\\n    }\\n\\n    function getHoldingDays(uint tokenId) public view returns (uint){\\n        return block.timestamp.sub(voyagers[allVoyagersIndex[tokenId]].startHoldingTime)\\n                              .div(1 days);\\n    }\\n\\n    function getCurLevelHoldingDays(uint tokenId) public view returns (uint){\\n        return block.timestamp.sub(voyagers[allVoyagersIndex[tokenId]].levelStartHoldingTime)\\n                              .div(1 days);\\n    }\\n\\n    function setLevelStartHoldingTime(uint tokenId, uint _curTimeStamp) public onlyProxy {\\n        voyagers[allVoyagersIndex[tokenId]].levelStartHoldingTime = _curTimeStamp;\\n    }\\n\\n    function setLevel(uint tokenId, uint level) public onlyProxy {\\n        voyagers[allVoyagersIndex[tokenId]].level = uint8(level);\\n    }\\n\\n    /*     \\n    * Set URI for NFT with tokenId \\n    */\\n    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) public virtual onlyProxy {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[_tokenId] = _tokenURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        \\n        return _tokenURI;\\n    }\\n\\n    function setFee1TokenAddress(address _token1) public onlyProxy {\\n        dgtAddress = _token1;\\n    }\\n\\n    function setFee2TokenAddress(address _token2) public onlyProxy {\\n        dspAddress = _token2;\\n    }\\n}\\n\",\"keccak256\":\"0x93eb75c49ec35581c52a2d2f5504096350b15c96b20316310fd38df9e57cd70a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526003805461ffff60a01b191661010160a01b1790553480156200002657600080fd5b5060405162004d2438038062004d24833981016040819052620000499162000192565b6200005433620000e1565b60018055620000633362000131565b600c805461ff00191690556001600160a01b038116620000bb5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b604482015260640160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055620001c2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6910160405180910390a15050565b600060208284031215620001a4578081fd5b81516001600160a01b0381168114620001bb578182fd5b9392505050565b614b5280620001d26000396000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c80637e89621411610146578063c4d66de8116100c3578063ec51a17d11610087578063ec51a17d146104ca578063ec556889146104de578063f0185255146104f1578063f2fde38b146104f9578063f7b188a51461050c578063f851a4401461051457600080fd5b8063c4d66de81461048c578063ce0ded3a1461049f578063cf41b8a9146104a7578063d431b1ac146104af578063de3bcca9146104b757600080fd5b80639afd9d781161010a5780639afd9d7814610443578063aa30c4b71461044b578063bfe0b1251461045e578063c1cd333814610471578063c2e8dd4a1461047957600080fd5b80637e896214146103f15780637fb3a9a2146103f95780638da5cb5b1461040c578063942eb8c31461041d57806397107d6d1461043057600080fd5b80635c975abb116101d45780637161cdd8116101985780637161cdd81461038e57806372e0d7fe146103a157806375829def146103b457806378e97925146103c75780637a599e81146103de57600080fd5b80635c975abb1461033757806367e79832146103475780636ed333431461035a5780636ed5545914610373578063715018a61461038657600080fd5b806334f15bd71161021b57806334f15bd7146102e25780633b6764ae146102f55780633b74b039146102fd578063471a42941461031057806347acbe0f1461032457600080fd5b80630ce90ec214610258578063158ef93e1461026d5780631d8f5f181461028f5780632864efb6146102af57806329e566cb146102b7575b600080fd5b61026b610266366004614768565b610525565b005b600c5461027a9060ff1681565b60405190151581526020015b60405180910390f35b6102a261029d366004614768565b6114f2565b60405161028691906148d3565b61026b61159e565b6102ca6102c53660046145b5565b6116e7565b6040516001600160a01b039091168152602001610286565b61027a6102f036600461453d565b611782565b6102a261183a565b61026b61030b3660046144a4565b611847565b60035461027a90600160a01b900460ff1681565b61026b610332366004614582565b611d6e565b600c54610100900460ff1661027a565b6007546102ca906001600160a01b031681565b600c546102ca906201000090046001600160a01b031681565b6006546102ca906001600160a01b031681565b61026b611eb4565b61026b61039c36600461453d565b611eea565b61026b6103af366004614780565b61204d565b61026b6103c236600461446c565b612309565b6103d0600b5481565b604051908152602001610286565b61026b6103ec366004614582565b6123aa565b61026b612438565b61026b61040736600461453d565b6125fa565b6000546001600160a01b03166102ca565b61026b61042b36600461446c565b61268a565b61026b61043e36600461446c565b6127b3565b61026b612847565b6004546102ca906001600160a01b031681565b61026b61046c366004614695565b61288f565b61026b612a0b565b61026b61048736600461446c565b6131a9565b61026b61049a36600461446c565b6132fa565b6102a26133ac565b61026b6133b9565b61026b613585565b61026b6104c5366004614582565b6135ed565b60035461027a90600160a81b900460ff1681565b6003546102ca906001600160a01b031681565b61026b613d5d565b61026b61050736600461446c565b613da8565b61026b613e40565b6002546001600160a01b03166102ca565b600260015414156105515760405162461bcd60e51b815260040161054890614945565b60405180910390fd5b6002600155806105915760405162461bcd60e51b815260206004820152600b60248201526a2737ba1018103a37b5b2b760a91b6044820152606401610548565b60048054604051630e4d620560e01b815233928101929092526001600160a01b031690630e4d62059060240160206040518083038186803b1580156105d557600080fd5b505afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190614525565b1561064a5760405162461bcd60e51b815260206004820152600d60248201526c2ab73b30b634b2103a37b5b2b760991b6044820152606401610548565b600480546040805163cc06c35960e01b815290516001600160a01b039092169263cc06c359928282019260209290829003018186803b15801561068c57600080fd5b505afa1580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c49190614525565b600480546040516304252ae160e51b81529182018490526001600160a01b031690637e5ea2829082906384a55c209060240160206040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107469190614525565b6040518263ffffffff1660e01b815260040161076491815260200190565b60a06040518083038186803b15801561077c57600080fd5b505afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b491906146e5565b5160ff16106107f95760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e481b585e081b195d995b607a1b6044820152606401610548565b60048054604051630219207560e61b8152918201839052600091829182916001600160a01b03909116906386481d409060240160206040518083038186803b15801561084457600080fd5b505afa158015610858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087c9190614525565b60048054604051632c8ddbf960e21b81529293506001600160a01b03169163b2376fe4916108b09188910190815260200190565b604080518083038186803b1580156108c757600080fd5b505afa1580156108db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ff91906147a4565b60048054604080516371f3b44560e11b8152905194975092955086936001600160a01b039091169263e3e7688a9281810192602092909190829003018186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190614488565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156109c457600080fd5b505afa1580156109d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fc9190614525565b1015610a435760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103233ba103a37b5b2b760511b6044820152606401610548565b81600460009054906101000a90046001600160a01b03166001600160a01b03166338e514fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9257600080fd5b505afa158015610aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aca9190614488565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610b0b57600080fd5b505afa158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b439190614525565b1015610b8a5760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103239b8103a37b5b2b760511b6044820152606401610548565b610c27333085600460009054906101000a90046001600160a01b03166001600160a01b031663e3e7688a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bde57600080fd5b505afa158015610bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c169190614488565b6001600160a01b0316929190613ea2565b610c7b333084600460009054906101000a90046001600160a01b03166001600160a01b03166338e514fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bde57600080fd5b60048054604051630219207560e61b81529182018690526001600160a01b0316906380ea5a8390339083906386481d409060240160206040518083038186803b158015610cc757600080fd5b505afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff9190614525565b60048054604051630219207560e61b81529182018a90526001916001600160a01b0390911690636d3f450b90339083906386481d409060240160206040518083038186803b158015610d5057600080fd5b505afa158015610d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d889190614525565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610dcc57600080fd5b505afa158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e049190614525565b610e0e9190614a5d565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015610e5c57600080fd5b505af1158015610e70573d6000803e3d6000fd5b505060048054604051630219207560e61b81529182018890526001600160a01b031692506370a93b369150869083906386481d409060240160206040518083038186803b158015610ec057600080fd5b505afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef89190614525565b610f03906001614a45565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015610f4157600080fd5b505af1158015610f55573d6000803e3d6000fd5b505060048054604051638256c0a360e01b81529182018890524260248301526001600160a01b03169250638256c0a39150604401600060405180830381600087803b158015610fa357600080fd5b505af1158015610fb7573d6000803e3d6000fd5b505060048054604051630219207560e61b81529182018890526001600160a01b031692506380ea5a839150339083906386481d409060240160206040518083038186803b15801561100757600080fd5b505afa15801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f9190614525565b60048054604051630219207560e61b81529182018a90526001600160a01b031690636d3f450b90339083906386481d409060240160206040518083038186803b15801561108b57600080fd5b505afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190614525565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b15801561110757600080fd5b505afa15801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f9190614525565b61114a906001614a45565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b15801561119857600080fd5b505af11580156111ac573d6000803e3d6000fd5b505060048054604051639d47207160e01b81523392810192909252602482018890526001600160a01b03169250639d4720719150604401600060405180830381600087803b1580156111fd57600080fd5b505af1158015611211573d6000803e3d6000fd5b50506004805460405163984027a760e01b815233928101929092526001600160a01b0316925063984027a7915060240160206040518083038186803b15801561125957600080fd5b505afa15801561126d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112919190614525565b600480546040516304252ae160e51b81529182018790526001600160a01b031690637e5ea2829082906384a55c209060240160206040518083038186803b1580156112db57600080fd5b505afa1580156112ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113139190614525565b6040518263ffffffff1660e01b815260040161133191815260200190565b60a06040518083038186803b15801561134957600080fd5b505afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138191906146e5565b5160ff1611156114e857600480546040516304252ae160e51b81529182018690526001600160a01b031690630d2176ed9033908390637e5ea2829082906384a55c209060240160206040518083038186803b1580156113df57600080fd5b505afa1580156113f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114179190614525565b6040518263ffffffff1660e01b815260040161143591815260200190565b60a06040518083038186803b15801561144d57600080fd5b505afa158015611461573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148591906146e5565b5160405160e084901b6001600160e01b03191681526001600160a01b03909216600483015260ff166024820152604401600060405180830381600087803b1580156114cf57600080fd5b505af11580156114e3573d6000803e3d6000fd5b505050505b5050600180555050565b6008818154811061150257600080fd5b90600052602060002001600091509050805461151d90614aa0565b80601f016020809104026020016040519081016040528092919081815260200182805461154990614aa0565b80156115965780601f1061156b57610100808354040283529160200191611596565b820191906000526020600020905b81548152906001019060200180831161157957829003601f168201915b505050505081565b600354600160a01b900460ff166115c75760405162461bcd60e51b8152600401610548906149c2565b600c54610100900460ff16156115ef5760405162461bcd60e51b8152600401610548906148e6565b600260015414156116125760405162461bcd60e51b815260040161054890614945565b600260015560065460408051600481526024810182526020810180516001600160e01b0316631839a66760e31b17905290516000926001600160a01b03169161165a916147f3565b600060405180830381855af49150503d8060008114611695576040519150601f19603f3d011682016040523d82523d6000602084013e61169a565b606091505b50509050806116e05760405162461bcd60e51b81526020600482015260126024820152711b5a5b9d159bde5859d95c8811985a5b195960721b6044820152606401610548565b5060018055565b600080546001600160a01b031633146117125760405162461bcd60e51b815260040161054890614910565b8161174f5760405162461bcd60e51b815260206004820152600d60248201526c22b6b83a3c902b32b939b4b7b760991b6044820152606401610548565b6005838360405161176192919061480f565b908152604051908190036020019020546001600160a01b0316905092915050565b6040516319045a2560e01b815260009073B1A13497D08d8764900546B5989E654A5c71c2d1906319045a25906117be90869086906004016148ba565b60206040518083038186803b1580156117d657600080fd5b505af41580156117ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180e9190614488565b6001600160a01b03166118296002546001600160a01b031690565b6001600160a01b0316149392505050565b6009805461151d90614aa0565b6002546001600160a01b031633146118715760405162461bcd60e51b81526004016105489061497c565b60048054604051630e4d620560e01b81526001600160a01b038781169382019390935260009290911690630e4d62059060240160206040518083038186803b1580156118bc57600080fd5b505afa1580156118d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f49190614525565b600480546040516304252ae160e51b81529182018390529192506000916001600160a01b031690637e5ea2829082906384a55c209060240160206040518083038186803b15801561194457600080fd5b505afa158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197c9190614525565b6040518263ffffffff1660e01b815260040161199a91815260200190565b60a06040518083038186803b1580156119b257600080fd5b505afa1580156119c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ea91906146e5565b5160ff16905081611a2d5760405162461bcd60e51b815260206004820152600d60248201526c2ab73b30b634b2103a37b5b2b760991b6044820152606401610548565b600480546040516331a9108f60e11b81529182018490526001600160a01b0388811692911690636352211e9060240160206040518083038186803b158015611a7457600080fd5b505afa158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aac9190614488565b6001600160a01b031614611aee5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610548565b818514611b325760405162461bcd60e51b815260206004820152601260248201527110dbdb9cda5cdd195b9d081d1bdad95b925160721b6044820152606401610548565b838114611b745760405162461bcd60e51b815260206004820152601060248201526f10dbdb9cda5cdd195b9d081b195d995b60821b6044820152606401610548565b60048054604051637538bcfd60e01b8152918201849052602482018390526001600160a01b031690637538bcfd9060440160206040518083038186803b158015611bbd57600080fd5b505afa158015611bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf59190614505565b15611c325760405162461bcd60e51b815260206004820152600d60248201526c536574206f766572206f6e636560981b6044820152606401610548565b60048054604051622a710d60e31b81526001600160a01b0390911691630153886891611c629186918891016148ba565b600060405180830381600087803b158015611c7c57600080fd5b505af1158015611c90573d6000803e3d6000fd5b505060048054604051639d47207160e01b81526001600160a01b038b8116938201939093526000602482015291169250639d4720719150604401600060405180830381600087803b158015611ce457600080fd5b505af1158015611cf8573d6000803e3d6000fd5b50506004805460405163682fffaf60e01b815291820186905260248201859052600160448301526001600160a01b0316925063682fffaf9150606401600060405180830381600087803b158015611d4e57600080fd5b505af1158015611d62573d6000803e3d6000fd5b50505050505050505050565b60405163b613249d60e01b81523360048201528190611dfd9073B1A13497D08d8764900546B5989E654A5c71c2d19063b613249d906024015b60206040518083038186803b158015611dbf57600080fd5b505af4158015611dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df79190614525565b82611782565b611e385760405162461bcd60e51b815260206004820152600c60248201526b139bdd081d995c9a599a595960a21b6044820152606401610548565b600354600160a01b900460ff16611e615760405162461bcd60e51b8152600401610548906149c2565b600c54610100900460ff1615611e895760405162461bcd60e51b8152600401610548906148e6565b60026001541415611eac5760405162461bcd60e51b815260040161054890614945565b505060018055565b6000546001600160a01b03163314611ede5760405162461bcd60e51b815260040161054890614910565b611ee86000613f02565b565b6002546001600160a01b03163314611f145760405162461bcd60e51b81526004016105489061497c565b600c54610100900460ff1615611f3c5760405162461bcd60e51b8152600401610548906148e6565b6006546040516000916001600160a01b0316907f7fb3a9a28264147fdfcb557d570d2771a0c4df4cc7f7f8b4305eede3bba91ab090611f8190869086906024016148ba565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611fbf91906147f3565b600060405180830381855af49150503d8060008114611ffa576040519150601f19603f3d011682016040523d82523d6000602084013e611fff565b606091505b50509050806120485760405162461bcd60e51b815260206004820152601560248201527418da185b99d9551bdad95b9554924811985a5b1959605a1b6044820152606401610548565b505050565b6000546001600160a01b031633146120775760405162461bcd60e51b815260040161054890614910565b600c54610100900460ff161561209f5760405162461bcd60e51b8152600401610548906148e6565b600260015414156120c25760405162461bcd60e51b815260040161054890614945565b600260015560048054604080516371f3b44560e11b8152905185936001600160a01b039093169263e3e7688a92808201926020929091829003018186803b15801561210c57600080fd5b505afa158015612120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121449190614488565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561218557600080fd5b505afa158015612199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bd9190614525565b10156122025760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610548565b60048054604080516371f3b44560e11b815290516001600160a01b039092169263e3e7688a928282019260209290829003018186803b15801561224457600080fd5b505afa158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c9190614488565b60405163a9059cbb60e01b81526001600160a01b03838116600483015260248201859052919091169063a9059cbb90604401602060405180830381600087803b1580156122c857600080fd5b505af11580156122dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123009190614505565b50506001805550565b6000546001600160a01b031633146123335760405162461bcd60e51b815260040161054890614910565b6001600160a01b03811661239e5760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642041646d696e3a206e65772061646d696e206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401610548565b6123a781613f52565b50565b6002546001600160a01b031633146123d45760405162461bcd60e51b81526004016105489061497c565b6004805460405163a1b3d1ff60e01b81526001600160a01b039091169163a1b3d1ff91612403918591016148d3565b600060405180830381600087803b15801561241d57600080fd5b505af1158015612431573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146124625760405162461bcd60e51b815260040161054890614910565b6007546001600160a01b03166124aa5760405162461bcd60e51b815260206004820152600d60248201526c57726f6e67204164647265737360981b6044820152606401610548565b600c5460ff16156124fe57600b546124c59062015180613fb3565b42116124fe5760405162461bcd60e51b8152602060048201526008602482015267496e2044656c617960c01b6044820152606401610548565b60076005600a604051612511919061481f565b908152604051908190036020019020905481546001600160a01b0319166001600160a01b03909116179055600a80546009919061254d90614aa0565b612558929190614307565b50600754600680546001600160a01b0319166001600160a01b0390921691909117905560088054600181018255600091909152600a80547ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3909201916125bd90614aa0565b6125c8929190614307565b506040805160208101918290526000908190526125e791600a91614392565b50600780546001600160a01b0319169055565b6002546001600160a01b031633146126245760405162461bcd60e51b81526004016105489061497c565b60048054604051622a710d60e31b81526001600160a01b03909116916301538868916126549186918691016148ba565b600060405180830381600087803b15801561266e57600080fd5b505af1158015612682573d6000803e3d6000fd5b505050505050565b6002546001600160a01b031633146126b45760405162461bcd60e51b81526004016105489061497c565b600c54610100900460ff16156126dc5760405162461bcd60e51b8152600401610548906148e6565b806001600160a01b0381166127225760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b6044820152606401610548565b600260015414156127455760405162461bcd60e51b815260040161054890614945565b60026001556004805460405163942eb8c360e01b81526001600160a01b038581169382019390935291169063942eb8c390602401600060405180830381600087803b15801561279357600080fd5b505af11580156127a7573d6000803e3d6000fd5b50506001805550505050565b6000546001600160a01b031633146127dd5760405162461bcd60e51b815260040161054890614910565b6001600160a01b0381166128255760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b6044820152606401610548565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146128715760405162461bcd60e51b815260040161054890614910565b6040805160208101918290526000908190526125e791600a91614392565b6000546001600160a01b031633146128b95760405162461bcd60e51b815260040161054890614910565b6001600160a01b0381166128ff5760405162461bcd60e51b815260206004820152600d60248201526c57726f6e67204164647265737360981b6044820152606401610548565b60008251116129405760405162461bcd60e51b815260206004820152600d60248201526c22b6b83a3c902b32b939b4b7b760991b6044820152606401610548565b8160405160200161295191906147f3565b604051602081830303815290604052805190602001206009604051602001612979919061481f565b6040516020818303038152906040528051906020012014156129d05760405162461bcd60e51b815260206004820152601060248201526f22bc34b9ba34b733902b32b939b4b7b760811b6044820152606401610548565b81516129e390600a906020850190614392565b50600780546001600160a01b0319166001600160a01b03929092169190911790555042600b55565b60048054604051630e4d620560e01b815233928101929092526001600160a01b031690630e4d62059060240160206040518083038186803b158015612a4f57600080fd5b505afa158015612a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a879190614525565b15612ac95760405162461bcd60e51b815260206004820152601260248201527114d95d081d1bdad95b95549248199a5c9cdd60721b6044820152606401610548565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316630ca1c5c96040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1957600080fd5b505afa158015612b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b519190614525565b9050600080600460009054906101000a90046001600160a01b03166001600160a01b0316637a5caab36040518163ffffffff1660e01b8152600401604080518083038186803b158015612ba357600080fd5b505afa158015612bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdb91906147a4565b9150915081600460009054906101000a90046001600160a01b03166001600160a01b031663e3e7688a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c2e57600080fd5b505afa158015612c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c669190614488565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015612ca757600080fd5b505afa158015612cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdf9190614525565b1015612d265760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103233ba103a37b5b2b760511b6044820152606401610548565b80600460009054906101000a90046001600160a01b03166001600160a01b03166338e514fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d7557600080fd5b505afa158015612d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dad9190614488565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015612dee57600080fd5b505afa158015612e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e269190614525565b1015612e6d5760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103239b8103a37b5b2b760511b6044820152606401610548565b612ec1333084600460009054906101000a90046001600160a01b03166001600160a01b031663e3e7688a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bde57600080fd5b612f15333083600460009054906101000a90046001600160a01b03166001600160a01b03166338e514fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bde57600080fd5b60048054604051634541a7fb60e11b81523392810192909252602482018590526001600160a01b031690638a834ff690604401600060405180830381600087803b158015612f6257600080fd5b505af1158015612f76573d6000803e3d6000fd5b50505050826000141561305f57600480546040805163b9e1bbf960e01b815290516001600160a01b03909216926301538868928792859263b9e1bbf9928282019260009290829003018186803b158015612fcf57600080fd5b505afa158015612fe3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261300b9190810190614622565b6040518363ffffffff1660e01b81526004016130289291906148ba565b600060405180830381600087803b15801561304257600080fd5b505af1158015613056573d6000803e3d6000fd5b505050506130c5565b60048054604051639d47207160e01b81523392810192909252602482018590526001600160a01b031690639d47207190604401600060405180830381600087803b1580156130ac57600080fd5b505af11580156130c0573d6000803e3d6000fd5b505050505b6004805460408051630ca1c5c960e01b815290516001600160a01b03909216926316dbf90692613154926001928692630ca1c5c9928083019260209291829003018186803b15801561311657600080fd5b505afa15801561312a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314e9190614525565b90613fb3565b6040518263ffffffff1660e01b815260040161317291815260200190565b600060405180830381600087803b15801561318c57600080fd5b505af11580156131a0573d6000803e3d6000fd5b50505050505050565b6002546001600160a01b031633146131d35760405162461bcd60e51b81526004016105489061497c565b600c54610100900460ff16156131fb5760405162461bcd60e51b8152600401610548906148e6565b806001600160a01b0381166132415760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b6044820152606401610548565b600260015414156132645760405162461bcd60e51b815260040161054890614945565b6002600155600480546040516361746ea560e11b81526001600160a01b038581169382019390935291169063c2e8dd4a90602401600060405180830381600087803b1580156132b257600080fd5b505af11580156132c6573d6000803e3d6000fd5b5050600c80546001600160a01b03909516620100000262010000600160b01b03199095169490941790935550506001805550565b6000546001600160a01b031633146133245760405162461bcd60e51b815260040161054890614910565b600c5460ff161561336d5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e48125b9a5d1a585b1a5e9959606a1b6044820152606401610548565b61339460405180604001604052806005815260200164302e302e3160d81b8152508261288f565b61339c612438565b50600c805460ff19166001179055565b600a805461151d90614aa0565b6000546001600160a01b031633146133e35760405162461bcd60e51b815260040161054890614910565b600c54610100900460ff161561340b5760405162461bcd60e51b8152600401610548906148e6565b6002600154141561342e5760405162461bcd60e51b815260040161054890614945565b6002600155600c546004805460408051631c728a7f60e11b815290516001600160a01b03620100009095048516946342966c68949316926338e514fe92808201926020929091829003018186803b15801561348857600080fd5b505afa15801561349c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c09190614488565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561350157600080fd5b505afa158015613515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135399190614525565b6040518263ffffffff1660e01b815260040161355791815260200190565b600060405180830381600087803b15801561357157600080fd5b505af11580156114e8573d6000803e3d6000fd5b6000546001600160a01b031633146135af5760405162461bcd60e51b815260040161054890614910565b6135b7613fc6565b6040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020015b60405180910390a1565b60405163b613249d60e01b8152336004820152819061362a9073B1A13497D08d8764900546B5989E654A5c71c2d19063b613249d90602401611da7565b6136655760405162461bcd60e51b815260206004820152600c60248201526b139bdd081d995c9a599a595960a21b6044820152606401610548565b600354600160a01b900460ff1661368e5760405162461bcd60e51b8152600401610548906149c2565b600c54610100900460ff16156136b65760405162461bcd60e51b8152600401610548906148e6565b600260015414156136d95760405162461bcd60e51b815260040161054890614945565b600260015560048054604051630e4d620560e01b815233928101929092526001600160a01b031690630e4d62059060240160206040518083038186803b15801561372257600080fd5b505afa158015613736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061375a9190614525565b1561379c5760405162461bcd60e51b815260206004820152601260248201527114d95d081d1bdad95b95549248199a5c9cdd60721b6044820152606401610548565b60048054604051630554924960e51b815233928101929092526001600160a01b03169063aa9249209060240160206040518083038186803b1580156137e057600080fd5b505afa1580156137f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138189190614505565b1561384f5760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b6044820152606401610548565b60048054604080516310c1331760e31b815290516001600160a01b039092169263860998b8928282019260209290829003018186803b15801561389157600080fd5b505afa1580156138a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c99190614525565b60048054604080516325ebda5b60e01b8152905161390f936001936001600160a01b0316926325ebda5b9281830192602092829003018186803b15801561311657600080fd5b111561396e5760405162461bcd60e51b815260206004820152602860248201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f6620604482015267566f79616765727360c01b6064820152608401610548565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316630ca1c5c96040518163ffffffff1660e01b815260040160206040518083038186803b1580156139be57600080fd5b505afa1580156139d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f69190614525565b60048054604051634541a7fb60e11b81523392810192909252602482018390529192506001600160a01b0390911690638a834ff690604401600060405180830381600087803b158015613a4857600080fd5b505af1158015613a5c573d6000803e3d6000fd5b505050508060001415613b4557600480546040805163b9e1bbf960e01b815290516001600160a01b03909216926301538868928592859263b9e1bbf9928282019260009290829003018186803b158015613ab557600080fd5b505afa158015613ac9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613af19190810190614622565b6040518363ffffffff1660e01b8152600401613b0e9291906148ba565b600060405180830381600087803b158015613b2857600080fd5b505af1158015613b3c573d6000803e3d6000fd5b50505050613bab565b60048054604051639d47207160e01b81523392810192909252602482018390526001600160a01b031690639d47207190604401600060405180830381600087803b158015613b9257600080fd5b505af1158015613ba6573d6000803e3d6000fd5b505050505b6004805460408051630ca1c5c960e01b815290516001600160a01b03909216926316dbf90692613bfc926001928692630ca1c5c9928083019260209291829003018186803b15801561311657600080fd5b6040518263ffffffff1660e01b8152600401613c1a91815260200190565b600060405180830381600087803b158015613c3457600080fd5b505af1158015613c48573d6000803e3d6000fd5b50506004805460405163ca0a9e3d60e01b81523392810192909252600160248301526001600160a01b0316925063ca0a9e3d9150604401600060405180830381600087803b158015613c9957600080fd5b505af1158015613cad573d6000803e3d6000fd5b505060048054604080516325ebda5b60e01b815290516001600160a01b03909216945063440372f89350613d049260019286926325ebda5b9281810192602092909190829003018186803b15801561311657600080fd5b6040518263ffffffff1660e01b8152600401613d2291815260200190565b600060405180830381600087803b158015613d3c57600080fd5b505af1158015613d50573d6000803e3d6000fd5b5050600180555050505050565b6002546001600160a01b03163314613d875760405162461bcd60e51b81526004016105489061497c565b6003805460ff60a01b198116600160a01b9182900460ff1615909102179055565b6000546001600160a01b03163314613dd25760405162461bcd60e51b815260040161054890614910565b6001600160a01b038116613e375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610548565b6123a781613f02565b6000546001600160a01b03163314613e6a5760405162461bcd60e51b815260040161054890614910565b613e7261403d565b6040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020016135e3565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052613efc9085906140bd565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6910160405180910390a15050565b6000613fbf8284614a45565b9392505050565b600c54610100900460ff1615613fee5760405162461bcd60e51b8152600401610548906148e6565b600c805461ff0019166101001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586140253390565b6040516001600160a01b0390911681526020016135e3565b600c54610100900460ff1661408b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610548565b600c805461ff00191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33614025565b6000614112826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661418f9092919063ffffffff16565b80519091501561204857808060200190518101906141309190614505565b6120485760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610548565b606061419e84846000856141a6565b949350505050565b6060824710156142075760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610548565b843b6142555760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610548565b600080866001600160a01b0316858760405161427191906147f3565b60006040518083038185875af1925050503d80600081146142ae576040519150601f19603f3d011682016040523d82523d6000602084013e6142b3565b606091505b50915091506142c38282866142ce565b979650505050505050565b606083156142dd575081613fbf565b8251156142ed5782518084602001fd5b8160405162461bcd60e51b815260040161054891906148d3565b82805461431390614aa0565b90600052602060002090601f0160209004810192826143355760008555614382565b82601f106143465780548555614382565b8280016001018555821561438257600052602060002091601f016020900482015b82811115614382578254825591600101919060010190614367565b5061438e929150614406565b5090565b82805461439e90614aa0565b90600052602060002090601f0160209004810192826143c05760008555614382565b82601f106143d957805160ff1916838001178555614382565b82800160010185558215614382579182015b828111156143825782518255916020019190600101906143eb565b5b8082111561438e5760008155600101614407565b600082601f83011261442b578081fd5b813561443e61443982614a1d565b6149ec565b818152846020838601011115614452578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121561447d578081fd5b8135613fbf81614b07565b600060208284031215614499578081fd5b8151613fbf81614b07565b600080600080608085870312156144b9578283fd5b84356144c481614b07565b93506020850135925060408501359150606085013567ffffffffffffffff8111156144ed578182fd5b6144f98782880161441b565b91505092959194509250565b600060208284031215614516578081fd5b81518015158114613fbf578182fd5b600060208284031215614536578081fd5b5051919050565b6000806040838503121561454f578182fd5b82359150602083013567ffffffffffffffff81111561456c578182fd5b6145788582860161441b565b9150509250929050565b600060208284031215614593578081fd5b813567ffffffffffffffff8111156145a9578182fd5b61419e8482850161441b565b600080602083850312156145c7578182fd5b823567ffffffffffffffff808211156145de578384fd5b818501915085601f8301126145f1578384fd5b8135818111156145ff578485fd5b866020828501011115614610578485fd5b60209290920196919550909350505050565b600060208284031215614633578081fd5b815167ffffffffffffffff811115614649578182fd5b8201601f81018413614659578182fd5b805161466761443982614a1d565b81815285602083850101111561467b578384fd5b61468c826020830160208601614a74565b95945050505050565b600080604083850312156146a7578182fd5b823567ffffffffffffffff8111156146bd578283fd5b6146c98582860161441b565b92505060208301356146da81614b07565b809150509250929050565b600060a082840312156146f6578081fd5b60405160a0810181811067ffffffffffffffff8211171561471957614719614af1565b604052825160ff8116811461472c578283fd5b815260208381015190820152604083015161474681614b07565b6040820152606083810151908201526080928301519281019290925250919050565b600060208284031215614779578081fd5b5035919050565b60008060408385031215614792578182fd5b8235915060208301356146da81614b07565b600080604083850312156147b6578182fd5b505080516020909101519092909150565b600081518084526147df816020860160208601614a74565b601f01601f19169290920160200192915050565b60008251614805818460208701614a74565b9190910192915050565b8183823760009101908152919050565b600080835482600182811c91508083168061483b57607f831692505b602080841082141561485b57634e487b7160e01b87526022600452602487fd5b81801561486f5760018114614880576148ac565b60ff198616895284890196506148ac565b60008a815260209020885b868110156148a45781548b82015290850190830161488b565b505084890196505b509498975050505050505050565b82815260406020820152600061419e60408301846147c7565b602081526000613fbf60208301846147c7565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526026908201527f496e76616c69642041646d696e3a2063616c6c6572206973206e6f74207468656040820152651030b236b4b760d11b606082015260800190565b60208082526010908201526f155b9858dd1a5d99481d1bc81b5a5b9d60821b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715614a1557614a15614af1565b604052919050565b600067ffffffffffffffff821115614a3757614a37614af1565b50601f01601f191660200190565b60008219821115614a5857614a58614adb565b500190565b600082821015614a6f57614a6f614adb565b500390565b60005b83811015614a8f578181015183820152602001614a77565b83811115613efc5750506000910152565b600181811c90821680614ab457607f821691505b60208210811415614ad557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146123a757600080fdfea2646970667358221220e69b758b6812e0fc34151f2286464350a705d4e82c142079d59a59c3c222b04064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c80637e89621411610146578063c4d66de8116100c3578063ec51a17d11610087578063ec51a17d146104ca578063ec556889146104de578063f0185255146104f1578063f2fde38b146104f9578063f7b188a51461050c578063f851a4401461051457600080fd5b8063c4d66de81461048c578063ce0ded3a1461049f578063cf41b8a9146104a7578063d431b1ac146104af578063de3bcca9146104b757600080fd5b80639afd9d781161010a5780639afd9d7814610443578063aa30c4b71461044b578063bfe0b1251461045e578063c1cd333814610471578063c2e8dd4a1461047957600080fd5b80637e896214146103f15780637fb3a9a2146103f95780638da5cb5b1461040c578063942eb8c31461041d57806397107d6d1461043057600080fd5b80635c975abb116101d45780637161cdd8116101985780637161cdd81461038e57806372e0d7fe146103a157806375829def146103b457806378e97925146103c75780637a599e81146103de57600080fd5b80635c975abb1461033757806367e79832146103475780636ed333431461035a5780636ed5545914610373578063715018a61461038657600080fd5b806334f15bd71161021b57806334f15bd7146102e25780633b6764ae146102f55780633b74b039146102fd578063471a42941461031057806347acbe0f1461032457600080fd5b80630ce90ec214610258578063158ef93e1461026d5780631d8f5f181461028f5780632864efb6146102af57806329e566cb146102b7575b600080fd5b61026b610266366004614768565b610525565b005b600c5461027a9060ff1681565b60405190151581526020015b60405180910390f35b6102a261029d366004614768565b6114f2565b60405161028691906148d3565b61026b61159e565b6102ca6102c53660046145b5565b6116e7565b6040516001600160a01b039091168152602001610286565b61027a6102f036600461453d565b611782565b6102a261183a565b61026b61030b3660046144a4565b611847565b60035461027a90600160a01b900460ff1681565b61026b610332366004614582565b611d6e565b600c54610100900460ff1661027a565b6007546102ca906001600160a01b031681565b600c546102ca906201000090046001600160a01b031681565b6006546102ca906001600160a01b031681565b61026b611eb4565b61026b61039c36600461453d565b611eea565b61026b6103af366004614780565b61204d565b61026b6103c236600461446c565b612309565b6103d0600b5481565b604051908152602001610286565b61026b6103ec366004614582565b6123aa565b61026b612438565b61026b61040736600461453d565b6125fa565b6000546001600160a01b03166102ca565b61026b61042b36600461446c565b61268a565b61026b61043e36600461446c565b6127b3565b61026b612847565b6004546102ca906001600160a01b031681565b61026b61046c366004614695565b61288f565b61026b612a0b565b61026b61048736600461446c565b6131a9565b61026b61049a36600461446c565b6132fa565b6102a26133ac565b61026b6133b9565b61026b613585565b61026b6104c5366004614582565b6135ed565b60035461027a90600160a81b900460ff1681565b6003546102ca906001600160a01b031681565b61026b613d5d565b61026b61050736600461446c565b613da8565b61026b613e40565b6002546001600160a01b03166102ca565b600260015414156105515760405162461bcd60e51b815260040161054890614945565b60405180910390fd5b6002600155806105915760405162461bcd60e51b815260206004820152600b60248201526a2737ba1018103a37b5b2b760a91b6044820152606401610548565b60048054604051630e4d620560e01b815233928101929092526001600160a01b031690630e4d62059060240160206040518083038186803b1580156105d557600080fd5b505afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190614525565b1561064a5760405162461bcd60e51b815260206004820152600d60248201526c2ab73b30b634b2103a37b5b2b760991b6044820152606401610548565b600480546040805163cc06c35960e01b815290516001600160a01b039092169263cc06c359928282019260209290829003018186803b15801561068c57600080fd5b505afa1580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c49190614525565b600480546040516304252ae160e51b81529182018490526001600160a01b031690637e5ea2829082906384a55c209060240160206040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107469190614525565b6040518263ffffffff1660e01b815260040161076491815260200190565b60a06040518083038186803b15801561077c57600080fd5b505afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b491906146e5565b5160ff16106107f95760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e481b585e081b195d995b607a1b6044820152606401610548565b60048054604051630219207560e61b8152918201839052600091829182916001600160a01b03909116906386481d409060240160206040518083038186803b15801561084457600080fd5b505afa158015610858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087c9190614525565b60048054604051632c8ddbf960e21b81529293506001600160a01b03169163b2376fe4916108b09188910190815260200190565b604080518083038186803b1580156108c757600080fd5b505afa1580156108db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ff91906147a4565b60048054604080516371f3b44560e11b8152905194975092955086936001600160a01b039091169263e3e7688a9281810192602092909190829003018186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190614488565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156109c457600080fd5b505afa1580156109d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fc9190614525565b1015610a435760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103233ba103a37b5b2b760511b6044820152606401610548565b81600460009054906101000a90046001600160a01b03166001600160a01b03166338e514fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9257600080fd5b505afa158015610aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aca9190614488565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610b0b57600080fd5b505afa158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b439190614525565b1015610b8a5760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103239b8103a37b5b2b760511b6044820152606401610548565b610c27333085600460009054906101000a90046001600160a01b03166001600160a01b031663e3e7688a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bde57600080fd5b505afa158015610bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c169190614488565b6001600160a01b0316929190613ea2565b610c7b333084600460009054906101000a90046001600160a01b03166001600160a01b03166338e514fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bde57600080fd5b60048054604051630219207560e61b81529182018690526001600160a01b0316906380ea5a8390339083906386481d409060240160206040518083038186803b158015610cc757600080fd5b505afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff9190614525565b60048054604051630219207560e61b81529182018a90526001916001600160a01b0390911690636d3f450b90339083906386481d409060240160206040518083038186803b158015610d5057600080fd5b505afa158015610d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d889190614525565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610dcc57600080fd5b505afa158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e049190614525565b610e0e9190614a5d565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015610e5c57600080fd5b505af1158015610e70573d6000803e3d6000fd5b505060048054604051630219207560e61b81529182018890526001600160a01b031692506370a93b369150869083906386481d409060240160206040518083038186803b158015610ec057600080fd5b505afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef89190614525565b610f03906001614a45565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015610f4157600080fd5b505af1158015610f55573d6000803e3d6000fd5b505060048054604051638256c0a360e01b81529182018890524260248301526001600160a01b03169250638256c0a39150604401600060405180830381600087803b158015610fa357600080fd5b505af1158015610fb7573d6000803e3d6000fd5b505060048054604051630219207560e61b81529182018890526001600160a01b031692506380ea5a839150339083906386481d409060240160206040518083038186803b15801561100757600080fd5b505afa15801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f9190614525565b60048054604051630219207560e61b81529182018a90526001600160a01b031690636d3f450b90339083906386481d409060240160206040518083038186803b15801561108b57600080fd5b505afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190614525565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b15801561110757600080fd5b505afa15801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f9190614525565b61114a906001614a45565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b15801561119857600080fd5b505af11580156111ac573d6000803e3d6000fd5b505060048054604051639d47207160e01b81523392810192909252602482018890526001600160a01b03169250639d4720719150604401600060405180830381600087803b1580156111fd57600080fd5b505af1158015611211573d6000803e3d6000fd5b50506004805460405163984027a760e01b815233928101929092526001600160a01b0316925063984027a7915060240160206040518083038186803b15801561125957600080fd5b505afa15801561126d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112919190614525565b600480546040516304252ae160e51b81529182018790526001600160a01b031690637e5ea2829082906384a55c209060240160206040518083038186803b1580156112db57600080fd5b505afa1580156112ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113139190614525565b6040518263ffffffff1660e01b815260040161133191815260200190565b60a06040518083038186803b15801561134957600080fd5b505afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138191906146e5565b5160ff1611156114e857600480546040516304252ae160e51b81529182018690526001600160a01b031690630d2176ed9033908390637e5ea2829082906384a55c209060240160206040518083038186803b1580156113df57600080fd5b505afa1580156113f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114179190614525565b6040518263ffffffff1660e01b815260040161143591815260200190565b60a06040518083038186803b15801561144d57600080fd5b505afa158015611461573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148591906146e5565b5160405160e084901b6001600160e01b03191681526001600160a01b03909216600483015260ff166024820152604401600060405180830381600087803b1580156114cf57600080fd5b505af11580156114e3573d6000803e3d6000fd5b505050505b5050600180555050565b6008818154811061150257600080fd5b90600052602060002001600091509050805461151d90614aa0565b80601f016020809104026020016040519081016040528092919081815260200182805461154990614aa0565b80156115965780601f1061156b57610100808354040283529160200191611596565b820191906000526020600020905b81548152906001019060200180831161157957829003601f168201915b505050505081565b600354600160a01b900460ff166115c75760405162461bcd60e51b8152600401610548906149c2565b600c54610100900460ff16156115ef5760405162461bcd60e51b8152600401610548906148e6565b600260015414156116125760405162461bcd60e51b815260040161054890614945565b600260015560065460408051600481526024810182526020810180516001600160e01b0316631839a66760e31b17905290516000926001600160a01b03169161165a916147f3565b600060405180830381855af49150503d8060008114611695576040519150601f19603f3d011682016040523d82523d6000602084013e61169a565b606091505b50509050806116e05760405162461bcd60e51b81526020600482015260126024820152711b5a5b9d159bde5859d95c8811985a5b195960721b6044820152606401610548565b5060018055565b600080546001600160a01b031633146117125760405162461bcd60e51b815260040161054890614910565b8161174f5760405162461bcd60e51b815260206004820152600d60248201526c22b6b83a3c902b32b939b4b7b760991b6044820152606401610548565b6005838360405161176192919061480f565b908152604051908190036020019020546001600160a01b0316905092915050565b6040516319045a2560e01b815260009073__$5375cb35093987ecf92e89395ecd702213$__906319045a25906117be90869086906004016148ba565b60206040518083038186803b1580156117d657600080fd5b505af41580156117ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180e9190614488565b6001600160a01b03166118296002546001600160a01b031690565b6001600160a01b0316149392505050565b6009805461151d90614aa0565b6002546001600160a01b031633146118715760405162461bcd60e51b81526004016105489061497c565b60048054604051630e4d620560e01b81526001600160a01b038781169382019390935260009290911690630e4d62059060240160206040518083038186803b1580156118bc57600080fd5b505afa1580156118d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f49190614525565b600480546040516304252ae160e51b81529182018390529192506000916001600160a01b031690637e5ea2829082906384a55c209060240160206040518083038186803b15801561194457600080fd5b505afa158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197c9190614525565b6040518263ffffffff1660e01b815260040161199a91815260200190565b60a06040518083038186803b1580156119b257600080fd5b505afa1580156119c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ea91906146e5565b5160ff16905081611a2d5760405162461bcd60e51b815260206004820152600d60248201526c2ab73b30b634b2103a37b5b2b760991b6044820152606401610548565b600480546040516331a9108f60e11b81529182018490526001600160a01b0388811692911690636352211e9060240160206040518083038186803b158015611a7457600080fd5b505afa158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aac9190614488565b6001600160a01b031614611aee5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610548565b818514611b325760405162461bcd60e51b815260206004820152601260248201527110dbdb9cda5cdd195b9d081d1bdad95b925160721b6044820152606401610548565b838114611b745760405162461bcd60e51b815260206004820152601060248201526f10dbdb9cda5cdd195b9d081b195d995b60821b6044820152606401610548565b60048054604051637538bcfd60e01b8152918201849052602482018390526001600160a01b031690637538bcfd9060440160206040518083038186803b158015611bbd57600080fd5b505afa158015611bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf59190614505565b15611c325760405162461bcd60e51b815260206004820152600d60248201526c536574206f766572206f6e636560981b6044820152606401610548565b60048054604051622a710d60e31b81526001600160a01b0390911691630153886891611c629186918891016148ba565b600060405180830381600087803b158015611c7c57600080fd5b505af1158015611c90573d6000803e3d6000fd5b505060048054604051639d47207160e01b81526001600160a01b038b8116938201939093526000602482015291169250639d4720719150604401600060405180830381600087803b158015611ce457600080fd5b505af1158015611cf8573d6000803e3d6000fd5b50506004805460405163682fffaf60e01b815291820186905260248201859052600160448301526001600160a01b0316925063682fffaf9150606401600060405180830381600087803b158015611d4e57600080fd5b505af1158015611d62573d6000803e3d6000fd5b50505050505050505050565b60405163b613249d60e01b81523360048201528190611dfd9073__$5375cb35093987ecf92e89395ecd702213$__9063b613249d906024015b60206040518083038186803b158015611dbf57600080fd5b505af4158015611dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df79190614525565b82611782565b611e385760405162461bcd60e51b815260206004820152600c60248201526b139bdd081d995c9a599a595960a21b6044820152606401610548565b600354600160a01b900460ff16611e615760405162461bcd60e51b8152600401610548906149c2565b600c54610100900460ff1615611e895760405162461bcd60e51b8152600401610548906148e6565b60026001541415611eac5760405162461bcd60e51b815260040161054890614945565b505060018055565b6000546001600160a01b03163314611ede5760405162461bcd60e51b815260040161054890614910565b611ee86000613f02565b565b6002546001600160a01b03163314611f145760405162461bcd60e51b81526004016105489061497c565b600c54610100900460ff1615611f3c5760405162461bcd60e51b8152600401610548906148e6565b6006546040516000916001600160a01b0316907f7fb3a9a28264147fdfcb557d570d2771a0c4df4cc7f7f8b4305eede3bba91ab090611f8190869086906024016148ba565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611fbf91906147f3565b600060405180830381855af49150503d8060008114611ffa576040519150601f19603f3d011682016040523d82523d6000602084013e611fff565b606091505b50509050806120485760405162461bcd60e51b815260206004820152601560248201527418da185b99d9551bdad95b9554924811985a5b1959605a1b6044820152606401610548565b505050565b6000546001600160a01b031633146120775760405162461bcd60e51b815260040161054890614910565b600c54610100900460ff161561209f5760405162461bcd60e51b8152600401610548906148e6565b600260015414156120c25760405162461bcd60e51b815260040161054890614945565b600260015560048054604080516371f3b44560e11b8152905185936001600160a01b039093169263e3e7688a92808201926020929091829003018186803b15801561210c57600080fd5b505afa158015612120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121449190614488565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561218557600080fd5b505afa158015612199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bd9190614525565b10156122025760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610548565b60048054604080516371f3b44560e11b815290516001600160a01b039092169263e3e7688a928282019260209290829003018186803b15801561224457600080fd5b505afa158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c9190614488565b60405163a9059cbb60e01b81526001600160a01b03838116600483015260248201859052919091169063a9059cbb90604401602060405180830381600087803b1580156122c857600080fd5b505af11580156122dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123009190614505565b50506001805550565b6000546001600160a01b031633146123335760405162461bcd60e51b815260040161054890614910565b6001600160a01b03811661239e5760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642041646d696e3a206e65772061646d696e206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401610548565b6123a781613f52565b50565b6002546001600160a01b031633146123d45760405162461bcd60e51b81526004016105489061497c565b6004805460405163a1b3d1ff60e01b81526001600160a01b039091169163a1b3d1ff91612403918591016148d3565b600060405180830381600087803b15801561241d57600080fd5b505af1158015612431573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146124625760405162461bcd60e51b815260040161054890614910565b6007546001600160a01b03166124aa5760405162461bcd60e51b815260206004820152600d60248201526c57726f6e67204164647265737360981b6044820152606401610548565b600c5460ff16156124fe57600b546124c59062015180613fb3565b42116124fe5760405162461bcd60e51b8152602060048201526008602482015267496e2044656c617960c01b6044820152606401610548565b60076005600a604051612511919061481f565b908152604051908190036020019020905481546001600160a01b0319166001600160a01b03909116179055600a80546009919061254d90614aa0565b612558929190614307565b50600754600680546001600160a01b0319166001600160a01b0390921691909117905560088054600181018255600091909152600a80547ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3909201916125bd90614aa0565b6125c8929190614307565b506040805160208101918290526000908190526125e791600a91614392565b50600780546001600160a01b0319169055565b6002546001600160a01b031633146126245760405162461bcd60e51b81526004016105489061497c565b60048054604051622a710d60e31b81526001600160a01b03909116916301538868916126549186918691016148ba565b600060405180830381600087803b15801561266e57600080fd5b505af1158015612682573d6000803e3d6000fd5b505050505050565b6002546001600160a01b031633146126b45760405162461bcd60e51b81526004016105489061497c565b600c54610100900460ff16156126dc5760405162461bcd60e51b8152600401610548906148e6565b806001600160a01b0381166127225760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b6044820152606401610548565b600260015414156127455760405162461bcd60e51b815260040161054890614945565b60026001556004805460405163942eb8c360e01b81526001600160a01b038581169382019390935291169063942eb8c390602401600060405180830381600087803b15801561279357600080fd5b505af11580156127a7573d6000803e3d6000fd5b50506001805550505050565b6000546001600160a01b031633146127dd5760405162461bcd60e51b815260040161054890614910565b6001600160a01b0381166128255760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b6044820152606401610548565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146128715760405162461bcd60e51b815260040161054890614910565b6040805160208101918290526000908190526125e791600a91614392565b6000546001600160a01b031633146128b95760405162461bcd60e51b815260040161054890614910565b6001600160a01b0381166128ff5760405162461bcd60e51b815260206004820152600d60248201526c57726f6e67204164647265737360981b6044820152606401610548565b60008251116129405760405162461bcd60e51b815260206004820152600d60248201526c22b6b83a3c902b32b939b4b7b760991b6044820152606401610548565b8160405160200161295191906147f3565b604051602081830303815290604052805190602001206009604051602001612979919061481f565b6040516020818303038152906040528051906020012014156129d05760405162461bcd60e51b815260206004820152601060248201526f22bc34b9ba34b733902b32b939b4b7b760811b6044820152606401610548565b81516129e390600a906020850190614392565b50600780546001600160a01b0319166001600160a01b03929092169190911790555042600b55565b60048054604051630e4d620560e01b815233928101929092526001600160a01b031690630e4d62059060240160206040518083038186803b158015612a4f57600080fd5b505afa158015612a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a879190614525565b15612ac95760405162461bcd60e51b815260206004820152601260248201527114d95d081d1bdad95b95549248199a5c9cdd60721b6044820152606401610548565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316630ca1c5c96040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1957600080fd5b505afa158015612b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b519190614525565b9050600080600460009054906101000a90046001600160a01b03166001600160a01b0316637a5caab36040518163ffffffff1660e01b8152600401604080518083038186803b158015612ba357600080fd5b505afa158015612bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdb91906147a4565b9150915081600460009054906101000a90046001600160a01b03166001600160a01b031663e3e7688a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c2e57600080fd5b505afa158015612c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c669190614488565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015612ca757600080fd5b505afa158015612cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdf9190614525565b1015612d265760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103233ba103a37b5b2b760511b6044820152606401610548565b80600460009054906101000a90046001600160a01b03166001600160a01b03166338e514fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d7557600080fd5b505afa158015612d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dad9190614488565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015612dee57600080fd5b505afa158015612e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e269190614525565b1015612e6d5760405162461bcd60e51b81526020600482015260166024820152752ab739bab33334b1b4b2b73a103239b8103a37b5b2b760511b6044820152606401610548565b612ec1333084600460009054906101000a90046001600160a01b03166001600160a01b031663e3e7688a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bde57600080fd5b612f15333083600460009054906101000a90046001600160a01b03166001600160a01b03166338e514fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bde57600080fd5b60048054604051634541a7fb60e11b81523392810192909252602482018590526001600160a01b031690638a834ff690604401600060405180830381600087803b158015612f6257600080fd5b505af1158015612f76573d6000803e3d6000fd5b50505050826000141561305f57600480546040805163b9e1bbf960e01b815290516001600160a01b03909216926301538868928792859263b9e1bbf9928282019260009290829003018186803b158015612fcf57600080fd5b505afa158015612fe3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261300b9190810190614622565b6040518363ffffffff1660e01b81526004016130289291906148ba565b600060405180830381600087803b15801561304257600080fd5b505af1158015613056573d6000803e3d6000fd5b505050506130c5565b60048054604051639d47207160e01b81523392810192909252602482018590526001600160a01b031690639d47207190604401600060405180830381600087803b1580156130ac57600080fd5b505af11580156130c0573d6000803e3d6000fd5b505050505b6004805460408051630ca1c5c960e01b815290516001600160a01b03909216926316dbf90692613154926001928692630ca1c5c9928083019260209291829003018186803b15801561311657600080fd5b505afa15801561312a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314e9190614525565b90613fb3565b6040518263ffffffff1660e01b815260040161317291815260200190565b600060405180830381600087803b15801561318c57600080fd5b505af11580156131a0573d6000803e3d6000fd5b50505050505050565b6002546001600160a01b031633146131d35760405162461bcd60e51b81526004016105489061497c565b600c54610100900460ff16156131fb5760405162461bcd60e51b8152600401610548906148e6565b806001600160a01b0381166132415760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b6044820152606401610548565b600260015414156132645760405162461bcd60e51b815260040161054890614945565b6002600155600480546040516361746ea560e11b81526001600160a01b038581169382019390935291169063c2e8dd4a90602401600060405180830381600087803b1580156132b257600080fd5b505af11580156132c6573d6000803e3d6000fd5b5050600c80546001600160a01b03909516620100000262010000600160b01b03199095169490941790935550506001805550565b6000546001600160a01b031633146133245760405162461bcd60e51b815260040161054890614910565b600c5460ff161561336d5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e48125b9a5d1a585b1a5e9959606a1b6044820152606401610548565b61339460405180604001604052806005815260200164302e302e3160d81b8152508261288f565b61339c612438565b50600c805460ff19166001179055565b600a805461151d90614aa0565b6000546001600160a01b031633146133e35760405162461bcd60e51b815260040161054890614910565b600c54610100900460ff161561340b5760405162461bcd60e51b8152600401610548906148e6565b6002600154141561342e5760405162461bcd60e51b815260040161054890614945565b6002600155600c546004805460408051631c728a7f60e11b815290516001600160a01b03620100009095048516946342966c68949316926338e514fe92808201926020929091829003018186803b15801561348857600080fd5b505afa15801561349c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c09190614488565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561350157600080fd5b505afa158015613515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135399190614525565b6040518263ffffffff1660e01b815260040161355791815260200190565b600060405180830381600087803b15801561357157600080fd5b505af11580156114e8573d6000803e3d6000fd5b6000546001600160a01b031633146135af5760405162461bcd60e51b815260040161054890614910565b6135b7613fc6565b6040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020015b60405180910390a1565b60405163b613249d60e01b8152336004820152819061362a9073__$5375cb35093987ecf92e89395ecd702213$__9063b613249d90602401611da7565b6136655760405162461bcd60e51b815260206004820152600c60248201526b139bdd081d995c9a599a595960a21b6044820152606401610548565b600354600160a01b900460ff1661368e5760405162461bcd60e51b8152600401610548906149c2565b600c54610100900460ff16156136b65760405162461bcd60e51b8152600401610548906148e6565b600260015414156136d95760405162461bcd60e51b815260040161054890614945565b600260015560048054604051630e4d620560e01b815233928101929092526001600160a01b031690630e4d62059060240160206040518083038186803b15801561372257600080fd5b505afa158015613736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061375a9190614525565b1561379c5760405162461bcd60e51b815260206004820152601260248201527114d95d081d1bdad95b95549248199a5c9cdd60721b6044820152606401610548565b60048054604051630554924960e51b815233928101929092526001600160a01b03169063aa9249209060240160206040518083038186803b1580156137e057600080fd5b505afa1580156137f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138189190614505565b1561384f5760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b6044820152606401610548565b60048054604080516310c1331760e31b815290516001600160a01b039092169263860998b8928282019260209290829003018186803b15801561389157600080fd5b505afa1580156138a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c99190614525565b60048054604080516325ebda5b60e01b8152905161390f936001936001600160a01b0316926325ebda5b9281830192602092829003018186803b15801561311657600080fd5b111561396e5760405162461bcd60e51b815260206004820152602860248201527f4d696e7420776f756c6420657863656564206d617820737570706c79206f6620604482015267566f79616765727360c01b6064820152608401610548565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316630ca1c5c96040518163ffffffff1660e01b815260040160206040518083038186803b1580156139be57600080fd5b505afa1580156139d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f69190614525565b60048054604051634541a7fb60e11b81523392810192909252602482018390529192506001600160a01b0390911690638a834ff690604401600060405180830381600087803b158015613a4857600080fd5b505af1158015613a5c573d6000803e3d6000fd5b505050508060001415613b4557600480546040805163b9e1bbf960e01b815290516001600160a01b03909216926301538868928592859263b9e1bbf9928282019260009290829003018186803b158015613ab557600080fd5b505afa158015613ac9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613af19190810190614622565b6040518363ffffffff1660e01b8152600401613b0e9291906148ba565b600060405180830381600087803b158015613b2857600080fd5b505af1158015613b3c573d6000803e3d6000fd5b50505050613bab565b60048054604051639d47207160e01b81523392810192909252602482018390526001600160a01b031690639d47207190604401600060405180830381600087803b158015613b9257600080fd5b505af1158015613ba6573d6000803e3d6000fd5b505050505b6004805460408051630ca1c5c960e01b815290516001600160a01b03909216926316dbf90692613bfc926001928692630ca1c5c9928083019260209291829003018186803b15801561311657600080fd5b6040518263ffffffff1660e01b8152600401613c1a91815260200190565b600060405180830381600087803b158015613c3457600080fd5b505af1158015613c48573d6000803e3d6000fd5b50506004805460405163ca0a9e3d60e01b81523392810192909252600160248301526001600160a01b0316925063ca0a9e3d9150604401600060405180830381600087803b158015613c9957600080fd5b505af1158015613cad573d6000803e3d6000fd5b505060048054604080516325ebda5b60e01b815290516001600160a01b03909216945063440372f89350613d049260019286926325ebda5b9281810192602092909190829003018186803b15801561311657600080fd5b6040518263ffffffff1660e01b8152600401613d2291815260200190565b600060405180830381600087803b158015613d3c57600080fd5b505af1158015613d50573d6000803e3d6000fd5b5050600180555050505050565b6002546001600160a01b03163314613d875760405162461bcd60e51b81526004016105489061497c565b6003805460ff60a01b198116600160a01b9182900460ff1615909102179055565b6000546001600160a01b03163314613dd25760405162461bcd60e51b815260040161054890614910565b6001600160a01b038116613e375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610548565b6123a781613f02565b6000546001600160a01b03163314613e6a5760405162461bcd60e51b815260040161054890614910565b613e7261403d565b6040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020016135e3565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052613efc9085906140bd565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6910160405180910390a15050565b6000613fbf8284614a45565b9392505050565b600c54610100900460ff1615613fee5760405162461bcd60e51b8152600401610548906148e6565b600c805461ff0019166101001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586140253390565b6040516001600160a01b0390911681526020016135e3565b600c54610100900460ff1661408b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610548565b600c805461ff00191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33614025565b6000614112826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661418f9092919063ffffffff16565b80519091501561204857808060200190518101906141309190614505565b6120485760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610548565b606061419e84846000856141a6565b949350505050565b6060824710156142075760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610548565b843b6142555760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610548565b600080866001600160a01b0316858760405161427191906147f3565b60006040518083038185875af1925050503d80600081146142ae576040519150601f19603f3d011682016040523d82523d6000602084013e6142b3565b606091505b50915091506142c38282866142ce565b979650505050505050565b606083156142dd575081613fbf565b8251156142ed5782518084602001fd5b8160405162461bcd60e51b815260040161054891906148d3565b82805461431390614aa0565b90600052602060002090601f0160209004810192826143355760008555614382565b82601f106143465780548555614382565b8280016001018555821561438257600052602060002091601f016020900482015b82811115614382578254825591600101919060010190614367565b5061438e929150614406565b5090565b82805461439e90614aa0565b90600052602060002090601f0160209004810192826143c05760008555614382565b82601f106143d957805160ff1916838001178555614382565b82800160010185558215614382579182015b828111156143825782518255916020019190600101906143eb565b5b8082111561438e5760008155600101614407565b600082601f83011261442b578081fd5b813561443e61443982614a1d565b6149ec565b818152846020838601011115614452578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121561447d578081fd5b8135613fbf81614b07565b600060208284031215614499578081fd5b8151613fbf81614b07565b600080600080608085870312156144b9578283fd5b84356144c481614b07565b93506020850135925060408501359150606085013567ffffffffffffffff8111156144ed578182fd5b6144f98782880161441b565b91505092959194509250565b600060208284031215614516578081fd5b81518015158114613fbf578182fd5b600060208284031215614536578081fd5b5051919050565b6000806040838503121561454f578182fd5b82359150602083013567ffffffffffffffff81111561456c578182fd5b6145788582860161441b565b9150509250929050565b600060208284031215614593578081fd5b813567ffffffffffffffff8111156145a9578182fd5b61419e8482850161441b565b600080602083850312156145c7578182fd5b823567ffffffffffffffff808211156145de578384fd5b818501915085601f8301126145f1578384fd5b8135818111156145ff578485fd5b866020828501011115614610578485fd5b60209290920196919550909350505050565b600060208284031215614633578081fd5b815167ffffffffffffffff811115614649578182fd5b8201601f81018413614659578182fd5b805161466761443982614a1d565b81815285602083850101111561467b578384fd5b61468c826020830160208601614a74565b95945050505050565b600080604083850312156146a7578182fd5b823567ffffffffffffffff8111156146bd578283fd5b6146c98582860161441b565b92505060208301356146da81614b07565b809150509250929050565b600060a082840312156146f6578081fd5b60405160a0810181811067ffffffffffffffff8211171561471957614719614af1565b604052825160ff8116811461472c578283fd5b815260208381015190820152604083015161474681614b07565b6040820152606083810151908201526080928301519281019290925250919050565b600060208284031215614779578081fd5b5035919050565b60008060408385031215614792578182fd5b8235915060208301356146da81614b07565b600080604083850312156147b6578182fd5b505080516020909101519092909150565b600081518084526147df816020860160208601614a74565b601f01601f19169290920160200192915050565b60008251614805818460208701614a74565b9190910192915050565b8183823760009101908152919050565b600080835482600182811c91508083168061483b57607f831692505b602080841082141561485b57634e487b7160e01b87526022600452602487fd5b81801561486f5760018114614880576148ac565b60ff198616895284890196506148ac565b60008a815260209020885b868110156148a45781548b82015290850190830161488b565b505084890196505b509498975050505050505050565b82815260406020820152600061419e60408301846147c7565b602081526000613fbf60208301846147c7565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526026908201527f496e76616c69642041646d696e3a2063616c6c6572206973206e6f74207468656040820152651030b236b4b760d11b606082015260800190565b60208082526010908201526f155b9858dd1a5d99481d1bc81b5a5b9d60821b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715614a1557614a15614af1565b604052919050565b600067ffffffffffffffff821115614a3757614a37614af1565b50601f01601f191660200190565b60008219821115614a5857614a58614adb565b500190565b600082821015614a6f57614a6f614adb565b500390565b60005b83811015614a8f578181015183820152602001614a77565b83811115613efc5750506000910152565b600181811c90821680614ab457607f821691505b60208210811415614ad557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146123a757600080fdfea2646970667358221220e69b758b6812e0fc34151f2286464350a705d4e82c142079d59a59c3c222b04064736f6c63430008040033",
  "libraries": {
    "Sig": "0xB1A13497D08d8764900546B5989E654A5c71c2d1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "admin()": {
        "details": "Returns the address of the current admin."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferAdmin(address)": {
        "details": "Transfers ownership of the contract to a new account (`newAdmin`). Can only be called by the current admin."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 206,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10498,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "_admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10500,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "proxy",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10503,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "mintIsActive",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 10506,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "mineIsActive",
        "offset": 21,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 12756,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "vS",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(VoyagerStorage)14375"
      },
      {
        "astId": 12764,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "versions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_struct(LogicContracts)12759_storage)"
      },
      {
        "astId": 12767,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "curVersion",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(LogicContracts)12759_storage"
      },
      {
        "astId": 12770,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "delayVersion",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(LogicContracts)12759_storage"
      },
      {
        "astId": 12773,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "versionList",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 12775,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "versionName",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 12777,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "delayVersionName",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 12782,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "startTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 12784,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "initialized",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 121,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "_paused",
        "offset": 1,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 11240,
        "contract": "contracts/voyager/Voyager.sol:Voyager",
        "label": "dsp",
        "offset": 2,
        "slot": "12",
        "type": "t_contract(DeepSeaPlankton)4547"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(DeepSeaPlankton)4547": {
        "encoding": "inplace",
        "label": "contract DeepSeaPlankton",
        "numberOfBytes": "20"
      },
      "t_contract(VoyagerStorage)14375": {
        "encoding": "inplace",
        "label": "contract VoyagerStorage",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_struct(LogicContracts)12759_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct VoyagerProxy.LogicContracts)",
        "numberOfBytes": "32",
        "value": "t_struct(LogicContracts)12759_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LogicContracts)12759_storage": {
        "encoding": "inplace",
        "label": "struct VoyagerProxy.LogicContracts",
        "members": [
          {
            "astId": 12758,
            "contract": "contracts/voyager/Voyager.sol:Voyager",
            "label": "voyagerLogic",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}