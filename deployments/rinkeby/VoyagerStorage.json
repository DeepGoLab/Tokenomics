{
  "address": "0x3EFE7499cCD3E02faF6B0D201587F23E641fa24D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLevel",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allVoyagersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cooldowns",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dgtAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dspAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipMintableState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAllVoyagerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCurLevelHoldingDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getExpiredWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getHoldingDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "holdingDays",
          "type": "uint256"
        }
      ],
      "name": "getLevelUpDSP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "getLevelUpFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLevelUpFeeV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getMaxLevelOfOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxWhitelisted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getOwnedVoyagers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "getSetByOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken0URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getTokenIDWithoutURI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "getTokenLevelCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "continueDays",
          "type": "uint256"
        }
      ],
      "name": "getValidMaxLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getVoyager",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "level",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startHoldingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "levelStartHoldingTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct BaseStorage.Voyager",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getVoyagerByTokenId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "level",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startHoldingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "levelStartHoldingTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct BaseStorage.Voyager",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelistExpired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "levelUpDGT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "levelUpDSP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "levelUpDSPParam1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "levelUpDSPParam2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "levelUpFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dgt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dsp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxLevelOfOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mineIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintVoyayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownedVoyagers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownedVoyagersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "setByOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_interval",
          "type": "uint32"
        }
      ],
      "name": "setCoolDown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isExpired",
          "type": "bool"
        }
      ],
      "name": "setExpiredWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "setFee1TokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token2",
          "type": "address"
        }
      ],
      "name": "setFee2TokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "setLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_curTimeStamp",
          "type": "uint256"
        }
      ],
      "name": "setLevelStartHoldingTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dgt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dsp",
          "type": "uint256"
        }
      ],
      "name": "setLevelUpFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "setMaxLevelOfOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "setProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isSet",
          "type": "bool"
        }
      ],
      "name": "setSetByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "setTokenIDWithoutURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTokenLevelCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTotalMinted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistExpired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_string",
          "type": "string"
        }
      ],
      "name": "token0URI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenLevelCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferVoyager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voyagers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startHoldingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "levelStartHoldingTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5254e9424d3f7249c5dabc0be3ee1ad67edb0a85d51ae967ee2e8b3e7c8e8fc4",
  "receipt": {
    "to": null,
    "from": "0x6993AffA5572139D896B67Fe3A108B51EB6f8B53",
    "contractAddress": "0x3EFE7499cCD3E02faF6B0D201587F23E641fa24D",
    "transactionIndex": 5,
    "gasUsed": "4552994",
    "logsBloom": "0x00000000000000000000000008000800000000000000000400800000000000000000000000000000000000000000000000000000000000000000000000000000000008008000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000002000000000000000100000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xfd3c08586ba7ab8706a2258d4c6d8d62b3455dbba7d1e8db4626ff73f1dc103e",
    "transactionHash": "0x5254e9424d3f7249c5dabc0be3ee1ad67edb0a85d51ae967ee2e8b3e7c8e8fc4",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 9687305,
        "transactionHash": "0x5254e9424d3f7249c5dabc0be3ee1ad67edb0a85d51ae967ee2e8b3e7c8e8fc4",
        "address": "0x3EFE7499cCD3E02faF6B0D201587F23E641fa24D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006993affa5572139d896b67fe3a108b51eb6f8b53"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xfd3c08586ba7ab8706a2258d4c6d8d62b3455dbba7d1e8db4626ff73f1dc103e"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 9687305,
        "transactionHash": "0x5254e9424d3f7249c5dabc0be3ee1ad67edb0a85d51ae967ee2e8b3e7c8e8fc4",
        "address": "0x3EFE7499cCD3E02faF6B0D201587F23E641fa24D",
        "topics": [
          "0xf8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000006993affa5572139d896b67fe3a108b51eb6f8b53",
        "logIndex": 9,
        "blockHash": "0xfd3c08586ba7ab8706a2258d4c6d8d62b3455dbba7d1e8db4626ff73f1dc103e"
      }
    ],
    "blockNumber": 9687305,
    "cumulativeGasUsed": "4869212",
    "status": 1,
    "byzantium": true
  },
  "args": [
    6
  ],
  "solcInputHash": "111832c4bd8240d32d619a68a1c12b62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVoyagersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dgtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dspAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipMintableState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAllVoyagerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurLevelHoldingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getExpiredWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHoldingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingDays\",\"type\":\"uint256\"}],\"name\":\"getLevelUpDSP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getLevelUpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLevelUpFeeV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMaxLevelOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWhitelisted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getOwnedVoyagers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getSetByOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken0URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTokenIDWithoutURI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getTokenLevelCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"continueDays\",\"type\":\"uint256\"}],\"name\":\"getValidMaxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVoyager\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startHoldingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelStartHoldingTime\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseStorage.Voyager\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getVoyagerByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startHoldingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelStartHoldingTime\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseStorage.Voyager\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelUpDGT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelUpDSP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelUpDSPParam1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelUpDSPParam2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelUpFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dgt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dsp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxLevelOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mineIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mintVoyayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedVoyagers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedVoyagersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setByOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_interval\",\"type\":\"uint32\"}],\"name\":\"setCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExpired\",\"type\":\"bool\"}],\"name\":\"setExpiredWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"setFee1TokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"}],\"name\":\"setFee2TokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curTimeStamp\",\"type\":\"uint256\"}],\"name\":\"setLevelStartHoldingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dgt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dsp\",\"type\":\"uint256\"}],\"name\":\"setLevelUpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setMaxLevelOfOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSet\",\"type\":\"bool\"}],\"name\":\"setSetByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setTokenIDWithoutURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTokenLevelCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTotalMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWhitelistExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"token0URI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLevelCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferVoyager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voyagers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startHoldingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelStartHoldingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"admin()\":{\"details\":\"Returns the address of the current admin.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setLevelUpFee(uint256,uint256,uint256)\":{\"details\":\"Updates the level up fee as well as mint fee. Can only  be called by the Admin address. todo: \\u53ef\\u8bbe\\u7f6emaxLevel todo: \\u52a0maxLevel\\u9650\\u5236\\u6761\\u4ef6 todo\\uff1a\\u52a0\\u63a5\\u53e3\\u83b7\\u53d6\\u94f8\\u9020\\u6216\\u5347\\u7ea7\\u7684\\u8d39\\u7528\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferAdmin(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newAdmin`). Can only be called by the current admin.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"maxLevelOfOwner\":{\"details\":\"A mapping from Voyager to the max level of the Voyager. \"},\"tokenLevelCount\":{\"details\":\"A mapping from owner to token amount of each level. \"},\"voyagers\":{\"details\":\"An array containing the Voyager struct for all Voyagers in existence. The ID of each Voyager is actually an index into this array.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cooldowns(uint256)\":{\"notice\":\"\\u4e0d\\u540c\\u7b49\\u7ea7\\u5347\\u7ea7\\u7684\\u65f6\\u95f4\\u95f4\\u9694,\\u6700\\u5927cooldowns\\u662f7\\u5929\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyager/VoyagerStorage.sol\":\"VoyagerStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./Sig.sol\\\";\\n\\ncontract AccessControl is Ownable, ReentrancyGuard {\\n    using SafeMath for uint;\\n\\n    // event ContractUpgrade(address newContract);\\n    event AdminTransferred(address oldAdmin, address newAdmin);\\n\\n    address private _admin;\\n    address public proxy;\\n    bool public mintIsActive = true;\\n    bool public mineIsActive = true;\\n\\n    constructor() {\\n        _setAdmin(_msgSender());\\n    }\\n\\n    function verified(bytes32 hash, bytes memory signature) public view returns (bool){\\n        return admin() == Sig.recover(hash, signature);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current admin.\\n     */\\n    function admin() public view virtual returns (address) {\\n        return _admin;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(admin() == _msgSender(), \\\"Invalid Admin: caller is not the admin\\\");\\n        _;\\n    }\\n\\n    function _setAdmin(address newAdmin) private {\\n        address oldAdmin = _admin;\\n        _admin = newAdmin;\\n        emit AdminTransferred(oldAdmin, newAdmin);\\n    }\\n\\n    function setProxy(address _proxy) external onlyOwner {\\n        require(_proxy != address(0), \\\"Invalid Address\\\");\\n        proxy = _proxy;\\n    }\\n\\n    modifier onlyProxy() {\\n        require(proxy == _msgSender(), \\\"Not Permit: caller is not the proxy\\\"); \\n        _;\\n    }\\n\\n    modifier sigVerified(bytes memory signature) {\\n        require(verified(Sig.ethSignedHash(msg.sender), signature), \\\"Not verified\\\");\\n        _;\\n    }\\n\\n    modifier activeMint() {\\n        require(mintIsActive, \\\"Unactive to mint\\\");\\n        _;\\n    } \\n\\n    modifier activeMine() {\\n        require(mineIsActive, \\\"Unactive to mint\\\");\\n        _;\\n    } \\n    \\n    modifier notZeroAddress(address addr) {\\n        require(addr != address(0), \\\"Zero address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newAdmin`).\\n     * Can only be called by the current admin.\\n     */\\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Invalid Admin: new admin is the zero address\\\");\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /*\\n    * Pause sale if active, make active if paused\\n    */\\n    function flipMintableState() public onlyAdmin {\\n        mintIsActive = !mintIsActive;\\n    }\\n}\\n\",\"keccak256\":\"0xa4be9d8bd9df054d314615a9f75903ce7082db68313ee25177f59ea1242b2c16\",\"license\":\"MIT\"},\"contracts/utils/Sig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Sig {\\n\\n    using ECDSA for bytes32;\\n\\n    function addressHash(address _addr) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_addr));\\n    }\\n\\n    function ethSignedHash(address _addr) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_addr)).toEthSignedMessageHash();\\n    }\\n\\n    function recover(bytes32 hash, bytes memory signature) public pure returns(address) {\\n        return hash.recover(signature);\\n    }\\n\\n    function verified(bytes32 hash, bytes memory signature, address signer) public pure returns (bool){\\n        return signer == recover(hash, signature);\\n    }\\n}\\n\",\"keccak256\":\"0x4ff42be9fde5215138aec5a4fd5c356ee2c77e96fc379168bac390025a62e5a7\",\"license\":\"MIT\"},\"contracts/voyager/BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract BaseStorage {\\n    address public dgtAddress;\\n    address public dspAddress;\\n\\n    uint public decimals = 10 ** 18;\\n\\n    struct FeeComponent {\\n        uint256 dgt;\\n        uint256 dsp;\\n    }\\n\\n    struct Voyager {\\n        // Level of Voyager is from 1 to 6\\n        uint8 level;\\n        // Id of the Voyager\\n        uint256 id;\\n        address minter;\\n        // todo: image of the Voyager\\u662f\\u5426\\u5728struct\\u4e2d\\u5c55\\u793a \\n        uint256 startHoldingTime; // NFT\\u6301\\u6709\\u603b\\u65f6\\u957f\\n        uint256 levelStartHoldingTime; // \\u5f53\\u524d\\u7b49\\u7ea7\\u6301\\u6709\\u65f6\\u95f4\\n    }\\n\\n    /*** CONSTANTS ***/\\n    /// \\u4e0d\\u540c\\u7b49\\u7ea7\\u5347\\u7ea7\\u7684\\u65f6\\u95f4\\u95f4\\u9694,\\u6700\\u5927cooldowns\\u662f7\\u5929\\n    uint32[5] public cooldowns = [\\n        uint32(30 minutes),\\n        uint32(1 days),\\n        uint32(2 days),\\n        uint32(4 days),\\n        uint32(7 days)\\n    ];\\n\\n    /*** STORAGE ***/\\n    uint256 public minLevel = 1;\\n    uint256 public maxLevel;\\n    uint256 public initialSupply = 1000;\\n\\n    FeeComponent[] public levelUpFees;\\n\\n    uint[6] public levelUpDGT = [100, 100, 100, 300, 1000, 1000];\\n    uint[6] public levelUpDSP = [3593, 3683, 3808, 7457, 11230, 18686];\\n    // todo: \\u5df2\\u7ecf\\u4e58\\u8fc710**18\\n    uint256[6] public levelUpDSPParam1 = [3621, 3972, 4097, 7763, 11553, 19044]; \\n    uint256[6] public levelUpDSPParam2 = [3621, 3668, 3793, 7459, 11249, 18740]; \\n\\n    // constructor() {\\n    //     levelUpDSPParam.push([1772280209, 980723583462, 246158456134135, 22391115099470864, 1198780346498323712, 3601786559875276341248]);\\n    //     levelUpDSPParam.push([1772280209, 980723583462, 246158456134124, 22391115099468928, 1198780346498212096, 3691786559875272671232]);\\n    //     levelUpDSPParam.push([1789655505, 990338520554, 248571774331527, 22610635835739876, 1210533094993398272, 3816215839874055405568]);\\n    //     levelUpDSPParam.push([3544560418, 1961447166924, 492316912268235, 44782230198936496, 2397560692996402176, 7473573119750552158208]);\\n    //     levelUpDSPParam.push([5316840627, 2942170750386, 738475368402420, 67173345298413568, 3596341039494998528, 11255359679625831645184]);\\n    //     levelUpDSPParam.push([8861401046, 4903617917310, 1230792280670524, 111955575497332560, 5993901732490513408, 18728932799376372269056]);\\n    // }\\n}\\n\",\"keccak256\":\"0xf7b1a5e8af3c7f439398c8edec09ee88d1797a6d10050e00a6c73525f466e373\",\"license\":\"MIT\"},\"contracts/voyager/VoyagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"./BaseStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"../utils/Sig.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ncontract VoyagerStorage is ERC721, IERC721Enumerable, BaseStorage, AccessControl {\\n    using SafeMath for uint;\\n    // using SafeERC20 for IERC20;\\n\\n    /// @dev An array containing the Voyager struct for all Voyagers in existence. The ID of\\n    /// each Voyager is actually an index into this array.\\n    Voyager[] public voyagers;\\n\\n    // Mapping from owner to Voyager array\\n    mapping(address => uint[]) public ownedVoyagers;\\n    \\n    // Mapping from token ID to index of the owner tokenId list\\n    mapping(address => mapping( uint256 => uint256 )) public ownedVoyagersIndex;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) public allVoyagersIndex;\\n\\n    /// @dev A mapping from Voyager to the max level of the Voyager. \\n    mapping (address => uint256) public maxLevelOfOwner;\\n\\n    /// @dev A mapping from owner to token amount of each level. \\n    mapping (address => mapping(uint256 => uint256)) public tokenLevelCount;\\n\\n    mapping(uint256 => string) private _tokenURIs;\\n    mapping(uint256 => mapping(uint256 => bool)) public setByOwner; // tokenURI is set by owner in certain level\\n    mapping(address => uint256) private _tokenIDWithoutURI;\\n    mapping (address => bool) private _expiredWhitelist; \\n\\n    uint private _maxWhitelisted = 1000;\\n    uint private _totalMinted;\\n    uint private _whitelistExpired;\\n    string private _token0URI;\\n\\n    // todo: update\\n    constructor(uint256 _maxLevel) ERC721(\\\"Voyager\\\", \\\"VOG\\\")  {\\n        maxLevel = _maxLevel;\\n        initialLevelUpFees();\\n    }\\n    \\n    function getOwnedVoyagers(address _addr) public view returns (uint[] memory) {\\n        return ownedVoyagers[_addr];\\n    }\\n\\n    // \\u6301\\u6709\\u4e00\\u5b9a\\u5929\\u6570\\u7684\\u6700\\u5927\\u7b49\\u7ea7\\u6570\\n    function getValidMaxLevel(address owner, uint256 continueDays) public view returns (uint) {\\n        uint balance = ERC721.balanceOf(owner); \\n        uint maxLevel;\\n        Voyager memory voyager;\\n        for (uint i=0; i<balance; i++) {\\n            uint tokenId = ownedVoyagers[owner][i];\\n            voyager = getVoyagerByTokenId(tokenId);\\n            if (voyager.minter == ownerOf(tokenId) && voyager.level > maxLevel) {\\n                maxLevel = voyager.level;\\n            } else if (block.timestamp - voyager.startHoldingTime > (1 days) * continueDays\\n                && voyager.level > maxLevel) {\\n                maxLevel = voyager.level;\\n            }\\n        }\\n        return maxLevel;\\n    }\\n    \\n    function getVoyager(uint _index) public view returns (Voyager memory){\\n        return voyagers[_index];\\n    }\\n\\n    function getVoyagerByTokenId(uint _tokenId) public view returns (Voyager memory){\\n        return voyagers[getAllVoyagerIndex(_tokenId)];\\n    }\\n\\n    \\n    function getSetByOwner(uint _tokenId, uint _level) public view returns (bool) {\\n        return setByOwner[_tokenId][_level];\\n    }\\n\\n    function setSetByOwner(uint _tokenId, uint _level, bool _isSet) public onlyProxy{\\n        setByOwner[_tokenId][_level] = _isSet;\\n    }\\n    \\n\\n    function getTokenIDWithoutURI(address _addr) public view returns (uint) {\\n        return _tokenIDWithoutURI[_addr];\\n    }\\n\\n    function setTokenIDWithoutURI(address _addr, uint _tokenId) public onlyProxy {\\n        _tokenIDWithoutURI[_addr] = _tokenId;\\n    }\\n\\n    function getMaxWhitelisted() public view returns (uint) {\\n        return _maxWhitelisted;\\n    }\\n\\n    function getTotalMinted() public view returns (uint) {\\n        return _totalMinted;\\n    }\\n\\n    function setTotalMinted(uint _amount) public onlyProxy {\\n        _totalMinted = _amount;\\n    }\\n\\n    function getWhitelistExpired() public view returns (uint){\\n        return _whitelistExpired;\\n    }\\n\\n    function setWhitelistExpired(uint _amount) public onlyProxy {\\n        _whitelistExpired = _amount;\\n    }\\n\\n    function getToken0URI() public view returns (string memory) {\\n        return _token0URI;\\n    }\\n\\n    function token0URI(string memory _string) public onlyProxy {\\n        _token0URI = _string;\\n    }\\n\\n    function getExpiredWhitelist(address _addr) public view returns (bool) {\\n        return _expiredWhitelist[_addr];\\n    }\\n\\n    function setExpiredWhitelist(address _addr, bool _isExpired) public onlyProxy {\\n        _expiredWhitelist[_addr] = _isExpired;\\n    }\\n\\n    function getAllVoyagerIndex(uint _tokenId) public view returns (uint) {\\n        return allVoyagersIndex[_tokenId];\\n    }\\n\\n    function getMaxLevelOfOwner(address _addr) public view returns (uint) {\\n        return maxLevelOfOwner[_addr];\\n    }\\n\\n    function setMaxLevelOfOwner(address _addr, uint _level) public onlyProxy {\\n        maxLevelOfOwner[_addr] = _level;\\n    }\\n\\n    function getTokenLevelCount(address _addr, uint _level) public view returns (uint) {\\n        return tokenLevelCount[_addr][_level];\\n    }\\n\\n    function setTokenLevelCount(address _addr, uint _level, uint _amount) public onlyProxy {\\n        tokenLevelCount[_addr][_level] = _amount;\\n    }\\n\\n    function mintVoyayer(address _addr, uint _tokenId) public onlyProxy {\\n        _safeMint(_addr, _tokenId);\\n    }\\n\\n    function transferVoyager(address _to, uint _tokenId) public {\\n        require(getTokenIDWithoutURI(msg.sender) == 0, \\\"Set tokenURI first\\\");\\n        _safeTransfer(msg.sender, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return ownedVoyagers[owner][index];\\n    }\\n\\n    // function tokenIdsOwnedBy(address owner) public view returns (uint[] memory) {\\n    //     uint balance = ERC721.balanceOf(owner);\\n\\n    //     uint[] memory tokenIds;\\n\\n    //     for (uint index=0; index < balance; index++) {\\n    //         tokenIds[index] = ownedVoyagers[owner][index].id;\\n    //     }\\n\\n    //     return tokenIds;\\n    // }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return voyagers.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < VoyagerStorage.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return voyagers[index].id;\\n    }\\n\\n    // \\u5728transfer\\u4e4b\\u524d\\u66f4\\u65b0:1.\\u6700\\u5927level, 2.\\u4e0d\\u540clevel\\u6570\\u91cf\\uff0c3.\\u6240\\u6709\\u6743\\uff0c4.\\u6301\\u6709\\u603b\\u91cf\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override virtual {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId, to);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n            _updateSenderMaxLevel(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n            _updateReceiverMaxLevel(to, tokenId);\\n            voyagers[allVoyagersIndex[tokenId]].startHoldingTime = block.timestamp;\\n            voyagers[allVoyagersIndex[tokenId]].levelStartHoldingTime = block.timestamp;\\n            tokenLevelCount[to][voyagers[allVoyagersIndex[tokenId]].level] += 1;\\n        }\\n    }\\n\\n    function _updateSenderMaxLevel(address from, uint256 tokenId) private {\\n        // update from address maxLevel\\n        uint curLevel = voyagers[allVoyagersIndex[tokenId]].level;\\n        require(curLevel <= maxLevelOfOwner[from], \\\"Level over max\\\");\\n        // ownershipTokenCount[from] -= 1;\\n        tokenLevelCount[from][curLevel] -= 1;\\n\\n        if (ERC721.balanceOf(from) == 0) {\\n            maxLevelOfOwner[from] = 0;\\n        } else if ( curLevel == maxLevelOfOwner[from] ) {\\n            for (; curLevel > 0; curLevel--) {\\n                if (tokenLevelCount[from][curLevel] > 0) {\\n                    maxLevelOfOwner[from] = curLevel;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _updateReceiverMaxLevel(address to, uint256 tokenId) private {\\n        // update to address maxLevel\\n        uint curLevel = voyagers[allVoyagersIndex[tokenId]].level;\\n        if (curLevel > maxLevelOfOwner[to]) {\\n            maxLevelOfOwner[to] = curLevel;\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        ownedVoyagers[to].push(tokenId);\\n        ownedVoyagersIndex[to][tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId, address to) private {\\n        allVoyagersIndex[tokenId] = voyagers.length;\\n        if (tokenId == 0) {\\n            voyagers.push(Voyager(uint8(maxLevel), tokenId, to, block.timestamp, block.timestamp));\\n        } else {\\n            voyagers.push(Voyager(uint8(minLevel), tokenId, to, block.timestamp, block.timestamp));\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ownedVoyagers[from].length - 1;\\n        uint256 tokenIndex = ownedVoyagersIndex[from][tokenId];\\n\\n        uint lastVoyager = ownedVoyagers[from][lastTokenIndex];\\n        ownedVoyagers[from][tokenIndex] = lastVoyager;\\n        ownedVoyagersIndex[from][lastVoyager] = tokenIndex;\\n        delete ownedVoyagersIndex[from][tokenId];\\n        ownedVoyagers[from].pop();\\n        // // When the token to delete is the last token, the swap operation is unnecessary\\n        // if (tokenIndex != lastTokenIndex) {\\n        //     Voyager  storage lastVoyager = ownedVoyagers[from][lastTokenIndex];\\n\\n        //     ownedVoyagers[from][tokenIndex] = lastVoyager; // Move the last token to the slot of the to-delete token\\n        //     ownedVoyagersIndex[lastVoyager.id] = tokenIndex; // Update the moved token's index\\n        // }\\n\\n        // // This also deletes the contents at the last position of the array\\n        // delete ownedVoyagersIndex[tokenId];\\n        // delete ownedVoyagers[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n        \\n        // token array\\u7684max index \\n        uint256 lastTokenIndex = voyagers.length - 1;\\n        // \\u88ab\\u5220\\u9664token\\u6240\\u5728\\u7684array index\\n        uint256 tokenIndex = allVoyagersIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        \\n        // token array\\u4e2dmax index\\u7684token id\\n        Voyager storage lastVoyager = voyagers[lastTokenIndex];\\n\\n        // \\u7528\\u6700\\u540e\\u4e00\\u4e2aVoyager\\u66ff\\u6362\\u88ab\\u5220\\u9664\\u7684\\u90a3\\u4e2a\\n        voyagers[tokenIndex] = lastVoyager; // Move the last token to the slot of the to-delete token\\n        // \\u66f4\\u65b0\\u6700\\u540e\\u4e00\\u4e2atoken\\u7684index\\n        allVoyagersIndex[lastVoyager.id] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete allVoyagersIndex[tokenId];\\n        voyagers.pop();\\n    }\\n\\n    /// @dev Updates the level up fee as well as mint fee. Can only\\n    ///  be called by the Admin address.\\n    /// todo: \\u53ef\\u8bbe\\u7f6emaxLevel\\n    /// todo: \\u52a0maxLevel\\u9650\\u5236\\u6761\\u4ef6\\n    /// todo\\uff1a\\u52a0\\u63a5\\u53e3\\u83b7\\u53d6\\u94f8\\u9020\\u6216\\u5347\\u7ea7\\u7684\\u8d39\\u7528\\n    function setLevelUpFee(uint256 _toLevel, uint256 _dgt, uint256 _dsp) external onlyOwner {\\n        require(_toLevel <= maxLevel, \\\"Over max level\\\");\\n        require(levelUpFees.length >= _toLevel-1, \\\"Add fee from low level\\\");\\n        if (levelUpFees.length == _toLevel-1) {\\n            levelUpFees.push(FeeComponent(_dgt, _dsp));\\n        } else {\\n            levelUpFees[_toLevel-1] = FeeComponent(_dgt, _dsp);\\n        }\\n    }\\n\\n    function setCoolDown(uint256 _toLevel, uint32 _interval) external onlyOwner {\\n        require (_toLevel > 1 && _toLevel <= cooldowns.length.add(1), \\\"Over max level\\\"); \\n        cooldowns[_toLevel-2] = _interval;\\n    }\\n\\n    function initialLevelUpFees() internal {\\n        for (uint i=0; i < maxLevel; i++) {\\n            // 1-DGT,1-DSP,2-DGT,2-DSP...\\n            // DGT 100, 100, 100, 300, 1000, 1000\\n            levelUpFees.push(FeeComponent(levelUpDGT[i] * decimals, levelUpDSP[i] * decimals));\\n        }\\n    }\\n\\n    function getLevelUpDSP(uint level, uint holdingDays) public view returns (uint cost) {\\n        if (level == 0) {\\n            cost = levelUpDSPParam1[0];\\n        } else {\\n            if (holdingDays < 153) {\\n                cost = levelUpDSPParam1[level].sub(2 * holdingDays);\\n            } else {\\n                cost = levelUpDSPParam2[level];\\n            }\\n        }\\n\\n        cost = cost.mul(decimals);\\n    }\\n\\n    // todo\\uff1a\\u83b7\\u53d6\\u5347\\u7ea7\\u7684\\u8d39\\u7528\\n    function getLevelUpFee(uint256 level) public view returns (uint, uint) {\\n        return (levelUpFees[level].dgt, levelUpFees[level].dsp);\\n    }\\n\\n    function getMintFee() public view returns (uint, uint) {\\n        return (levelUpDGT[0] * decimals, getLevelUpDSP(0, 1));\\n    }\\n\\n    // todo: \\u5f53\\u524d\\u7b49\\u7ea7\\u5347\\u7ea7\\u7684\\u6d88\\u8017\\n    function getLevelUpFeeV2(uint tokenId) public view returns (uint, uint) {\\n        uint level = getLevel(tokenId);\\n        uint holdingDays = getCurLevelHoldingDays(tokenId);\\n        return (levelUpDGT[level] * decimals, getLevelUpDSP(level, holdingDays));\\n    }\\n\\n    function getLevel(uint tokenId) public view returns (uint){\\n        return voyagers[allVoyagersIndex[tokenId]].level;\\n    }\\n\\n    function getHoldingDays(uint tokenId) public view returns (uint){\\n        return block.timestamp.sub(voyagers[allVoyagersIndex[tokenId]].startHoldingTime)\\n                              .div(1 days);\\n    }\\n\\n    function getCurLevelHoldingDays(uint tokenId) public view returns (uint){\\n        return block.timestamp.sub(voyagers[allVoyagersIndex[tokenId]].levelStartHoldingTime)\\n                              .div(1 days);\\n    }\\n\\n    function setLevelStartHoldingTime(uint tokenId, uint _curTimeStamp) public onlyProxy {\\n        voyagers[allVoyagersIndex[tokenId]].levelStartHoldingTime = _curTimeStamp;\\n    }\\n\\n    function setLevel(uint tokenId, uint level) public onlyProxy {\\n        voyagers[allVoyagersIndex[tokenId]].level = uint8(level);\\n    }\\n\\n    /*     \\n    * Set URI for NFT with tokenId \\n    */\\n    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) public virtual onlyProxy {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[_tokenId] = _tokenURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        \\n        return _tokenURI;\\n    }\\n\\n    function setFee1TokenAddress(address _token1) public onlyProxy {\\n        dgtAddress = _token1;\\n    }\\n\\n    function setFee2TokenAddress(address _token2) public onlyProxy {\\n        dspAddress = _token2;\\n    }\\n}\\n\",\"keccak256\":\"0x93eb75c49ec35581c52a2d2f5504096350b15c96b20316310fd38df9e57cd70a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x670de0b6b3a764000060085561012060405261070860809081526201518060a0526202a30060c0526205460060e05262093a806101005262000046906009906005620003e5565b506001600a556103e8600c8190556040805160c0810182526064808252602082018190529181019190915261012c60608201526080810182905260a08101919091526200009890600e90600662000488565b506040805160c081018252610e098152610e636020820152610ee091810191909152611d216060820152612bde60808201526148fe60a0820152620000e290601490600662000488565b506040805160c081018252610e258152610f84602082015261100191810191909152611e536060820152612d216080820152614a6460a08201526200012c90601a90600662000488565b506040805160c081018252610e258152610e54602080830191909152610ed192820192909252611d236060820152612bf1608082015261493460a0820152620001789190600662000488565b506029805461ffff60a01b191661010160a01b1790556103e8603455348015620001a157600080fd5b506040516200431c3803806200431c833981016040819052620001c49162000553565b60408051808201825260078152662b37bcb0b3b2b960c91b602080830191825283518085019094526003845262564f4760e81b9084015281519192916200020e91600091620004bf565b50805162000224906001906020840190620004bf565b505050620002416200023b6200026760201b60201c565b6200026b565b60016027556200025133620002bd565b600b819055620002606200031e565b50620005ff565b3390565b602680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b602880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6910160405180910390a15050565b60005b600b54811015620003e257600d6040518060400160405280600854600e85600681106200035e57634e487b7160e01b600052603260045260246000fd5b01546200036c91906200056c565b8152602001600854601485600681106200039657634e487b7160e01b600052603260045260246000fd5b0154620003a491906200056c565b905281546001818101845560009384526020938490208351600290930201918255929091015191015580620003d981620005cb565b91505062000321565b50565b600183019183908215620004765791602002820160005b838211156200044257835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302620003fc565b8015620004745782816101000a81549063ffffffff021916905560040160208160030104928301926001030262000442565b505b50620004849291506200053c565b5090565b826006810192821562000476579160200282015b8281111562000476578251829061ffff169055916020019190600101906200049c565b828054620004cd906200058e565b90600052602060002090601f016020900481019282620004f1576000855562000476565b82601f106200050c57805160ff191683800117855562000476565b8280016001018555821562000476579182015b82811115620004765782518255916020019190600101906200051f565b5b808211156200048457600081556001016200053d565b60006020828403121562000565578081fd5b5051919050565b6000816000190483118215151615620005895762000589620005e9565b500290565b600181811c90821680620005a357607f821691505b60208210811415620005c557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620005e257620005e2620005e9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b613d0d806200060f6000396000f3fe608060405234801561001057600080fd5b50600436106104ac5760003560e01c806380ea5a831161026d578063a22cb46511610151578063ca0a9e3d116100ce578063ec51a17d11610092578063ec51a17d14610c0d578063ec55688914610c21578063f018525514610c34578063f2fde38b14610c3c578063f31bcc4114610c4f578063f851a44014610c6257600080fd5b8063ca0a9e3d14610b74578063cc06c35914610b87578063d1d26b2814610b90578063e3e7688a14610bbe578063e985e9c514610bd157600080fd5b8063b88d4fde11610115578063b88d4fde14610b20578063b9e1bbf914610b33578063c2d6ab7d14610b3b578063c2e8dd4a14610b4e578063c87b56dd14610b6157600080fd5b8063a22cb46514610aa8578063a2805b2414610abb578063a94ad69614610ace578063aa92492014610ae1578063b2376fe414610b0d57600080fd5b806393d0b354116101ea578063984027a7116101ae578063984027a714610a0b57806399926a9a14610a345780639a3be04014610a475780639d47207114610a5a5780639d6fac6f14610a6d578063a1b3d1ff14610a9557600080fd5b806393d0b354146109c1578063942eb8c3146109d457806395d89b41146109e757806396fe4288146109ef57806397107d6d146109f857600080fd5b806386481d401161023157806386481d401461091d5780638a834ff6146109305780638da5cb5b146109435780638ef10c2814610954578063920888e1146109a157600080fd5b806380ea5a83146108a45780638256c0a3146108b7578063837c8284146108ca57806384a55c20146108f5578063860998b81461091557600080fd5b8063313ce567116103945780634f6ccce71161031157806370a93b36116102d557806370a93b36146107e4578063715018a6146107f75780637538bcfd146107ff57806375829def1461082d5780637a5caab3146108405780637e5ea2821461084857600080fd5b80634f6ccce7146107625780636352211e14610775578063682fffaf146107885780636d3f450b1461079b57806370a08231146107d157600080fd5b80633a0ccef1116103585780633a0ccef1146106ea57806342842e0e14610715578063440372f814610728578063471a42941461073b5780634eb7d9111461074f57600080fd5b8063313ce5671461069f57806334f15bd7146106a85780633522043d146106bb578063378dc3dc146106ce57806338e514fe146106d757600080fd5b8063157c3cc81161042d5780631e5d9e1b116103f15780631e5d9e1b1461061e5780632369e9e31461063e57806323b872dd1461065e57806325ebda5b146106715780632f40faf7146106795780632f745c591461068c57600080fd5b8063157c3cc8146105b557806316dbf906146105c857806318160ddd146105db5780631d396252146105e35780631dd3a365146105f657600080fd5b80630ca1c5c9116104745780630ca1c5c9146105415780630d2176ed146105535780630e4d6205146105665780630faad0a21461058f578063143e7d56146105a257600080fd5b806301538868146104b157806301ffc9a7146104c657806306fdde03146104ee578063081812fc14610503578063095ea7b31461052e575b600080fd5b6104c46104bf36600461381e565b610c73565b005b6104d96104d4366004613863565b610d43565b60405190151581526020015b60405180910390f35b6104f6610d6e565b6040516104e59190613a77565b6105166105113660046138ce565b610e00565b6040516001600160a01b0390911681526020016104e5565b6104c461053c3660046137bf565b610e95565b6035545b6040519081526020016104e5565b6104c46105613660046137bf565b610fa6565b610545610574366004613671565b6001600160a01b031660009081526032602052604090205490565b61054561059d3660046138e6565b610fec565b6104c46105b036600461393b565b61107e565b6105456105c33660046138ce565b611230565b6104c46105d63660046138ce565b611247565b602a54610545565b6105456105f13660046138ce565b611276565b6106096106043660046138ce565b611286565b604080519283526020830191909152016104e5565b61054561062c366004613671565b602e6020526000908152604090205481565b61054561064c3660046138ce565b602d6020526000908152604090205481565b6104c461066c3660046136e1565b6112b4565b603654610545565b6106096106873660046138ce565b6112e5565b61054561069a3660046137bf565b611357565b61054560085481565b6104d96106b636600461381e565b61140f565b6104c46106c93660046137bf565b6114c7565b610545600c5481565b600754610516906001600160a01b031681565b6105456106f83660046137bf565b602f60209081526000928352604080842090915290825290205481565b6104c46107233660046136e1565b611538565b6104c46107363660046138ce565b611553565b6029546104d990600160a01b900460ff1681565b61054561075d3660046138ce565b611582565b6105456107703660046138ce565b6115e9565b6105166107833660046138ce565b611691565b6104c4610796366004613907565b611708565b6105456107a93660046137bf565b6001600160a01b03919091166000908152602f60209081526040808320938352929052205490565b6105456107df366004613671565b61175c565b6104c46107f23660046138e6565b6117e3565b6104c4611865565b6104d961080d3660046138e6565b600091825260316020908152604080842092845291905290205460ff1690565b6104c461083b366004613671565b61189b565b61060961193c565b61085b6108563660046138ce565b611965565b6040516104e59190815160ff168152602080830151908201526040808301516001600160a01b031690820152606080830151908201526080918201519181019190915260a00190565b6104c46108b23660046137ea565b6119eb565b6104c46108c53660046138e6565b611a3b565b6105456108d83660046137bf565b602c60209081526000928352604080842090915290825290205481565b6105456109033660046138ce565b6000908152602d602052604090205490565b603454610545565b61054561092b3660046138ce565b611ab0565b6104c461093e3660046137bf565b611afc565b6026546001600160a01b0316610516565b6109676109623660046138ce565b611b30565b6040805160ff909616865260208601949094526001600160a01b03909216928401929092526060830191909152608082015260a0016104e5565b6109b46109af366004613671565b611b7f565b6040516104e59190613a1a565b6105456109cf3660046137bf565b611beb565b6104c46109e2366004613671565b611c1c565b6104f6611c68565b610545600a5481565b6104c4610a06366004613671565b611c77565b610545610a19366004613671565b6001600160a01b03166000908152602e602052604090205490565b61085b610a423660046138ce565b611d0b565b610545610a553660046137bf565b611d43565b6104c4610a683660046137bf565b611e4e565b610a80610a7b3660046138ce565b611e94565b60405163ffffffff90911681526020016104e5565b6104c4610aa336600461389b565b611ec4565b6104c4610ab636600461378b565b611f01565b610545610ac93660046138ce565b611fc6565b6104c4610adc366004613966565b611fd6565b6104d9610aef366004613671565b6001600160a01b031660009081526033602052604090205460ff1690565b610609610b1b3660046138ce565b6120b1565b6104c4610b2e366004613721565b612113565b6104f661214b565b610545610b493660046138ce565b61215a565b6104c4610b5c366004613671565b6121bb565b6104f6610b6f3660046138ce565b612207565b6104c4610b8236600461378b565b612325565b610545600b5481565b6104d9610b9e3660046138e6565b603160209081526000928352604080842090915290825290205460ff1681565b600654610516906001600160a01b031681565b6104d9610bdf3660046136a9565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6029546104d990600160a81b900460ff1681565b602954610516906001600160a01b031681565b6104c461237a565b6104c4610c4a366004613671565b612404565b610545610c5d3660046138ce565b61249c565b6028546001600160a01b0316610516565b6029546001600160a01b03163314610ca65760405162461bcd60e51b8152600401610c9d90613b11565b60405180910390fd5b6000828152600260205260409020546001600160a01b0316610d1f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c9d565b60008281526030602090815260409091208251610d3e92840190613501565b505050565b60006001600160e01b0319821663780e9d6360e01b1480610d685750610d68826124ac565b92915050565b606060008054610d7d90613c2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610da990613c2a565b8015610df65780601f10610dcb57610100808354040283529160200191610df6565b820191906000526020600020905b815481529060010190602001808311610dd957829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610e795760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c9d565b506000908152600460205260409020546001600160a01b031690565b6000610ea082611691565b9050806001600160a01b0316836001600160a01b03161415610f0e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610c9d565b336001600160a01b0382161480610f2a5750610f2a8133610bdf565b610f9c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610c9d565b610d3e83836124fc565b6029546001600160a01b03163314610fd05760405162461bcd60e51b8152600401610c9d90613b11565b6001600160a01b039091166000908152602e6020526040902055565b600082610ffc5750601a54611069565b60998210156110435761103c611013836002613bdd565b601a856006811061103457634e487b7160e01b600052603260045260246000fd5b01549061256a565b9050611069565b6020836006811061106457634e487b7160e01b600052603260045260246000fd5b015490505b600854611077908290612576565b9392505050565b6026546001600160a01b031633146110a85760405162461bcd60e51b8152600401610c9d90613adc565b600b548311156110eb5760405162461bcd60e51b815260206004820152600e60248201526d13dd995c881b585e081b195d995b60921b6044820152606401610c9d565b6110f6600184613bfc565b600d5410156111405760405162461bcd60e51b81526020600482015260166024820152751059190819995948199c9bdb481b1bddc81b195d995b60521b6044820152606401610c9d565b61114b600184613bfc565b600d5414156111cd576040805180820190915291825260208201908152600d805460018101825560009190915291517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5600290930292830155517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb69091015550565b6040805180820190915282815260208101829052600d6111ee600186613bfc565b8154811061120c57634e487b7160e01b600052603260045260246000fd5b60009182526020918290208351600290920201908155910151600190910155505050565b601a816006811061124057600080fd5b0154905081565b6029546001600160a01b031633146112715760405162461bcd60e51b8152600401610c9d90613b11565b603555565b6014816006811061124057600080fd5b600d818154811061129657600080fd5b60009182526020909120600290910201805460019091015490915082565b6112be3382612582565b6112da5760405162461bcd60e51b8152600401610c9d90613b54565b610d3e838383612679565b600080600d838154811061130957634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160000154600d848154811061133c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001015491509150915091565b60006113628361175c565b82106113c45760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610c9d565b6001600160a01b0383166000908152602b602052604090208054839081106113fc57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6040516319045a2560e01b815260009073B1A13497D08d8764900546B5989E654A5c71c2d1906319045a259061144b9086908690600401613a5e565b60206040518083038186803b15801561146357600080fd5b505af4158015611477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149b919061368d565b6001600160a01b03166114b66028546001600160a01b031690565b6001600160a01b0316149392505050565b33600090815260326020526040902054156115195760405162461bcd60e51b815260206004820152601260248201527114d95d081d1bdad95b95549248199a5c9cdd60721b6044820152606401610c9d565b61153433838360405180602001604052806000815250612824565b5050565b610d3e83838360405180602001604052806000815250612113565b6029546001600160a01b0316331461157d5760405162461bcd60e51b8152600401610c9d90613b11565b603655565b6000610d68620151806115e3602a602d600087815260200190815260200160002054815481106115c257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600401544261256a90919063ffffffff16565b90612857565b60006115f4602a5490565b82106116575760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610c9d565b602a828154811061167857634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600101549050919050565b6000818152600260205260408120546001600160a01b031680610d685760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610c9d565b6029546001600160a01b031633146117325760405162461bcd60e51b8152600401610c9d90613b11565b60009283526031602090815260408085209385529290529120805460ff1916911515919091179055565b60006001600160a01b0382166117c75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610c9d565b506001600160a01b031660009081526003602052604090205490565b6029546001600160a01b0316331461180d5760405162461bcd60e51b8152600401610c9d90613b11565b6000828152602d6020526040902054602a8054839290811061183f57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201805460ff191660ff929092169190911790555050565b6026546001600160a01b0316331461188f5760405162461bcd60e51b8152600401610c9d90613adc565b6118996000612863565b565b6026546001600160a01b031633146118c55760405162461bcd60e51b8152600401610c9d90613adc565b6001600160a01b0381166119305760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642041646d696e3a206e65772061646d696e206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401610c9d565b611939816128b5565b50565b600854600e5460009182916119519190613bdd565b61195d60006001610fec565b915091509091565b61196d613585565b602a828154811061198e57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a0810182526005909302909101805460ff16835260018101549383019390935260028301546001600160a01b03169082015260038201546060820152600490910154608082015292915050565b6029546001600160a01b03163314611a155760405162461bcd60e51b8152600401610c9d90613b11565b6001600160a01b039092166000908152602f602090815260408083209383529290522055565b6029546001600160a01b03163314611a655760405162461bcd60e51b8152600401610c9d90613b11565b6000828152602d6020526040902054602a80548392908110611a9757634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600401819055505050565b6000818152602d6020526040812054602a80549091908110611ae257634e487b7160e01b600052603260045260246000fd5b600091825260209091206005909102015460ff1692915050565b6029546001600160a01b03163314611b265760405162461bcd60e51b8152600401610c9d90613b11565b6115348282612916565b602a8181548110611b4057600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015460ff909316945090926001600160a01b039091169185565b6001600160a01b0381166000908152602b6020908152604091829020805483518184028101840190945280845260609392830182828015611bdf57602002820191906000526020600020905b815481526020019060010190808311611bcb575b50505050509050919050565b602b6020528160005260406000208181548110611c0757600080fd5b90600052602060002001600091509150505481565b6029546001600160a01b03163314611c465760405162461bcd60e51b8152600401610c9d90613b11565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b606060018054610d7d90613c2a565b6026546001600160a01b03163314611ca15760405162461bcd60e51b8152600401610c9d90613adc565b6001600160a01b038116611ce95760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b6044820152606401610c9d565b602980546001600160a01b0319166001600160a01b0392909216919091179055565b611d13613585565b6000828152602d6020526040902054602a908154811061198e57634e487b7160e01b600052603260045260246000fd5b600080611d4f8461175c565b90506000611d5b613585565b60005b83811015611e43576001600160a01b0387166000908152602b60205260408120805483908110611d9e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050611db481611d0b565b9250611dbf81611691565b6001600160a01b031683604001516001600160a01b0316148015611de65750825160ff1684105b15611df757825160ff169350611e30565b611e048762015180613bdd565b6060840151611e139042613bfc565b118015611e235750825160ff1684105b15611e3057825160ff1693505b5080611e3b81613c65565b915050611d5e565b509095945050505050565b6029546001600160a01b03163314611e785760405162461bcd60e51b8152600401610c9d90613b11565b6001600160a01b03909116600090815260326020526040902055565b60098160058110611ea457600080fd5b60089182820401919006600402915054906101000a900463ffffffff1681565b6029546001600160a01b03163314611eee5760405162461bcd60e51b8152600401610c9d90613b11565b8051611534906037906020840190613501565b6001600160a01b038216331415611f5a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c9d565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6020816006811061124057600080fd5b6026546001600160a01b031633146120005760405162461bcd60e51b8152600401610c9d90613adc565b60018211801561201b575061201760056001612930565b8211155b6120585760405162461bcd60e51b815260206004820152600e60248201526d13dd995c881b585e081b195d995b60921b6044820152606401610c9d565b806009612066600285613bfc565b6005811061208457634e487b7160e01b600052603260045260246000fd5b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050565b60008060006120bf84611ab0565b905060006120cc85611582565b9050600854600e83600681106120f257634e487b7160e01b600052603260045260246000fd5b01546120fe9190613bdd565b6121088383610fec565b935093505050915091565b61211d3383612582565b6121395760405162461bcd60e51b8152600401610c9d90613b54565b61214584848484612824565b50505050565b606060378054610d7d90613c2a565b6000610d68620151806115e3602a602d6000878152602001908152602001600020548154811061219a57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600301544261256a90919063ffffffff16565b6029546001600160a01b031633146121e55760405162461bcd60e51b8152600401610c9d90613b11565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600260205260409020546060906001600160a01b03166122865760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610c9d565b6000828152603060205260408120805461229f90613c2a565b80601f01602080910402602001604051908101604052809291908181526020018280546122cb90613c2a565b80156123185780601f106122ed57610100808354040283529160200191612318565b820191906000526020600020905b8154815290600101906020018083116122fb57829003601f168201915b5093979650505050505050565b6029546001600160a01b0316331461234f5760405162461bcd60e51b8152600401610c9d90613b11565b6001600160a01b03919091166000908152603360205260409020805460ff1916911515919091179055565b6028546001600160a01b031633146123e35760405162461bcd60e51b815260206004820152602660248201527f496e76616c69642041646d696e3a2063616c6c6572206973206e6f74207468656044820152651030b236b4b760d11b6064820152608401610c9d565b6029805460ff60a01b198116600160a01b9182900460ff1615909102179055565b6026546001600160a01b0316331461242e5760405162461bcd60e51b8152600401610c9d90613adc565b6001600160a01b0381166124935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c9d565b61193981612863565b600e816006811061124057600080fd5b60006001600160e01b031982166380ac58cd60e01b14806124dd57506001600160e01b03198216635b5e139f60e01b145b80610d6857506301ffc9a760e01b6001600160e01b0319831614610d68565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061253182611691565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110778284613bfc565b60006110778284613bdd565b6000818152600260205260408120546001600160a01b03166125fb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c9d565b600061260683611691565b9050806001600160a01b0316846001600160a01b031614806126415750836001600160a01b031661263684610e00565b6001600160a01b0316145b8061267157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661268c82611691565b6001600160a01b0316146126f45760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610c9d565b6001600160a01b0382166127565760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c9d565b61276183838361293c565b61276c6000826124fc565b6001600160a01b0383166000908152600360205260408120805460019290612795908490613bfc565b90915550506001600160a01b03821660009081526003602052604081208054600192906127c3908490613ba5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61282f848484612679565b61283b84848484612ae3565b6121455760405162461bcd60e51b8152600401610c9d90613a8a565b60006110778284613bbd565b602680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b602880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6910160405180910390a15050565b611534828260405180602001604052806000815250612bf0565b60006110778284613ba5565b6001600160a01b038316612959576129548183612c23565b612986565b816001600160a01b0316836001600160a01b0316146129865761297c8382612e9c565b6129868382612fe8565b6001600160a01b03821661299d57610d3e81613170565b826001600160a01b0316826001600160a01b031614610d3e576129c082826132d5565b6129ca8282613329565b6000818152602d6020526040902054602a805442929081106129fc57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016003018190555042602a602d60008481526020019081526020016000205481548110612a4657634e487b7160e01b600052603260045260246000fd5b60009182526020808320600460059093020191909101929092556001600160a01b0384168152602f82526040808220848352602d909352812054602a80546001949392908110612aa657634e487b7160e01b600052603260045260246000fd5b6000918252602080832060059092029091015460ff16835282019290925260400181208054909190612ad9908490613ba5565b9091555050505050565b60006001600160a01b0384163b15612be557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612b279033908990889088906004016139dd565b602060405180830381600087803b158015612b4157600080fd5b505af1925050508015612b71575060408051601f3d908101601f19168201909252612b6e9181019061387f565b60015b612bcb573d808015612b9f576040519150601f19603f3d011682016040523d82523d6000602084013e612ba4565b606091505b508051612bc35760405162461bcd60e51b8152600401610c9d90613a8a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612671565b506001949350505050565b612bfa83836133b3565b612c076000848484612ae3565b610d3e5760405162461bcd60e51b8152600401610c9d90613a8a565b602a546000838152602d602052604090205581612d6b576040805160a081018252600b5460ff9081168252602082019485526001600160a01b03938416928201928352426060830181815260808401918252602a805460018101825560009190915293517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d26005909502948501805460ff1916919094161790925594517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d383015591517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d4820180546001600160a01b0319169190941617909255517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d582015590517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d690910155565b6040805160a081018252600a5460ff9081168252602082019485526001600160a01b03938416928201928352426060830181815260808401918252602a805460018101825560009190915293517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d26005909502948501805460ff1916919094161790925594517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d383015591517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d4820180546001600160a01b0319169190941617909255517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d582015590517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d690910155565b6001600160a01b0382166000908152602b6020526040812054612ec190600190613bfc565b6001600160a01b0384166000818152602c60209081526040808320878452825280832054938352602b90915281208054939450919290919084908110612f1757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080602b6000876001600160a01b03166001600160a01b031681526020019081526020016000208381548110612f6957634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101929092556001600160a01b038716808252602c835260408083208584528452808320869055878352808320839055908252602b90925220805480612fcb57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590555050505050565b6000818152602d6020526040812054602a8054909190811061301a57634e487b7160e01b600052603260045260246000fd5b600091825260208083206005909202909101546001600160a01b0386168352602e90915260409091205460ff909116915081111561308b5760405162461bcd60e51b815260206004820152600e60248201526d098caeccad840deeccae440dac2f60931b6044820152606401610c9d565b6001600160a01b0383166000908152602f6020908152604080832084845290915281208054600192906130bf908490613bfc565b909155506130ce90508361175c565b6130ee5750506001600160a01b03166000908152602e6020526040812055565b6001600160a01b0383166000908152602e6020526040902054811415610d3e575b8015610d3e576001600160a01b0383166000908152602f602090815260408083208484529091529020541561315e576001600160a01b0383166000908152602e60205260409020819055505050565b8061316881613c13565b91505061310f565b602a5460009061318290600190613bfc565b6000838152602d6020526040812054602a80549394509092849081106131b857634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201905080602a83815481106131ea57634e487b7160e01b600052603260045260246000fd5b600091825260208083208454600590930201805460ff191660ff9093169290921782556001808501548184015560028086015490840180546001600160a01b0319166001600160a01b039092169190911790556003808601549084015560049485015494909201939093558301548152602d9091526040808220849055858252812055602a80548061328c57634e487b7160e01b600052603160045260246000fd5b600082815260208120600560001990930192830201805460ff19168155600181018290556002810180546001600160a01b03191690556003810182905560040155905550505050565b60006132e08361175c565b6001600160a01b039093166000818152602b60209081526040808320805460018101825590845282842001869055928252602c8152828220948252939093529091209190915550565b6000818152602d6020526040812054602a8054909190811061335b57634e487b7160e01b600052603260045260246000fd5b600091825260208083206005909202909101546001600160a01b0386168352602e90915260409091205460ff9091169150811115610d3e576001600160a01b0383166000908152602e60205260409020819055505050565b6001600160a01b0382166134095760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c9d565b6000818152600260205260409020546001600160a01b03161561346e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c9d565b61347a6000838361293c565b6001600160a01b03821660009081526003602052604081208054600192906134a3908490613ba5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461350d90613c2a565b90600052602060002090601f01602090048101928261352f5760008555613575565b82601f1061354857805160ff1916838001178555613575565b82800160010185558215613575579182015b8281111561357557825182559160200191906001019061355a565b506135819291506135c0565b5090565b6040518060a00160405280600060ff1681526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b5b8082111561358157600081556001016135c1565b803580151581146135e557600080fd5b919050565b600082601f8301126135fa578081fd5b813567ffffffffffffffff8082111561361557613615613c96565b604051601f8301601f19908116603f0116810190828211818310171561363d5761363d613c96565b81604052838152866020858801011115613655578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215613682578081fd5b813561107781613cac565b60006020828403121561369e578081fd5b815161107781613cac565b600080604083850312156136bb578081fd5b82356136c681613cac565b915060208301356136d681613cac565b809150509250929050565b6000806000606084860312156136f5578081fd5b833561370081613cac565b9250602084013561371081613cac565b929592945050506040919091013590565b60008060008060808587031215613736578081fd5b843561374181613cac565b9350602085013561375181613cac565b925060408501359150606085013567ffffffffffffffff811115613773578182fd5b61377f878288016135ea565b91505092959194509250565b6000806040838503121561379d578182fd5b82356137a881613cac565b91506137b6602084016135d5565b90509250929050565b600080604083850312156137d1578182fd5b82356137dc81613cac565b946020939093013593505050565b6000806000606084860312156137fe578283fd5b833561380981613cac565b95602085013595506040909401359392505050565b60008060408385031215613830578182fd5b82359150602083013567ffffffffffffffff81111561384d578182fd5b613859858286016135ea565b9150509250929050565b600060208284031215613874578081fd5b813561107781613cc1565b600060208284031215613890578081fd5b815161107781613cc1565b6000602082840312156138ac578081fd5b813567ffffffffffffffff8111156138c2578182fd5b612671848285016135ea565b6000602082840312156138df578081fd5b5035919050565b600080604083850312156138f8578182fd5b50508035926020909101359150565b60008060006060848603121561391b578081fd5b8335925060208401359150613932604085016135d5565b90509250925092565b60008060006060848603121561394f578081fd5b505081359360208301359350604090920135919050565b60008060408385031215613978578182fd5b82359150602083013563ffffffff811681146136d6578182fd5b60008151808452815b818110156139b75760208185018101518683018201520161399b565b818111156139c85782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613a1090830184613992565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613a5257835183529284019291840191600101613a36565b50909695505050505050565b8281526040602082015260006126716040830184613992565b6020815260006110776020830184613992565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526023908201527f4e6f74205065726d69743a2063616c6c6572206973206e6f74207468652070726040820152626f787960e81b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115613bb857613bb8613c80565b500190565b600082613bd857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613bf757613bf7613c80565b500290565b600082821015613c0e57613c0e613c80565b500390565b600081613c2257613c22613c80565b506000190190565b600181811c90821680613c3e57607f821691505b60208210811415613c5f57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613c7957613c79613c80565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461193957600080fd5b6001600160e01b03198116811461193957600080fdfea26469706673582212209678049a0cc5a5cd7b56fe049d470e4b0044f70a602c3ec994c3d0838076a6c864736f6c63430008040033",
  "deployedBytecode": "$5375cb35093987ecf92e89395ecd702213$__906319045a259061144b9086908690600401613a5e565b60206040518083038186803b15801561146357600080fd5b505af4158015611477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149b919061368d565b6001600160a01b03166114b66028546001600160a01b031690565b6001600160a01b0316149392505050565b33600090815260326020526040902054156115195760405162461bcd60e51b815260206004820152601260248201527114d95d081d1bdad95b95549248199a5c9cdd60721b6044820152606401610c9d565b61153433838360405180602001604052806000815250612824565b5050565b610d3e83838360405180602001604052806000815250612113565b6029546001600160a01b0316331461157d5760405162461bcd60e51b8152600401610c9d90613b11565b603655565b6000610d68620151806115e3602a602d600087815260200190815260200160002054815481106115c257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600401544261256a90919063ffffffff16565b90612857565b60006115f4602a5490565b82106116575760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610c9d565b602a828154811061167857634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600101549050919050565b6000818152600260205260408120546001600160a01b031680610d685760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610c9d565b6029546001600160a01b031633146117325760405162461bcd60e51b8152600401610c9d90613b11565b60009283526031602090815260408085209385529290529120805460ff1916911515919091179055565b60006001600160a01b0382166117c75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610c9d565b506001600160a01b031660009081526003602052604090205490565b6029546001600160a01b0316331461180d5760405162461bcd60e51b8152600401610c9d90613b11565b6000828152602d6020526040902054602a8054839290811061183f57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201805460ff191660ff929092169190911790555050565b6026546001600160a01b0316331461188f5760405162461bcd60e51b8152600401610c9d90613adc565b6118996000612863565b565b6026546001600160a01b031633146118c55760405162461bcd60e51b8152600401610c9d90613adc565b6001600160a01b0381166119305760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642041646d696e3a206e65772061646d696e206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401610c9d565b611939816128b5565b50565b600854600e5460009182916119519190613bdd565b61195d60006001610fec565b915091509091565b61196d613585565b602a828154811061198e57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a0810182526005909302909101805460ff16835260018101549383019390935260028301546001600160a01b03169082015260038201546060820152600490910154608082015292915050565b6029546001600160a01b03163314611a155760405162461bcd60e51b8152600401610c9d90613b11565b6001600160a01b039092166000908152602f602090815260408083209383529290522055565b6029546001600160a01b03163314611a655760405162461bcd60e51b8152600401610c9d90613b11565b6000828152602d6020526040902054602a80548392908110611a9757634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600401819055505050565b6000818152602d6020526040812054602a80549091908110611ae257634e487b7160e01b600052603260045260246000fd5b600091825260209091206005909102015460ff1692915050565b6029546001600160a01b03163314611b265760405162461bcd60e51b8152600401610c9d90613b11565b6115348282612916565b602a8181548110611b4057600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015460ff909316945090926001600160a01b039091169185565b6001600160a01b0381166000908152602b6020908152604091829020805483518184028101840190945280845260609392830182828015611bdf57602002820191906000526020600020905b815481526020019060010190808311611bcb575b50505050509050919050565b602b6020528160005260406000208181548110611c0757600080fd5b90600052602060002001600091509150505481565b6029546001600160a01b03163314611c465760405162461bcd60e51b8152600401610c9d90613b11565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b606060018054610d7d90613c2a565b6026546001600160a01b03163314611ca15760405162461bcd60e51b8152600401610c9d90613adc565b6001600160a01b038116611ce95760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964204164647265737360881b6044820152606401610c9d565b602980546001600160a01b0319166001600160a01b0392909216919091179055565b611d13613585565b6000828152602d6020526040902054602a908154811061198e57634e487b7160e01b600052603260045260246000fd5b600080611d4f8461175c565b90506000611d5b613585565b60005b83811015611e43576001600160a01b0387166000908152602b60205260408120805483908110611d9e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050611db481611d0b565b9250611dbf81611691565b6001600160a01b031683604001516001600160a01b0316148015611de65750825160ff1684105b15611df757825160ff169350611e30565b611e048762015180613bdd565b6060840151611e139042613bfc565b118015611e235750825160ff1684105b15611e3057825160ff1693505b5080611e3b81613c65565b915050611d5e565b509095945050505050565b6029546001600160a01b03163314611e785760405162461bcd60e51b8152600401610c9d90613b11565b6001600160a01b03909116600090815260326020526040902055565b60098160058110611ea457600080fd5b60089182820401919006600402915054906101000a900463ffffffff1681565b6029546001600160a01b03163314611eee5760405162461bcd60e51b8152600401610c9d90613b11565b8051611534906037906020840190613501565b6001600160a01b038216331415611f5a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c9d565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6020816006811061124057600080fd5b6026546001600160a01b031633146120005760405162461bcd60e51b8152600401610c9d90613adc565b60018211801561201b575061201760056001612930565b8211155b6120585760405162461bcd60e51b815260206004820152600e60248201526d13dd995c881b585e081b195d995b60921b6044820152606401610c9d565b806009612066600285613bfc565b6005811061208457634e487b7160e01b600052603260045260246000fd5b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050565b60008060006120bf84611ab0565b905060006120cc85611582565b9050600854600e83600681106120f257634e487b7160e01b600052603260045260246000fd5b01546120fe9190613bdd565b6121088383610fec565b935093505050915091565b61211d3383612582565b6121395760405162461bcd60e51b8152600401610c9d90613b54565b61214584848484612824565b50505050565b606060378054610d7d90613c2a565b6000610d68620151806115e3602a602d6000878152602001908152602001600020548154811061219a57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600301544261256a90919063ffffffff16565b6029546001600160a01b031633146121e55760405162461bcd60e51b8152600401610c9d90613b11565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600260205260409020546060906001600160a01b03166122865760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610c9d565b6000828152603060205260408120805461229f90613c2a565b80601f01602080910402602001604051908101604052809291908181526020018280546122cb90613c2a565b80156123185780601f106122ed57610100808354040283529160200191612318565b820191906000526020600020905b8154815290600101906020018083116122fb57829003601f168201915b5093979650505050505050565b6029546001600160a01b0316331461234f5760405162461bcd60e51b8152600401610c9d90613b11565b6001600160a01b03919091166000908152603360205260409020805460ff1916911515919091179055565b6028546001600160a01b031633146123e35760405162461bcd60e51b815260206004820152602660248201527f496e76616c69642041646d696e3a2063616c6c6572206973206e6f74207468656044820152651030b236b4b760d11b6064820152608401610c9d565b6029805460ff60a01b198116600160a01b9182900460ff1615909102179055565b6026546001600160a01b0316331461242e5760405162461bcd60e51b8152600401610c9d90613adc565b6001600160a01b0381166124935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c9d565b61193981612863565b600e816006811061124057600080fd5b60006001600160e01b031982166380ac58cd60e01b14806124dd57506001600160e01b03198216635b5e139f60e01b145b80610d6857506301ffc9a760e01b6001600160e01b0319831614610d68565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061253182611691565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110778284613bfc565b60006110778284613bdd565b6000818152600260205260408120546001600160a01b03166125fb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c9d565b600061260683611691565b9050806001600160a01b0316846001600160a01b031614806126415750836001600160a01b031661263684610e00565b6001600160a01b0316145b8061267157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661268c82611691565b6001600160a01b0316146126f45760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610c9d565b6001600160a01b0382166127565760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c9d565b61276183838361293c565b61276c6000826124fc565b6001600160a01b0383166000908152600360205260408120805460019290612795908490613bfc565b90915550506001600160a01b03821660009081526003602052604081208054600192906127c3908490613ba5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61282f848484612679565b61283b84848484612ae3565b6121455760405162461bcd60e51b8152600401610c9d90613a8a565b60006110778284613bbd565b602680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b602880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6910160405180910390a15050565b611534828260405180602001604052806000815250612bf0565b60006110778284613ba5565b6001600160a01b038316612959576129548183612c23565b612986565b816001600160a01b0316836001600160a01b0316146129865761297c8382612e9c565b6129868382612fe8565b6001600160a01b03821661299d57610d3e81613170565b826001600160a01b0316826001600160a01b031614610d3e576129c082826132d5565b6129ca8282613329565b6000818152602d6020526040902054602a805442929081106129fc57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016003018190555042602a602d60008481526020019081526020016000205481548110612a4657634e487b7160e01b600052603260045260246000fd5b60009182526020808320600460059093020191909101929092556001600160a01b0384168152602f82526040808220848352602d909352812054602a80546001949392908110612aa657634e487b7160e01b600052603260045260246000fd5b6000918252602080832060059092029091015460ff16835282019290925260400181208054909190612ad9908490613ba5565b9091555050505050565b60006001600160a01b0384163b15612be557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612b279033908990889088906004016139dd565b602060405180830381600087803b158015612b4157600080fd5b505af1925050508015612b71575060408051601f3d908101601f19168201909252612b6e9181019061387f565b60015b612bcb573d808015612b9f576040519150601f19603f3d011682016040523d82523d6000602084013e612ba4565b606091505b508051612bc35760405162461bcd60e51b8152600401610c9d90613a8a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612671565b506001949350505050565b612bfa83836133b3565b612c076000848484612ae3565b610d3e5760405162461bcd60e51b8152600401610c9d90613a8a565b602a546000838152602d602052604090205581612d6b576040805160a081018252600b5460ff9081168252602082019485526001600160a01b03938416928201928352426060830181815260808401918252602a805460018101825560009190915293517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d26005909502948501805460ff1916919094161790925594517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d383015591517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d4820180546001600160a01b0319169190941617909255517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d582015590517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d690910155565b6040805160a081018252600a5460ff9081168252602082019485526001600160a01b03938416928201928352426060830181815260808401918252602a805460018101825560009190915293517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d26005909502948501805460ff1916919094161790925594517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d383015591517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d4820180546001600160a01b0319169190941617909255517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d582015590517fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d690910155565b6001600160a01b0382166000908152602b6020526040812054612ec190600190613bfc565b6001600160a01b0384166000818152602c60209081526040808320878452825280832054938352602b90915281208054939450919290919084908110612f1757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080602b6000876001600160a01b03166001600160a01b031681526020019081526020016000208381548110612f6957634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101929092556001600160a01b038716808252602c835260408083208584528452808320869055878352808320839055908252602b90925220805480612fcb57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590555050505050565b6000818152602d6020526040812054602a8054909190811061301a57634e487b7160e01b600052603260045260246000fd5b600091825260208083206005909202909101546001600160a01b0386168352602e90915260409091205460ff909116915081111561308b5760405162461bcd60e51b815260206004820152600e60248201526d098caeccad840deeccae440dac2f60931b6044820152606401610c9d565b6001600160a01b0383166000908152602f6020908152604080832084845290915281208054600192906130bf908490613bfc565b909155506130ce90508361175c565b6130ee5750506001600160a01b03166000908152602e6020526040812055565b6001600160a01b0383166000908152602e6020526040902054811415610d3e575b8015610d3e576001600160a01b0383166000908152602f602090815260408083208484529091529020541561315e576001600160a01b0383166000908152602e60205260409020819055505050565b8061316881613c13565b91505061310f565b602a5460009061318290600190613bfc565b6000838152602d6020526040812054602a80549394509092849081106131b857634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201905080602a83815481106131ea57634e487b7160e01b600052603260045260246000fd5b600091825260208083208454600590930201805460ff191660ff9093169290921782556001808501548184015560028086015490840180546001600160a01b0319166001600160a01b039092169190911790556003808601549084015560049485015494909201939093558301548152602d9091526040808220849055858252812055602a80548061328c57634e487b7160e01b600052603160045260246000fd5b600082815260208120600560001990930192830201805460ff19168155600181018290556002810180546001600160a01b03191690556003810182905560040155905550505050565b60006132e08361175c565b6001600160a01b039093166000818152602b60209081526040808320805460018101825590845282842001869055928252602c8152828220948252939093529091209190915550565b6000818152602d6020526040812054602a8054909190811061335b57634e487b7160e01b600052603260045260246000fd5b600091825260208083206005909202909101546001600160a01b0386168352602e90915260409091205460ff9091169150811115610d3e576001600160a01b0383166000908152602e60205260409020819055505050565b6001600160a01b0382166134095760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c9d565b6000818152600260205260409020546001600160a01b03161561346e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c9d565b61347a6000838361293c565b6001600160a01b03821660009081526003602052604081208054600192906134a3908490613ba5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461350d90613c2a565b90600052602060002090601f01602090048101928261352f5760008555613575565b82601f1061354857805160ff1916838001178555613575565b82800160010185558215613575579182015b8281111561357557825182559160200191906001019061355a565b506135819291506135c0565b5090565b6040518060a00160405280600060ff1681526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b5b8082111561358157600081556001016135c1565b803580151581146135e557600080fd5b919050565b600082601f8301126135fa578081fd5b813567ffffffffffffffff8082111561361557613615613c96565b604051601f8301601f19908116603f0116810190828211818310171561363d5761363d613c96565b81604052838152866020858801011115613655578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215613682578081fd5b813561107781613cac565b60006020828403121561369e578081fd5b815161107781613cac565b600080604083850312156136bb578081fd5b82356136c681613cac565b915060208301356136d681613cac565b809150509250929050565b6000806000606084860312156136f5578081fd5b833561370081613cac565b9250602084013561371081613cac565b929592945050506040919091013590565b60008060008060808587031215613736578081fd5b843561374181613cac565b9350602085013561375181613cac565b925060408501359150606085013567ffffffffffffffff811115613773578182fd5b61377f878288016135ea565b91505092959194509250565b6000806040838503121561379d578182fd5b82356137a881613cac565b91506137b6602084016135d5565b90509250929050565b600080604083850312156137d1578182fd5b82356137dc81613cac565b946020939093013593505050565b6000806000606084860312156137fe578283fd5b833561380981613cac565b95602085013595506040909401359392505050565b60008060408385031215613830578182fd5b82359150602083013567ffffffffffffffff81111561384d578182fd5b613859858286016135ea565b9150509250929050565b600060208284031215613874578081fd5b813561107781613cc1565b600060208284031215613890578081fd5b815161107781613cc1565b6000602082840312156138ac578081fd5b813567ffffffffffffffff8111156138c2578182fd5b612671848285016135ea565b6000602082840312156138df578081fd5b5035919050565b600080604083850312156138f8578182fd5b50508035926020909101359150565b60008060006060848603121561391b578081fd5b8335925060208401359150613932604085016135d5565b90509250925092565b60008060006060848603121561394f578081fd5b505081359360208301359350604090920135919050565b60008060408385031215613978578182fd5b82359150602083013563ffffffff811681146136d6578182fd5b60008151808452815b818110156139b75760208185018101518683018201520161399b565b818111156139c85782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613a1090830184613992565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613a5257835183529284019291840191600101613a36565b50909695505050505050565b8281526040602082015260006126716040830184613992565b6020815260006110776020830184613992565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526023908201527f4e6f74205065726d69743a2063616c6c6572206973206e6f74207468652070726040820152626f787960e81b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115613bb857613bb8613c80565b500190565b600082613bd857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613bf757613bf7613c80565b500290565b600082821015613c0e57613c0e613c80565b500390565b600081613c2257613c22613c80565b506000190190565b600181811c90821680613c3e57607f821691505b60208210811415613c5f57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613c7957613c79613c80565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461193957600080fd5b6001600160e01b03198116811461193957600080fdfea26469706673582212209678049a0cc5a5cd7b56fe049d470e4b0044f70a602c3ec994c3d0838076a6c864736f6c63430008040033",
  "libraries": {
    "Sig": "0xB1A13497D08d8764900546B5989E654A5c71c2d1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "admin()": {
        "details": "Returns the address of the current admin."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setLevelUpFee(uint256,uint256,uint256)": {
        "details": "Updates the level up fee as well as mint fee. Can only  be called by the Admin address. todo: 可设置maxLevel todo: 加maxLevel限制条件 todo：加接口获取铸造或升级的费用"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferAdmin(address)": {
        "details": "Transfers ownership of the contract to a new account (`newAdmin`). Can only be called by the current admin."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "maxLevelOfOwner": {
        "details": "A mapping from Voyager to the max level of the Voyager. "
      },
      "tokenLevelCount": {
        "details": "A mapping from owner to token amount of each level. "
      },
      "voyagers": {
        "details": "An array containing the Voyager struct for all Voyagers in existence. The ID of each Voyager is actually an index into this array."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cooldowns(uint256)": {
        "notice": "不同等级升级的时间间隔,最大cooldowns是7天"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1196,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1198,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1202,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1206,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1210,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1216,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 10774,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "dgtAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10776,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "dspAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10781,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "decimals",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 10823,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "cooldowns",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint32)5_storage"
      },
      {
        "astId": 10826,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "minLevel",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 10828,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "maxLevel",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10831,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "initialSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10835,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "levelUpFees",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(FeeComponent)10786_storage)dyn_storage"
      },
      {
        "astId": 10846,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "levelUpDGT",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)6_storage"
      },
      {
        "astId": 10857,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "levelUpDSP",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_uint256)6_storage"
      },
      {
        "astId": 10868,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "levelUpDSPParam1",
        "offset": 0,
        "slot": "26",
        "type": "t_array(t_uint256)6_storage"
      },
      {
        "astId": 10879,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "levelUpDSPParam2",
        "offset": 0,
        "slot": "32",
        "type": "t_array(t_uint256)6_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_owner",
        "offset": 0,
        "slot": "38",
        "type": "t_address"
      },
      {
        "astId": 206,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_status",
        "offset": 0,
        "slot": "39",
        "type": "t_uint256"
      },
      {
        "astId": 10498,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_admin",
        "offset": 0,
        "slot": "40",
        "type": "t_address"
      },
      {
        "astId": 10500,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "proxy",
        "offset": 0,
        "slot": "41",
        "type": "t_address"
      },
      {
        "astId": 10503,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "mintIsActive",
        "offset": 20,
        "slot": "41",
        "type": "t_bool"
      },
      {
        "astId": 10506,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "mineIsActive",
        "offset": 21,
        "slot": "41",
        "type": "t_bool"
      },
      {
        "astId": 12970,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "voyagers",
        "offset": 0,
        "slot": "42",
        "type": "t_array(t_struct(Voyager)10797_storage)dyn_storage"
      },
      {
        "astId": 12975,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "ownedVoyagers",
        "offset": 0,
        "slot": "43",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 12981,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "ownedVoyagersIndex",
        "offset": 0,
        "slot": "44",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 12985,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "allVoyagersIndex",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12990,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "maxLevelOfOwner",
        "offset": 0,
        "slot": "46",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12997,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "tokenLevelCount",
        "offset": 0,
        "slot": "47",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 13001,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "48",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 13007,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "setByOwner",
        "offset": 0,
        "slot": "49",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 13011,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_tokenIDWithoutURI",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13015,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_expiredWhitelist",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13018,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_maxWhitelisted",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 13020,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_totalMinted",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 13022,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_whitelistExpired",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 13024,
        "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
        "label": "_token0URI",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(FeeComponent)10786_storage)dyn_storage": {
        "base": "t_struct(FeeComponent)10786_storage",
        "encoding": "dynamic_array",
        "label": "struct BaseStorage.FeeComponent[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Voyager)10797_storage)dyn_storage": {
        "base": "t_struct(Voyager)10797_storage",
        "encoding": "dynamic_array",
        "label": "struct BaseStorage.Voyager[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)6_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[6]",
        "numberOfBytes": "192"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)5_storage": {
        "base": "t_uint32",
        "encoding": "inplace",
        "label": "uint32[5]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FeeComponent)10786_storage": {
        "encoding": "inplace",
        "label": "struct BaseStorage.FeeComponent",
        "members": [
          {
            "astId": 10783,
            "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
            "label": "dgt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10785,
            "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
            "label": "dsp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voyager)10797_storage": {
        "encoding": "inplace",
        "label": "struct BaseStorage.Voyager",
        "members": [
          {
            "astId": 10788,
            "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10790,
            "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10792,
            "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
            "label": "minter",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 10794,
            "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
            "label": "startHoldingTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10796,
            "contract": "contracts/voyager/VoyagerStorage.sol:VoyagerStorage",
            "label": "levelStartHoldingTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}