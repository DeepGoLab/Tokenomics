{
  "language": "Solidity",
  "sources": {
    "contracts/dsp/DeepSeaPlankton.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./HasMinters.sol\";\n\n// interface IERC20Detailed {\n//   function name() external view returns (string memory _name);\n//   function symbol() external view returns (string memory _symbol);\n//   function decimals() external view returns (uint8 _decimals);\n// }\n\ncontract DeepSeaPlankton is ERC20Burnable, HasMinters, ReentrancyGuard {\n\n    constructor() ERC20(\"Deep Sea Plankton\", \"DSP\") {\n        address[] memory _minters = new address[](2);\n        _minters[0] = owner();\n        _minters[1] = admin;\n        addMinters(_minters);\n    }\n\n    mapping (address => uint) public mintable;\n\n    function mintByMinter(address _to, uint256 _value) public onlyMinter nonReentrant {\n        _mint(_to, _value);\n    }\n\n    // process: \n    // 0. 在后端完成可提取金额校验；\n    // 1. 在用户发起提取时，后端给用户添加可提取金额；\n    // 2. 后端给用户添加mint数量；\n    // 3. 用户完成mint，重置数值为0.\n\n    function addMintable(address _to, uint _value) public onlyMinter nonReentrant {\n        mintable[_to] += _value;\n    }\n\n    function mintByUser() public nonReentrant {\n        require(mintable[msg.sender] > 0, \"No mintable\");\n        // todo: 限制不同等级一次可mint的数量上限\n        _mint(msg.sender, mintable[msg.sender]);\n        mintable[msg.sender] = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/dsp/HasMinters.sol": {
      "content": "// File: access/HasMinters.sol\n\npragma solidity ^0.8.0;\n\nimport \"./HasAdmin.sol\";\n\ncontract HasMinters is HasAdmin {\n  event MinterAdded(address indexed _minter);\n  event MinterRemoved(address indexed _minter);\n\n  address[] public minters;\n  mapping (address => bool) public minter;\n\n  modifier onlyMinter {\n    require(minter[msg.sender]);\n    _;\n  }\n\n  function addMinters(address[] memory _addedMinters) public onlyOwner {\n    address _minter;\n\n    for (uint256 i = 0; i < _addedMinters.length; i++) {\n      _minter = _addedMinters[i];\n\n      if (!minter[_minter]) {\n        minters.push(_minter);\n        minter[_minter] = true;\n        emit MinterAdded(_minter);\n      }\n    }\n  }\n\n  function removeMinters(address[] memory _removedMinters) public onlyOwner {\n    address _minter;\n\n    for (uint256 i = 0; i < _removedMinters.length; i++) {\n      _minter = _removedMinters[i];\n\n      if (minter[_minter]) {\n        minter[_minter] = false;\n        emit MinterRemoved(_minter);\n      }\n    }\n\n    uint256 i = 0;\n\n    while (i < minters.length) {\n      _minter = minters[i];\n\n      if (!minter[_minter]) {\n        minters[i] = minters[minters.length - 1];\n        delete minters[minters.length - 1];\n      } else {\n        i++;\n      }\n    }\n  }\n\n  function isMinter(address _addr) public view returns (bool) {\n    return minter[_addr];\n  }\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/dsp/HasAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract HasAdmin is Ownable {\n  event AdminChanged(address indexed _oldAdmin, address indexed _newAdmin);\n  event AdminRemoved(address indexed _oldAdmin);\n\n  address public admin;\n\n  modifier onlyAdmin {\n    require(msg.sender == admin, \"HasAdmin: not admin\");\n    _;\n  }\n\n  constructor() {\n    admin = msg.sender;\n    emit AdminChanged(address(0), admin);\n  }\n\n  function changeAdmin(address _newAdmin) external onlyOwner {\n    require(_newAdmin != address(0), \"HasAdmin: new admin is the zero address\");\n    emit AdminChanged(admin, _newAdmin);\n    admin = _newAdmin;\n  }\n\n  function removeAdmin() external onlyOwner {\n    emit AdminRemoved(admin);\n    admin = address(0);\n  }\n}\n"
    },
    "contracts/voyager/Voyager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./VoyagerProxy.sol\";\nimport \"./VoyagerLogic.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"../dsp/DeepSeaPlankton.sol\";\n\ncontract Voyager is VoyagerProxy, Pausable {\n    using SafeMath for uint;\n    using SafeERC20 for IERC20;\n    // VoyagerLogic public voyagerLogic;\n    // VoyagerStorage public vS\n    DeepSeaPlankton public dsp;\n\n    constructor(\n        address _voyagerStorage\n        // address _voyagerLogic\n    )\n    {\n        // require(_DGTToken != address(0) && _DGTBeneficiary != address(0) &&\n        //         _ips != address(0) && _gps != address(0) &&\n        //         _lps != address(0) && _vts != address(0), \"Invalid Address\");\n        require(_voyagerStorage != address(0) , \"Invalid Address\");\n\n        // DGTToken = _DGTToken;\n        // DGTBeneficiary = _DGTBeneficiary;\n        // voyagerLogic = VoyagerLogic(_voyagerLogic);\n        vS = VoyagerStorage(_voyagerStorage);\n    }\n\n    function initialize(\n        address _voyagerLogic\n    )\n        external onlyOwner\n    {\n        require(!initialized, \"Already Initialized\");\n        setUpgrade(\"0.0.1\", _voyagerLogic);\n        executeUpgrade();\n        initialized = true;\n    }\n\n    function setPause(\n    )\n        external onlyOwner\n    {\n        _pause();\n        emit Paused(msg.sender);\n    }\n\n    function unPause(\n    )\n        external onlyOwner\n    {\n        _unpause();\n        emit Unpaused(msg.sender);\n    }\n\n    // todo: using delegatecall fufill functions \n    function _mintVoyagerByWhitelist(\n        bytes memory signature\n    ) external sigVerified(signature) activeMint whenNotPaused nonReentrant {\n        // (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\n        //     \"mintVoyagerByWhitelist(bytes)\")),\n        //     signature));\n        // require(status, \"mintVoyagerByWhitelist Failed\");\n    }\n    \n    //   \n    function mintVoyagerByWhitelist(\n        bytes memory signature\n    ) public sigVerified(signature) activeMint whenNotPaused nonReentrant\n    {\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \"Set tokenURI first\");\n        // require(verified(Sig.ethSignedHash(msg.sender), signature), \"Not verified\");\n        require(!vS.getExpiredWhitelist(msg.sender), \"Expired\");\n        // require(mintIsActive, \"Unactive to mint Voyager\");\n        require(vS.getWhitelistExpired().add(1) <= vS.getMaxWhitelisted(), \n                            \"Mint would exceed max supply of Voyagers\");\n        \n        uint256 tokenID = vS.getTotalMinted();\n        \n        vS.mintVoyayer(msg.sender, tokenID);\n        \n        if (tokenID == 0) {\n            vS._setTokenURI(tokenID, vS.getToken0URI());\n        } else {\n            vS.setTokenIDWithoutURI(msg.sender, tokenID);\n        }\n        \n        vS.setTotalMinted(vS.getTotalMinted().add(1));\n        vS.setExpiredWhitelist(msg.sender, true);\n        vS.setWhitelistExpired(vS.getWhitelistExpired().add(1));\n    }\n\n    function _mintVoyager() external activeMint whenNotPaused nonReentrant {\n        (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\n            \"mintVoyager()\"))));\n        require(status, \"mintVoyager Failed\");\n    }    \n\n    function mintVoyager() public\n    {\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \"Set tokenURI first\");\n        // require(verified(Sig.ethSignedHash(msg.sender), signature), \"Not verified\");\n        // require(!expiredWhitelist[msg.sender], \"Expired\");\n        // require(mintIsActive, \"Unactive to mint Voyager\");\n        // require(whitelistExpired.add(1) <= maxWhitelisted, \"Mint would exceed max supply of Voyagers\");\n        uint256 tokenID = vS.getTotalMinted();\n\n        (uint fee1, uint fee2) = vS.getMintFee();\n        // 余额足够\n        require(IERC20(vS.dgtAddress()).balanceOf(msg.sender) >= fee1, \n                                            \"Unsufficient dgt token\");\n        require(IERC20(vS.dspAddress()).balanceOf(msg.sender) >= fee2, \n                                    \"Unsufficient dsp token\");\n        // todo: 转账DGT到金库合约\n        IERC20(vS.dgtAddress()).safeTransferFrom(msg.sender, address(this), fee1);\n        // todo: 销毁DSP\n        IERC20(vS.dspAddress()).safeTransferFrom(msg.sender, address(this), fee2);\n        \n        vS.mintVoyayer(msg.sender, tokenID);\n        \n        if (tokenID == 0) {\n            vS._setTokenURI(tokenID, vS.getToken0URI());\n        } else {\n            vS.setTokenIDWithoutURI(msg.sender, tokenID);\n        }\n        \n        vS.setTotalMinted(vS.getTotalMinted().add(1));\n        // expiredWhitelist[msg.sender] = true;\n    }\n\n    function _changeTokenURI(\n        uint256 tokenID, \n        string memory _tokenURI\n    ) external onlyAdmin whenNotPaused \n    {\n        (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\n            \"changeTokenURI(uint256,string)\")),\n            tokenID, _tokenURI));\n        require(status, \"changeTokenURI Failed\");\n    }  \n\n    function changeTokenURI(uint256 tokenID, string memory _tokenURI) public onlyAdmin {\n        vS._setTokenURI(tokenID, _tokenURI);\n    }\n\n    // function _setToken0URI(\n    //     string memory _tokenURI\n    // ) external onlyOwner whenNotPaused \n    // {\n    //     (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\n    //         \"setToken0URI(string)\")),\n    //         _tokenURI));\n    //     require(status, \"setToken0URI Failed\");\n    // }\n\n    function setToken0URI(string memory _tokenURI) public onlyAdmin {\n        vS.token0URI(_tokenURI);\n    }\n\n    // function _setTokenURI(\n    //     uint256 _tokenid, \n    //     uint256 _level, \n    //     string memory _tokenURI\n    // ) external whenNotPaused \n    // {\n    //     (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\n    //         \"setTokenURI(uint256,uint256,string)\")),\n    //         _tokenid, _level, _tokenURI));\n    //     require(status, \"setTokenURI Failed\");\n    // }\n\n    function setTokenURI(address _user, uint256 _tokenid, uint256 _level, string memory _tokenURI) public onlyAdmin {\n        uint256 tokenID = vS.getTokenIDWithoutURI(_user);\n        uint256 level = vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level;\n\n        require(tokenID > 0, \"Unvalid token\");\n        require(vS.ownerOf(tokenID) == _user, \"Not owner\");\n        require(_tokenid == tokenID, \"Consistent tokenID\");\n        require(level == _level, \"Consistent level\");\n        require(!vS.getSetByOwner(tokenID, level), \"Set over once\");\n        vS._setTokenURI(tokenID, _tokenURI);\n\n        vS.setTokenIDWithoutURI(_user, 0);\n        vS.setSetByOwner(tokenID, level, true);\n    }\n\n    // function _levelUp(\n    //     uint256 tokenID\n    // ) external whenNotPaused \n    // {\n    //     (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\n    //         \"levelUp(uint256)\")),\n    //         tokenID));\n    //     require(status, \"levelUp Failed\");\n    // } \n\n    // 升级逻辑,更新: 1.最大level, 2.不同level数量，3.所有权，4.持有总量\n    function levelUp(uint256 tokenID) public nonReentrant {\n        require(tokenID != 0, \"Not 0 token\");\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \"Unvalid token\");\n        require(vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level < vS.maxLevel(), \n                                                          \"Already max level\");\n        uint fee1;\n        uint fee2;\n        uint level = vS.getLevel(tokenID);\n        (fee1, fee2) = vS.getLevelUpFeeV2(tokenID);\n        // 余额足够\n        require(IERC20(vS.dgtAddress()).balanceOf(msg.sender) >= fee1, \n                                            \"Unsufficient dgt token\");\n        require(IERC20(vS.dspAddress()).balanceOf(msg.sender) >= fee2, \n                                    \"Unsufficient dsp token\");\n        // todo: 转账DGT到金库合约\n        IERC20(vS.dgtAddress()).safeTransferFrom(msg.sender, address(this), fee1);\n        // todo: 销毁DSP\n        IERC20(vS.dspAddress()).safeTransferFrom(msg.sender, address(this), fee2);\n\n        // 完成升级，更新不同level的数量，\bNFT的level\n        vS.setTokenLevelCount(msg.sender, vS.getLevel(tokenID), \n                    vS.getTokenLevelCount(msg.sender, vS.getLevel(tokenID))-1);\n        vS.setLevel(tokenID, vS.getLevel(tokenID) + 1);\n        vS.setLevelStartHoldingTime(tokenID, block.timestamp);\n        // levelOfVoyager[tokenID] = voyagers[tokenID].level;\n        vS.setTokenLevelCount(msg.sender, vS.getLevel(tokenID), \n                    vS.getTokenLevelCount(msg.sender, vS.getLevel(tokenID))+1);\n        vS.setTokenIDWithoutURI(msg.sender, tokenID);\n\n        // 更新maxLevel\n        if (vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level > vS.getMaxLevelOfOwner(msg.sender)) {\n            vS.setMaxLevelOfOwner(msg.sender, vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level);\n        }\n    }\n\n    // function _setFee1TokenAddress(\n    //     address _token1\n    // ) external onlyOwner whenNotPaused \n    // {\n    //     (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\n    //         \"setFee1TokenAddress(address)\")),\n    //         _token1));\n    //     require(status, \"setFee1TokenAddress Failed\");\n    // } \n\n    // function _setFee2TokenAddress(\n    //     address _token2\n    // ) external onlyOwner whenNotPaused \n    // {\n    //     (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\n    //         \"setFee2TokenAddress(address)\")),\n    //         _token2));\n    //     require(status, \"setFee2TokenAddress Failed\");\n    // } \n\n    function setFee1TokenAddress(\n        address _token1\n    ) public onlyAdmin whenNotPaused notZeroAddress(_token1) nonReentrant\n    {\n        vS.setFee1TokenAddress(_token1);\n    }\n\n    function setFee2TokenAddress(\n        address _token2\n    ) public onlyAdmin whenNotPaused notZeroAddress(_token2) nonReentrant\n    {\n        vS.setFee2TokenAddress(_token2);\n        dsp = DeepSeaPlankton(_token2);\n    }\n\n    function withdrawDGT(uint _amount, address _to) public onlyOwner whenNotPaused nonReentrant {\n        require(IERC20(vS.dgtAddress()).balanceOf(msg.sender) >= _amount, \"Insufficient balance\");\n        IERC20(vS.dgtAddress()).transfer(_to, _amount);\n    }\n\n    function burnDSP() public onlyOwner whenNotPaused nonReentrant {\n        dsp.burn(IERC20(vS.dspAddress()).balanceOf(address(this)));\n    }\n\n    // warning: same logic in VoyagerStorage smart contract\n    // function setLevelUpFee(uint256 _toLevel, uint256 _dgt, uint256 _dsp) public onlyOwner {\n    //     vS.setLevelUpFee(_toLevel, _dgt, _dsp);\n    // }\n    // function testDelegatecall() external {\n    //     (bool status,) = curVersion.voyagerLogic.delegatecall(abi.encodeWithSelector(bytes4(keccak256(\n    //         \"testDelegatecall()\"))));\n    //     require(status, \"levelUp Failed\");\n    // }\n    \n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/voyager/VoyagerProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"../utils/AccessControl.sol\";\nimport \"./VoyagerStorage.sol\";\n\npragma solidity ^0.8.0;\n\ncontract VoyagerProxy is AccessControl {\n    using SafeMath for uint256;\n\n    VoyagerStorage public vS;\n\n    struct LogicContracts {\n        address voyagerLogic;\n    }\n\n    mapping(string => LogicContracts) internal versions;\n    LogicContracts public curVersion;\n    LogicContracts public delayVersion;\n    string[] public versionList;\n    string public versionName;\n    string public delayVersionName;\n    uint256 constant delayTime = 24 hours;\n    uint256 public startTime;\n    bool public initialized;\n\n    // event SetUpgrade(string version, address IPlogic, address GPDepositLogic, address GPWithdrawLogic,\n    //                 address LPLogic, address VaultLogic, address StateLogic, address LiquidationLogic);\n    // event ExecuteUpgrade(string version, address IPlogic, address GPDepositLogic, address GPWithdrawLogic,\n    //                 address LPLogic, address VaultLogic, address StateLogic, address LiquidationLogic);\n    // event Rollback();\n\n    function setUpgrade(\n        string memory _newVersion,\n        address _voyagerLogic\n    )\n        public onlyOwner\n    {\n        require(_voyagerLogic != address(0), \"Wrong Address\");\n        require(bytes(_newVersion).length > 0, \"Empty Version\");\n        require(keccak256(abi.encodePacked(versionName)) != keccak256(abi.encodePacked(_newVersion)), \"Existing Version\");\n        delayVersionName = _newVersion;\n        delayVersion.voyagerLogic = _voyagerLogic;\n        startTime = block.timestamp;\n        // emit SetUpgrade(_newVersion, _ipc, _gpdc, _gpwc, _lpc, _vtc, _stc, _lqdc);\n    }\n\n    function executeUpgrade(\n    )\n        public onlyOwner\n    {\n        require(delayVersion.voyagerLogic != address(0), \"Wrong Address\");\n        if (initialized) {\n            require(block.timestamp > startTime.add(delayTime), \"In Delay\" );\n        }\n        versions[delayVersionName] = delayVersion;\n        versionName = delayVersionName;\n        curVersion = delayVersion;\n        versionList.push(delayVersionName);\n        delayVersionName = \"\";\n        delete delayVersion;\n        // emit ExecuteUpgrade(versionName, curVersion.ipc, curVersion.gpdc, curVersion.gpwc, curVersion.lpc,\n        //                     curVersion.vtc, curVersion.stc, curVersion.lqdc);\n    }\n\n    function rollback(\n    )\n        external onlyOwner\n    {\n        delayVersionName = \"\";\n        delete delayVersion;\n        // emit Rollback();\n    }\n\n    function getLogicContracts(\n        string calldata _version\n    ) \n        external view onlyOwner\n        returns(address)\n    {\n        require(bytes(_version).length > 0, \"Empty Version\");\n        return (versions[_version].voyagerLogic);\n    }\n}\n"
    },
    "contracts/voyager/VoyagerLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./VoyagerStorage.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../utils/Sig.sol\";\n\n// 500个创世铸造权，其余铸造要消耗DGT和DSP\n// 满足条件触发NFT升级\n// 1. 属性设置：等级、图片、编号\n// \n// 合约及其功能：\n// 1. VoyagerAccessControl: 控制操作权限\n// 2. VoyagerBase: 通用基础的数据结构、变量\n// 3. SaleClockAuction: 用于Voyager的拍卖出售\n\n// /// @title The facet of the Voyager core contract that manages Voyager levelup.\n// /// @author Andrew Fang (https://www.github.com/Andrew-DeepGo)\n// /// @dev Ref: todo\ncontract VoyagerLogic is BaseStorage, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    VoyagerStorage public vS;\n    \n    function testSetVs(address _vs) public {\n        vS = VoyagerStorage(_vs);\n    }\n\n    function testDelegatecall() external view returns (uint){\n        return vS.getTokenIDWithoutURI(msg.sender);\n    }\n\n    /**\n    * Mint Voyagers，初始化: 1.最大level, 2.不同level数量，3.所有权，4.持有总量\n    */\n    function mintVoyagerByWhitelist() external\n    {\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \"Set tokenURI first\");\n        // require(verified(Sig.ethSignedHash(msg.sender), signature), \"Not verified\");\n        require(!vS.getExpiredWhitelist(msg.sender), \"Expired\");\n        // require(mintIsActive, \"Unactive to mint Voyager\");\n        require(vS.getWhitelistExpired().add(1) <= vS.getMaxWhitelisted(), \n                            \"Mint would exceed max supply of Voyagers\");\n        \n        uint256 tokenID = vS.getTotalMinted();\n        \n        vS.mintVoyayer(msg.sender, tokenID);\n        \n        if (tokenID == 0) {\n            vS._setTokenURI(tokenID, vS.getToken0URI());\n        } else {\n            vS.setTokenIDWithoutURI(msg.sender, tokenID);\n        }\n        \n        vS.setTotalMinted(vS.getTotalMinted().add(1));\n        vS.setExpiredWhitelist(msg.sender, true);\n        vS.setWhitelistExpired(vS.getWhitelistExpired().add(1));\n    }\n\n    /**\n    * Mint Voyagers，初始化: 1.最大level, 2.不同level数量，3.所有权，4.持有总量\n    */\n    function mintVoyager() public\n    {\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \"Set tokenURI first\");\n        // require(verified(Sig.ethSignedHash(msg.sender), signature), \"Not verified\");\n        // require(!expiredWhitelist[msg.sender], \"Expired\");\n        // require(mintIsActive, \"Unactive to mint Voyager\");\n        // require(whitelistExpired.add(1) <= maxWhitelisted, \"Mint would exceed max supply of Voyagers\");\n        (uint fee1, uint fee2) = vS.getLevelUpFee(vS.minLevel());\n        // 余额足够\n        require(IERC20(dgtAddress).balanceOf(msg.sender) >= fee1, \n                                            \"Unsufficient dgt token\");\n        require(IERC20(dspAddress).balanceOf(msg.sender) >= fee2, \n                                    \"Unsufficient dsp token\");\n        // todo: 转账DGT到金库合约\n        IERC20(dgtAddress).safeTransferFrom(msg.sender, address(this), fee1);\n        // todo: 销毁DSP\n        IERC20(dspAddress).safeTransferFrom(msg.sender, address(this), fee2);\n        \n        uint256 tokenID = vS.getTotalMinted();\n        \n        vS.mintVoyayer(msg.sender, tokenID);\n        \n        if (tokenID == 0) {\n            vS._setTokenURI(tokenID, vS.getToken0URI());\n        } else {\n            vS.setTokenIDWithoutURI(msg.sender, tokenID);\n        }\n        \n        vS.setTotalMinted(vS.getTotalMinted().add(1));\n        // expiredWhitelist[msg.sender] = true;\n    }\n\n    function changeTokenURI(uint256 tokenID, string memory _tokenURI) public {\n        vS._setTokenURI(tokenID, _tokenURI);\n    }\n    \n    // tokenID为0的tokenURI \n    function setToken0URI(string memory _tokenURI) public {\n        vS.token0URI(_tokenURI);\n    }\n\n    // 获取address待生成URI的tokenID：tokenIDWithoutURI[address]\n\n    // 获取tokenID的level: levelOfVoyager[tokenID]\n\n    // 检查后端取回与存储id，\n    function setTokenURI(uint256 _tokenid, uint256 _level, string memory _tokenURI) public {\n        uint256 tokenID = vS.getTokenIDWithoutURI(msg.sender);\n        uint256 level = vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level;\n\n        require(tokenID > 0, \"Unvalid token\");\n        require(vS.ownerOf(tokenID) == msg.sender, \"Not owner\");\n        require(_tokenid == tokenID, \"Consistent tokenID\");\n        require(level == _level, \"Consistent level\");\n        require(!vS.getSetByOwner(tokenID, level), \"Set over once\");\n        vS._setTokenURI(tokenID, _tokenURI);\n\n        vS.setTokenIDWithoutURI(msg.sender, 0);\n        vS.setSetByOwner(tokenID, level, true);\n    }\n\n    // 升级逻辑,更新: 1.最大level, 2.不同level数量，3.所有权，4.持有总量\n    function levelUp(uint256 tokenID) public nonReentrant {\n        require(tokenID != 0, \"Not 0 token\");\n        require(vS.getTokenIDWithoutURI(msg.sender) == 0, \"Unvalid token\");\n        require(vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level < vS.maxLevel(), \n                                                          \"Already max level\");\n        uint fee1;\n        uint fee2;\n        uint level = vS.getLevel(tokenID);\n        (fee1, fee2) = vS.getLevelUpFee(level);\n        // 余额足够\n        require(IERC20(dgtAddress).balanceOf(msg.sender) >= fee1, \n                                            \"Unsufficient dgt token\");\n        require(IERC20(dspAddress).balanceOf(msg.sender) >= fee2, \n                                    \"Unsufficient dsp token\");\n        // todo: 转账DGT到金库合约\n        IERC20(dgtAddress).safeTransferFrom(msg.sender, address(this), fee1);\n        // todo: 销毁DSP\n        IERC20(dspAddress).safeTransferFrom(msg.sender, address(this), fee2);\n\n        // 完成升级，更新不同level的数量，\bNFT的level\n        vS.setTokenLevelCount(msg.sender, vS.getLevel(tokenID), \n                    vS.getTokenLevelCount(msg.sender, vS.getLevel(tokenID))-1);\n        vS.setLevel(tokenID, vS.getLevel(tokenID) + 1);\n        // levelOfVoyager[tokenID] = voyagers[tokenID].level;\n        vS.setTokenLevelCount(msg.sender, vS.getLevel(tokenID), \n                    vS.getTokenLevelCount(msg.sender, vS.getLevel(tokenID))+1);\n        vS.setTokenIDWithoutURI(msg.sender, tokenID);\n\n        // 更新maxLevel\n        if (vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level > vS.getMaxLevelOfOwner(msg.sender)) {\n            vS.setMaxLevelOfOwner(msg.sender, vS.getVoyager(vS.getAllVoyagerIndex(tokenID)).level);\n        }\n    }\n\n    function setFee1TokenAddress(address _token1) external {\n        dgtAddress = _token1;\n    }\n\n    function setFee2TokenAddress(address _token2) external {\n        dspAddress = _token2;\n    }\n\n    // /* Test functions */\n    // function testMintVoyager(\n    //     bytes memory signature\n    // ) public view returns (bool)\n    // {\n    //     // require(vS.getTokenIDWithoutURI(msg.sender) == 0, \"Set tokenURI first\");\n    //     return Sig.verified(Sig.ethSignedHash(msg.sender), signature, admin());\n    // }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/utils/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./Sig.sol\";\n\ncontract AccessControl is Ownable, ReentrancyGuard {\n    using SafeMath for uint;\n\n    // event ContractUpgrade(address newContract);\n    event AdminTransferred(address oldAdmin, address newAdmin);\n\n    address private _admin;\n    address public proxy;\n    bool public mintIsActive = true;\n    bool public mineIsActive = true;\n\n    constructor() {\n        _setAdmin(_msgSender());\n    }\n\n    function verified(bytes32 hash, bytes memory signature) public view returns (bool){\n        return admin() == Sig.recover(hash, signature);\n    }\n\n    /**\n     * @dev Returns the address of the current admin.\n     */\n    function admin() public view virtual returns (address) {\n        return _admin;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the admin.\n     */\n    modifier onlyAdmin() {\n        require(admin() == _msgSender(), \"Invalid Admin: caller is not the admin\");\n        _;\n    }\n\n    function _setAdmin(address newAdmin) private {\n        address oldAdmin = _admin;\n        _admin = newAdmin;\n        emit AdminTransferred(oldAdmin, newAdmin);\n    }\n\n    function setProxy(address _proxy) external onlyOwner {\n        require(_proxy != address(0), \"Invalid Address\");\n        proxy = _proxy;\n    }\n\n    modifier onlyProxy() {\n        require(proxy == _msgSender(), \"Not Permit: caller is not the proxy\"); \n        _;\n    }\n\n    modifier sigVerified(bytes memory signature) {\n        require(verified(Sig.ethSignedHash(msg.sender), signature), \"Not verified\");\n        _;\n    }\n\n    modifier activeMint() {\n        require(mintIsActive, \"Unactive to mint\");\n        _;\n    } \n\n    modifier activeMine() {\n        require(mineIsActive, \"Unactive to mint\");\n        _;\n    } \n    \n    modifier notZeroAddress(address addr) {\n        require(addr != address(0), \"Zero address\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newAdmin`).\n     * Can only be called by the current admin.\n     */\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\n        require(newAdmin != address(0), \"Invalid Admin: new admin is the zero address\");\n        _setAdmin(newAdmin);\n    }\n\n    /*\n    * Pause sale if active, make active if paused\n    */\n    function flipMintableState() public onlyAdmin {\n        mintIsActive = !mintIsActive;\n    }\n}\n"
    },
    "contracts/voyager/VoyagerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../utils/AccessControl.sol\";\nimport \"./BaseStorage.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"../utils/Sig.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ncontract VoyagerStorage is ERC721, IERC721Enumerable, BaseStorage, AccessControl {\n    using SafeMath for uint;\n    // using SafeERC20 for IERC20;\n\n    /// @dev An array containing the Voyager struct for all Voyagers in existence. The ID of\n    /// each Voyager is actually an index into this array.\n    Voyager[] public voyagers;\n\n    // Mapping from owner to Voyager array\n    mapping(address => uint[]) public ownedVoyagers;\n    \n    // Mapping from token ID to index of the owner tokenId list\n    mapping(address => mapping( uint256 => uint256 )) public ownedVoyagersIndex;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) public allVoyagersIndex;\n\n    /// @dev A mapping from Voyager to the max level of the Voyager. \n    mapping (address => uint256) public maxLevelOfOwner;\n\n    /// @dev A mapping from owner to token amount of each level. \n    mapping (address => mapping(uint256 => uint256)) public tokenLevelCount;\n\n    mapping(uint256 => string) private _tokenURIs;\n    mapping(uint256 => mapping(uint256 => bool)) public setByOwner; // tokenURI is set by owner in certain level\n    mapping(address => uint256) private _tokenIDWithoutURI;\n    mapping (address => bool) private _expiredWhitelist; \n\n    uint private _maxWhitelisted = 1000;\n    uint private _totalMinted;\n    uint private _whitelistExpired;\n    string private _token0URI;\n\n    // todo: update\n    constructor(uint256 _maxLevel) ERC721(\"Voyager\", \"VOG\")  {\n        maxLevel = _maxLevel;\n        initialLevelUpFees();\n    }\n    \n    function getOwnedVoyagers(address _addr) public view returns (uint[] memory) {\n        return ownedVoyagers[_addr];\n    }\n\n    // 持有一定天数的最大等级数\n    function getValidMaxLevel(address owner, uint256 continueDays) public view returns (uint) {\n        uint balance = ERC721.balanceOf(owner); \n        uint maxLevel;\n        Voyager memory voyager;\n        for (uint i=0; i<balance; i++) {\n            uint tokenId = ownedVoyagers[owner][i];\n            voyager = getVoyagerByTokenId(tokenId);\n            if (voyager.minter == ownerOf(tokenId) && voyager.level > maxLevel) {\n                maxLevel = voyager.level;\n            } else if (block.timestamp - voyager.startHoldingTime > (1 days) * continueDays\n                && voyager.level > maxLevel) {\n                maxLevel = voyager.level;\n            }\n        }\n        return maxLevel;\n    }\n    \n    function getVoyager(uint _index) public view returns (Voyager memory){\n        return voyagers[_index];\n    }\n\n    function getVoyagerByTokenId(uint _tokenId) public view returns (Voyager memory){\n        return voyagers[getAllVoyagerIndex(_tokenId)];\n    }\n\n    \n    function getSetByOwner(uint _tokenId, uint _level) public view returns (bool) {\n        return setByOwner[_tokenId][_level];\n    }\n\n    function setSetByOwner(uint _tokenId, uint _level, bool _isSet) public onlyProxy{\n        setByOwner[_tokenId][_level] = _isSet;\n    }\n    \n\n    function getTokenIDWithoutURI(address _addr) public view returns (uint) {\n        return _tokenIDWithoutURI[_addr];\n    }\n\n    function setTokenIDWithoutURI(address _addr, uint _tokenId) public onlyProxy {\n        _tokenIDWithoutURI[_addr] = _tokenId;\n    }\n\n    function getMaxWhitelisted() public view returns (uint) {\n        return _maxWhitelisted;\n    }\n\n    function getTotalMinted() public view returns (uint) {\n        return _totalMinted;\n    }\n\n    function setTotalMinted(uint _amount) public onlyProxy {\n        _totalMinted = _amount;\n    }\n\n    function getWhitelistExpired() public view returns (uint){\n        return _whitelistExpired;\n    }\n\n    function setWhitelistExpired(uint _amount) public onlyProxy {\n        _whitelistExpired = _amount;\n    }\n\n    function getToken0URI() public view returns (string memory) {\n        return _token0URI;\n    }\n\n    function token0URI(string memory _string) public onlyProxy {\n        _token0URI = _string;\n    }\n\n    function getExpiredWhitelist(address _addr) public view returns (bool) {\n        return _expiredWhitelist[_addr];\n    }\n\n    function setExpiredWhitelist(address _addr, bool _isExpired) public onlyProxy {\n        _expiredWhitelist[_addr] = _isExpired;\n    }\n\n    function getAllVoyagerIndex(uint _tokenId) public view returns (uint) {\n        return allVoyagersIndex[_tokenId];\n    }\n\n    function getMaxLevelOfOwner(address _addr) public view returns (uint) {\n        return maxLevelOfOwner[_addr];\n    }\n\n    function setMaxLevelOfOwner(address _addr, uint _level) public onlyProxy {\n        maxLevelOfOwner[_addr] = _level;\n    }\n\n    function getTokenLevelCount(address _addr, uint _level) public view returns (uint) {\n        return tokenLevelCount[_addr][_level];\n    }\n\n    function setTokenLevelCount(address _addr, uint _level, uint _amount) public onlyProxy {\n        tokenLevelCount[_addr][_level] = _amount;\n    }\n\n    function mintVoyayer(address _addr, uint _tokenId) public onlyProxy {\n        _safeMint(_addr, _tokenId);\n    }\n\n    function transferVoyager(address _to, uint _tokenId) public {\n        require(getTokenIDWithoutURI(msg.sender) == 0, \"Set tokenURI first\");\n        _safeTransfer(msg.sender, _to, _tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return ownedVoyagers[owner][index];\n    }\n\n    // function tokenIdsOwnedBy(address owner) public view returns (uint[] memory) {\n    //     uint balance = ERC721.balanceOf(owner);\n\n    //     uint[] memory tokenIds;\n\n    //     for (uint index=0; index < balance; index++) {\n    //         tokenIds[index] = ownedVoyagers[owner][index].id;\n    //     }\n\n    //     return tokenIds;\n    // }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return voyagers.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < VoyagerStorage.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return voyagers[index].id;\n    }\n\n    // 在transfer之前更新:1.最大level, 2.不同level数量，3.所有权，4.持有总量\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override virtual {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId, to);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n            _updateSenderMaxLevel(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n            _updateReceiverMaxLevel(to, tokenId);\n            voyagers[allVoyagersIndex[tokenId]].startHoldingTime = block.timestamp;\n            voyagers[allVoyagersIndex[tokenId]].levelStartHoldingTime = block.timestamp;\n            tokenLevelCount[to][voyagers[allVoyagersIndex[tokenId]].level] += 1;\n        }\n    }\n\n    function _updateSenderMaxLevel(address from, uint256 tokenId) private {\n        // update from address maxLevel\n        uint curLevel = voyagers[allVoyagersIndex[tokenId]].level;\n        require(curLevel <= maxLevelOfOwner[from], \"Level over max\");\n        // ownershipTokenCount[from] -= 1;\n        tokenLevelCount[from][curLevel] -= 1;\n\n        if (ERC721.balanceOf(from) == 0) {\n            maxLevelOfOwner[from] = 0;\n        } else if ( curLevel == maxLevelOfOwner[from] ) {\n            for (; curLevel > 0; curLevel--) {\n                if (tokenLevelCount[from][curLevel] > 0) {\n                    maxLevelOfOwner[from] = curLevel;\n                    break;\n                }\n            }\n        }\n    }\n\n    function _updateReceiverMaxLevel(address to, uint256 tokenId) private {\n        // update to address maxLevel\n        uint curLevel = voyagers[allVoyagersIndex[tokenId]].level;\n        if (curLevel > maxLevelOfOwner[to]) {\n            maxLevelOfOwner[to] = curLevel;\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        ownedVoyagers[to].push(tokenId);\n        ownedVoyagersIndex[to][tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId, address to) private {\n        allVoyagersIndex[tokenId] = voyagers.length;\n        if (tokenId == 0) {\n            voyagers.push(Voyager(uint8(maxLevel), tokenId, to, block.timestamp, block.timestamp));\n        } else {\n            voyagers.push(Voyager(uint8(minLevel), tokenId, to, block.timestamp, block.timestamp));\n        }\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ownedVoyagers[from].length - 1;\n        uint256 tokenIndex = ownedVoyagersIndex[from][tokenId];\n\n        uint lastVoyager = ownedVoyagers[from][lastTokenIndex];\n        ownedVoyagers[from][tokenIndex] = lastVoyager;\n        ownedVoyagersIndex[from][lastVoyager] = tokenIndex;\n        delete ownedVoyagersIndex[from][tokenId];\n        ownedVoyagers[from].pop();\n        // // When the token to delete is the last token, the swap operation is unnecessary\n        // if (tokenIndex != lastTokenIndex) {\n        //     Voyager  storage lastVoyager = ownedVoyagers[from][lastTokenIndex];\n\n        //     ownedVoyagers[from][tokenIndex] = lastVoyager; // Move the last token to the slot of the to-delete token\n        //     ownedVoyagersIndex[lastVoyager.id] = tokenIndex; // Update the moved token's index\n        // }\n\n        // // This also deletes the contents at the last position of the array\n        // delete ownedVoyagersIndex[tokenId];\n        // delete ownedVoyagers[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n        \n        // token array的max index \n        uint256 lastTokenIndex = voyagers.length - 1;\n        // 被删除token所在的array index\n        uint256 tokenIndex = allVoyagersIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        \n        // token array中max index的token id\n        Voyager storage lastVoyager = voyagers[lastTokenIndex];\n\n        // 用最后一个Voyager替换被删除的那个\n        voyagers[tokenIndex] = lastVoyager; // Move the last token to the slot of the to-delete token\n        // 更新最后一个token的index\n        allVoyagersIndex[lastVoyager.id] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete allVoyagersIndex[tokenId];\n        voyagers.pop();\n    }\n\n    /// @dev Updates the level up fee as well as mint fee. Can only\n    ///  be called by the Admin address.\n    /// todo: 可设置maxLevel\n    /// todo: 加maxLevel限制条件\n    /// todo：加接口获取铸造或升级的费用\n    function setLevelUpFee(uint256 _toLevel, uint256 _dgt, uint256 _dsp) external onlyOwner {\n        require(_toLevel <= maxLevel, \"Over max level\");\n        require(levelUpFees.length >= _toLevel-1, \"Add fee from low level\");\n        if (levelUpFees.length == _toLevel-1) {\n            levelUpFees.push(FeeComponent(_dgt, _dsp));\n        } else {\n            levelUpFees[_toLevel-1] = FeeComponent(_dgt, _dsp);\n        }\n    }\n\n    function setCoolDown(uint256 _toLevel, uint32 _interval) external onlyOwner {\n        require (_toLevel > 1 && _toLevel <= cooldowns.length.add(1), \"Over max level\"); \n        cooldowns[_toLevel-2] = _interval;\n    }\n\n    function initialLevelUpFees() internal {\n        for (uint i=0; i < maxLevel; i++) {\n            // 1-DGT,1-DSP,2-DGT,2-DSP...\n            // DGT 100, 100, 100, 300, 1000, 1000\n            levelUpFees.push(FeeComponent(levelUpDGT[i] * decimals, levelUpDSP[i] * decimals));\n        }\n    }\n\n    function getLevelUpDSP(uint level, uint holdingDays) public view returns (uint cost) {\n        if (level == 0) {\n            cost = levelUpDSPParam1[0];\n        } else {\n            if (holdingDays < 153) {\n                cost = levelUpDSPParam1[level].sub(2 * holdingDays);\n            } else {\n                cost = levelUpDSPParam2[level];\n            }\n        }\n\n        cost = cost.mul(decimals);\n    }\n\n    // todo：获取升级的费用\n    function getLevelUpFee(uint256 level) public view returns (uint, uint) {\n        return (levelUpFees[level].dgt, levelUpFees[level].dsp);\n    }\n\n    function getMintFee() public view returns (uint, uint) {\n        return (levelUpDGT[0] * decimals, getLevelUpDSP(0, 1));\n    }\n\n    // todo: 当前等级升级的消耗\n    function getLevelUpFeeV2(uint tokenId) public view returns (uint, uint) {\n        uint level = getLevel(tokenId);\n        uint holdingDays = getCurLevelHoldingDays(tokenId);\n        return (levelUpDGT[level] * decimals, getLevelUpDSP(level, holdingDays));\n    }\n\n    function getLevel(uint tokenId) public view returns (uint){\n        return voyagers[allVoyagersIndex[tokenId]].level;\n    }\n\n    function getHoldingDays(uint tokenId) public view returns (uint){\n        return block.timestamp.sub(voyagers[allVoyagersIndex[tokenId]].startHoldingTime)\n                              .div(1 days);\n    }\n\n    function getCurLevelHoldingDays(uint tokenId) public view returns (uint){\n        return block.timestamp.sub(voyagers[allVoyagersIndex[tokenId]].levelStartHoldingTime)\n                              .div(1 days);\n    }\n\n    function setLevelStartHoldingTime(uint tokenId, uint _curTimeStamp) public onlyProxy {\n        voyagers[allVoyagersIndex[tokenId]].levelStartHoldingTime = _curTimeStamp;\n    }\n\n    function setLevel(uint tokenId, uint level) public onlyProxy {\n        voyagers[allVoyagersIndex[tokenId]].level = uint8(level);\n    }\n\n    /*     \n    * Set URI for NFT with tokenId \n    */\n    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) public virtual onlyProxy {\n        require(_exists(_tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[_tokenId] = _tokenURI;\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n        string memory _tokenURI = _tokenURIs[tokenId];\n        \n        return _tokenURI;\n    }\n\n    function setFee1TokenAddress(address _token1) public onlyProxy {\n        dgtAddress = _token1;\n    }\n\n    function setFee2TokenAddress(address _token2) public onlyProxy {\n        dspAddress = _token2;\n    }\n}\n"
    },
    "contracts/utils/Sig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nlibrary Sig {\n\n    using ECDSA for bytes32;\n\n    function addressHash(address _addr) public pure returns(bytes32) {\n        return keccak256(abi.encodePacked(_addr));\n    }\n\n    function ethSignedHash(address _addr) public pure returns(bytes32) {\n        return keccak256(abi.encodePacked(_addr)).toEthSignedMessageHash();\n    }\n\n    function recover(bytes32 hash, bytes memory signature) public pure returns(address) {\n        return hash.recover(signature);\n    }\n\n    function verified(bytes32 hash, bytes memory signature, address signer) public pure returns (bool){\n        return signer == recover(hash, signature);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/voyager/BaseStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract BaseStorage {\n    address public dgtAddress;\n    address public dspAddress;\n\n    uint public decimals = 10 ** 18;\n\n    struct FeeComponent {\n        uint256 dgt;\n        uint256 dsp;\n    }\n\n    struct Voyager {\n        // Level of Voyager is from 1 to 6\n        uint8 level;\n        // Id of the Voyager\n        uint256 id;\n        address minter;\n        // todo: image of the Voyager是否在struct中展示 \n        uint256 startHoldingTime; // NFT持有总时长\n        uint256 levelStartHoldingTime; // 当前等级持有时间\n    }\n\n    /*** CONSTANTS ***/\n    /// 不同等级升级的时间间隔,最大cooldowns是7天\n    uint32[5] public cooldowns = [\n        uint32(30 minutes),\n        uint32(1 days),\n        uint32(2 days),\n        uint32(4 days),\n        uint32(7 days)\n    ];\n\n    /*** STORAGE ***/\n    uint256 public minLevel = 1;\n    uint256 public maxLevel;\n    uint256 public initialSupply = 1000;\n\n    FeeComponent[] public levelUpFees;\n\n    uint[6] public levelUpDGT = [100, 100, 100, 300, 1000, 1000];\n    uint[6] public levelUpDSP = [3593, 3683, 3808, 7457, 11230, 18686];\n    // todo: 已经乘过10**18\n    uint256[6] public levelUpDSPParam1 = [3621, 3972, 4097, 7763, 11553, 19044]; \n    uint256[6] public levelUpDSPParam2 = [3621, 3668, 3793, 7459, 11249, 18740]; \n\n    // constructor() {\n    //     levelUpDSPParam.push([1772280209, 980723583462, 246158456134135, 22391115099470864, 1198780346498323712, 3601786559875276341248]);\n    //     levelUpDSPParam.push([1772280209, 980723583462, 246158456134124, 22391115099468928, 1198780346498212096, 3691786559875272671232]);\n    //     levelUpDSPParam.push([1789655505, 990338520554, 248571774331527, 22610635835739876, 1210533094993398272, 3816215839874055405568]);\n    //     levelUpDSPParam.push([3544560418, 1961447166924, 492316912268235, 44782230198936496, 2397560692996402176, 7473573119750552158208]);\n    //     levelUpDSPParam.push([5316840627, 2942170750386, 738475368402420, 67173345298413568, 3596341039494998528, 11255359679625831645184]);\n    //     levelUpDSPParam.push([8861401046, 4903617917310, 1230792280670524, 111955575497332560, 5993901732490513408, 18728932799376372269056]);\n    // }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/voyager/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "contracts/marketplace/NFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../utils/Sig.sol\";\n\n/**\n * @title DeepGoNFT contract\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\n */\ncontract NFT is ERC721Enumerable, ReentrancyGuard, Ownable {\n    using SafeMath for uint256;\n    using Strings for uint256;\n\n    address public admin;\n    uint256 public MAX_ANIMALS;\n    bool public mintIsActive = true;\n\n    mapping(uint256 => string) private _tokenURIs;\n    mapping(address => bool) public expired;\n\n    event SetTokenURI(uint256 _tokenId, string _tokenURI);\n    event TransferAdmin(address indexed from, address indexed to);\n    event MintAnimal(address indexed addr, uint256 tokenId, string _tokenURI);\n    event Expired(address _addr);\n\n    constructor() ERC721(\"NFT\", \"NFT\") {}\n\n    /*     \n    * Transfer admin\n    */\n    function transferAdmin(address _to) external onlyOwner {\n        require(_to != admin, \"Transfer Meaningless\");\n        address _from = admin;\n        admin = _to;\n\n        emit TransferAdmin(_from, _to);\n    }\n\n    /*     \n    * Set URI for NFT with tokenId \n    */\n    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(_tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[_tokenId] = _tokenURI;\n\n        emit SetTokenURI(_tokenId, _tokenURI);\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n        string memory _tokenURI = _tokenURIs[tokenId];\n        \n        return _tokenURI;\n    }\n\n    /*\n    * Pause sale if active, make active if paused\n    */\n    function flipMintableState() public {\n        mintIsActive = !mintIsActive;\n    }\n\n    /**\n    * Mint Animals\n    */\n    function mint() public nonReentrant\n    {\n        uint tokenID = totalSupply();\n        \n        _safeMint(msg.sender, tokenID);\n        _setTokenURI(tokenID, \"it's uri\");\n\n        emit MintAnimal(msg.sender, tokenID, \"it's uri\");\n        emit Expired(msg.sender);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "contracts/reference/DeepGoNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/**\n * @title DeepGoNFT contract\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\n */\ncontract DeepGoNFT is ERC721Enumerable, ReentrancyGuard, Ownable {\n    using SafeMath for uint256;\n    using Strings for uint256;\n\n    address public admin;\n    uint256 public MAX_ANIMALS;\n    uint256 public totalWhitelisted;\n    bool public mintIsActive = true;\n\n    mapping(uint256 => string) private _tokenURIs;\n    mapping(address => bool) public whitelisted;\n    mapping(address => uint256) public tokenIdOf;\n    mapping(address => bool) public expired;\n\n    event SetTokenURI(uint256 _tokenId, string _tokenURI);\n    event TransferAdmin(address indexed from, address indexed to);\n    event Whitelist(address indexed addr);\n    event MintAnimal(address indexed addr, uint256 tokenId, string _tokenURI);\n    event Expired(address _addr);\n\n    modifier onlyAdmin() {\n        require(address(msg.sender) == admin, \"Not Permit\");\n        _;\n    }\n\n    constructor(string memory name, string memory symbol, uint256 maxNftSupply) ERC721(name, symbol) {\n        admin = msg.sender;\n        MAX_ANIMALS = maxNftSupply;\n    }\n\n    /*     \n    * Transfer admin\n    */\n    function transferAdmin(address _to) onlyOwner external {\n        require(_to != admin, \"Transfer Meaningless\");\n        address _from = admin;\n        admin = _to;\n\n        emit TransferAdmin(_from, _to);\n    }\n\n    /*     \n    * Set URI for NFT with tokenId \n    */\n    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(_tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[_tokenId] = _tokenURI;\n\n        emit SetTokenURI(_tokenId, _tokenURI);\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n        string memory _tokenURI = _tokenURIs[tokenId];\n        \n        return _tokenURI;\n    }\n\n    /*\n    * Pause sale if active, make active if paused\n    */\n    function flipMintableState() public onlyAdmin {\n        mintIsActive = !mintIsActive;\n    }\n\n    /**\n    * Mint Animals\n    */\n    function mintAnimal(string memory _tokenURI) public nonReentrant {\n        require(whitelisted[msg.sender], \"Not whitelisted\");\n        require(!expired[msg.sender], \"Expired\");\n        require(mintIsActive, \"Unactive to mint Animal\");\n        require(totalSupply().add(1) <= MAX_ANIMALS, \"Mint would exceed max supply of Animals\");\n        \n        // uint mintIndex = totalSupply();\n        uint tokenID = tokenIdOf[msg.sender];\n        \n        _safeMint(msg.sender, tokenID);\n        _setTokenURI(tokenID, _tokenURI);\n        expired[msg.sender] = true;\n\n        emit MintAnimal(msg.sender, tokenID, _tokenURI);\n        emit Expired(msg.sender);\n    }\n\n    /**\n    * Address is whitelisted\n    */\n    function whitelist(address _addr) external onlyAdmin {\n        require(!whitelisted[_addr], \"Whitelisted before\");\n        require(totalWhitelisted < MAX_ANIMALS, \"Mint would exceed max supply of Animals\");\n        whitelisted[_addr] = true;\n        tokenIdOf[_addr] = totalWhitelisted;\n        totalWhitelisted += 1;\n\n        emit Whitelist(_addr);\n    }\n}\n"
    },
    "contracts/reference/GDAOLiquidity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// GovTreasurer is the treasurer of DGT. She may allocate DGT and she is a fair lady <3\n// Note that it's ownable and the owner wields tremendous power. The ownership\n// will be transferred to a governance smart contract once DGT is sufficiently\n// distributed and the community can show to govern itself.\ncontract LiquidityMining2 is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    // 合约owner\n    address devaddr;\n    // 收取挖矿费率的财务部门地址\n    address public treasury;\n    // DGT合约交互地址\n    IERC20 public DGT;\n    // todo：奖励截止时间：使用blocktime\n    uint256 public bonusEndBlock;\n    // todo：每个block分发的DGT数量\n    // polygon上Staking挖矿和流动性挖矿的总量: \n    // 首月 - staking(25wDGT) + 流动性挖矿(25wDGT): 0.4 DGT/perblock\n    uint256 public DGTPerBlock;\n\n    // INFO | USER VARIABLES\n    struct UserInfo {\n        uint256 amount;     // How many tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // The pending DGT entitled to a user is referred to as the pending reward:\n        //   每次有份额加入或退出时，对收益进行结算\n        //   pending reward = (user.amount * pool.accDGTPerShare) - user.rewardDebt ( - user.taxedAmount)\n        //\n        // Upon deposit and withdraw, the following occur:\n        //   1. The pool's `accDGTPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated and taxed as 'taxedAmount'.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // INFO | POOL VARIABLES\n    struct PoolInfo {\n        IERC20 token;             // Address of token contract.\n        uint256 allocPoint;       // How many allocation points assigned to this pool. DGTs to distribute per block.\n        uint256 taxRate;          // Rate at which the LP token is taxed.\n        uint256 lastRewardBlock;  // Last block number that DGTs distribution occurs.\n        uint256 accDGTPerShare;   // Accumulated DGTs per share, times 1e12. See below.\n    }\n\n    PoolInfo[] public poolInfo;\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n    uint256 public totalAllocPoint = 0;\n    uint256 public startBlock;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(IERC20 _DGT, address _treasury, uint256 _DGTPerBlock, uint256 _startBlock, uint256 _bonusEndBlock) {\n        DGT = _DGT;\n        treasury = _treasury;\n        devaddr = msg.sender;\n        DGTPerBlock = _DGTPerBlock;\n        startBlock = _startBlock;\n        bonusEndBlock = _bonusEndBlock;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n\n    // VALIDATION | ELIMINATES POOL DUPLICATION RISK\n    function checkPoolDuplicate(IERC20 _token) public view {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            require(poolInfo[pid].token != _token, \"add: existing pool?\");\n        }\n    }\n\n    // ADD | NEW TOKEN POOL\n    function add(uint256 _allocPoint, IERC20 _token, uint256 _taxRate, bool _withUpdate) public \n        onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint); //  todo: 设定单池分配点，用于计算分配比例？\n        poolInfo.push(PoolInfo({\n            token: _token,\n            allocPoint: _allocPoint,\n            taxRate: _taxRate,\n            lastRewardBlock: lastRewardBlock,\n            accDGTPerShare: 0\n        }));\n    }\n\n    // UPDATE | ALLOCATION POINT\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    // RETURN | REWARD MULTIPLIER OVER GIVEN BLOCK RANGE | INCLUDES START BLOCK\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        _from = _from >= startBlock ? _from : startBlock;\n        if (_to <= bonusEndBlock) {\n            return _to.sub(_from);\n        } else if (_from >= bonusEndBlock) {\n            return _to.sub(_from);\n        } else {\n            return bonusEndBlock.sub(_from).add(\n                _to.sub(bonusEndBlock)\n            );\n        }\n    }\n\n    // VIEW | PENDING REWARD，返回用户当前的未提取收益\n    function pendingDGT(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accDGTPerShare = pool.accDGTPerShare;\n        uint256 lpSupply = pool.token.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 DGTReward = multiplier.mul(DGTPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accDGTPerShare = accDGTPerShare.add(DGTReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accDGTPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // UPDATE | (ALL) REWARD VARIABLES | BEWARE: HIGH GAS POTENTIAL\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // UPDATE | (ONE POOL) REWARD VARIABLES\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.token.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        // todo: 获得乘数，即block数量\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        // DGT奖励 = 乘数 * dgt / block *  单池分配比例\n        uint256 DGTReward = multiplier.mul(DGTPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        safeDGTTransfer(address(this), DGTReward);\n        // 累计每份lp奖励现值 = 累计每份lp奖励前值 + DGT奖励 * 1e12 / lp总量\n        pool.accDGTPerShare = pool.accDGTPerShare.add(DGTReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    // VALIDATE | AUTHENTICATE _PID\n    modifier validatePool(uint256 _pid) {\n        require(_pid < poolInfo.length, \"gov: pool exists?\");\n        _;\n    }\n\n    // WITHDRAW | ASSETS (TOKENS) WITH NO REWARDS | EMERGENCY ONLY\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        \n        user.amount = 0;\n        user.rewardDebt = 0;\n        \n        pool.token.safeTransfer(address(msg.sender), user.amount);\n\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);        \n    }\n\n    // DEPOSIT | ASSETS (TOKENS)\n    function deposit(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        // uint256 taxedAmount = _amount.div(pool.taxRate);\n\n        if (user.amount > 0) { // if there are already some amount deposited\n            uint256 pending = user.amount.mul(pool.accDGTPerShare).div(1e12).sub(user.rewardDebt);\n            if(pending > 0) { // sends pending rewards, if applicable\n                safeDGTTransfer(msg.sender, pending);\n            }\n        }\n        \n        if(_amount > 0) { // if adding more\n            pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\n            // pool.token.safeTransferFrom(address(msg.sender), address(treasury), taxedAmount);\n            user.amount = user.amount.add(_amount); // update user.amount = non-taxed amount\n        }\n        // 100lp token, 10dgt/share -> 12dgt/share, 应该分配的是2 dgt/share\n        user.rewardDebt = user.amount.mul(pool.accDGTPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // WITHDRAW | ASSETS (TOKENS)\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accDGTPerShare).div(1e12).sub(user.rewardDebt);\n\n        if(pending > 0) { // send pending DGT rewards\n            safeDGTTransfer(msg.sender, pending);\n        }\n        \n        if(_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.token.safeTransfer(address(msg.sender), _amount);\n        }\n        \n        user.rewardDebt = user.amount.mul(pool.accDGTPerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // SAFE TRANSFER FUNCTION | ACCOUNTS FOR ROUNDING ERRORS | ENSURES SUFFICIENT DGT IN POOLS.\n    function safeDGTTransfer(address _to, uint256 _amount) internal {\n        uint256 DGTBal = DGT.balanceOf(address(this));\n        if (_amount > DGTBal) {\n            DGT.transfer(_to, DGTBal);\n        } else {\n            DGT.transfer(_to, _amount);\n        }\n    }\n\n    // UPDATE | DEV ADDRESS | DEV-ONLY\n    function dev(address _devaddr) public {\n        require(msg.sender == devaddr, \"dev: wut?\");\n        devaddr = _devaddr;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/mining/Treasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"../utils/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../voyager/VoyagerStorage.sol\";\nimport \"hardhat/console.sol\";\n\npragma solidity ^0.8.0;\n\ncontract Treasury is AccessControl{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    // 合约owner\n    address private devaddr;\n    // 收取挖矿费率的财务部门地址\n    address private treasury;\n    // DGT合约交互地址\n    IERC20 private DGT;\n    // NFT合约交互地址\n    VoyagerStorage private NFT;\n    // todo：奖励截止时间：使用blocktime\n    uint256 private bonusEndBlock;\n    // todo：每个block分发的DGT数量\n    // polygon上Staking挖矿和流动性挖矿的总量: \n    // 首月 - staking(25wDGT) + 流动性挖矿(25wDGT): 0.4 DGT/perblock\n    uint256 private DGTPerBlock;\n\n    // staking收益Level分层\n    // todo: 数值设定从整数开始\n    mapping (uint256 => uint256) public weightOfLevel;\n    mapping (address => uint256) public stakeShareOf;\n    mapping (address => uint256) public stakeTokenId;\n    uint256 public totalStakeShare;\n\n    // INFO | USER VARIABLES\n    struct UserInfo {\n        uint256 amount;     // How many tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        // uint256 maxLevel;\n        uint256 share;      // set for staking mining\n        //\n        // The pending DGT entitled to a user is referred to as the pending reward:\n        //   每次有份额加入或退出时，对收益进行结算\n        //   pending reward = (user.amount * pool.accDGTPerShare) - user.rewardDebt ( - user.taxedAmount)\n        //\n        // Upon deposit and withdraw, the following occur:\n        //   1. The pool's `accDGTPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated and taxed as 'taxedAmount'.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // INFO | POOL VARIABLES\n    struct PoolInfo {\n        IERC20 token;             // Address of token contract.\n        uint256 allocPoint;       // How many allocation points assigned to this pool. DGTs to distribute per block.\n        uint256 taxRate;          // Rate at which the LP token is taxed.\n        uint256 lastRewardBlock;  // Last block number that DGTs distribution occurs.\n        uint256 accDGTPerShare;   // Accumulated DGTs per share, times 1e12. See below.\n    }\n\n    PoolInfo[] private poolInfo;\n    mapping (uint256 => mapping (address => UserInfo)) private userInfo;\n    uint256 private totalAllocPoint = 0;\n    uint256 private startBlock;\n\n    constructor(\n        address _DGT, \n        address NFT_,\n        uint256 _DGTPerBlock, \n        uint256 _startBlock, \n        uint256 _bonusEndBlock\n    ) {\n        DGT = IERC20(_DGT);\n        NFT = VoyagerStorage(NFT_);\n        // treasury = _treasury;\n        devaddr = msg.sender;\n        DGTPerBlock = _DGTPerBlock;\n        startBlock = _startBlock;\n        bonusEndBlock = _bonusEndBlock;\n        console.log(\"treasury deploy success\");\n    }\n\n    function initializeWeightOfLevel(uint _maxLevel) public onlyOwner {\n        for (uint level=0; level < _maxLevel+1; level++) {\n            weightOfLevel[level] = 1;\n        }\n    }\n\n    function setWeightOfLevel(uint level, uint weight) public onlyOwner {\n        weightOfLevel[level] = weight;\n    }\n\n    function getDevaddr() external view returns (address) {\n        return devaddr;\n    }\n\n    function setDevaddr(address _addr) public onlyProxy notZeroAddress(_addr) {\n        devaddr = _addr;\n    }\n\n    function setStakeTokenId(address _user, uint _tokenId) public onlyProxy {\n        stakeTokenId[_user] = _tokenId;\n    }\n\n    function getDGT() external view returns (IERC20) {\n        return DGT;\n    }\n    \n    function getStartBlock() external view returns (uint) {\n        return startBlock;\n    }\n\n    function getSingleAllocPoint(uint _pid) external view returns (uint) {\n        return poolInfo[_pid].allocPoint;\n    }\n\n    function getTotalAllocPoint() external view returns (uint) {\n        return totalAllocPoint;\n    }\n\n    function getPoolInfo() external view returns (PoolInfo[] memory) {\n        return poolInfo;\n    }\n\n    function getPool(uint _pid) public view returns (PoolInfo memory) {\n        return poolInfo[_pid];\n    }\n\n    function getDGTPerBlock() external view returns (uint) {\n        return DGTPerBlock;\n    }\n\n    function setDGTPerBlock(uint _DGTPerBlock) external onlyProxy {\n        DGTPerBlock = _DGTPerBlock;\n    }\n\n    function getAccDGTPerShare(uint _pid) external view returns (uint) {\n        return getPool(_pid).accDGTPerShare;\n    }\n\n    function getUserInfo(uint _pid, address _user) public view returns (UserInfo memory) {\n        return userInfo[_pid][_user];\n    }\n\n    // function getUserMaxLevel(uint _pid, address _user) public view returns (uint) {\n    //     return userInfo[_pid][_user].maxLevel;\n    // }\n\n    function setTotalStakeShare(uint _value) public onlyProxy {\n        totalStakeShare = _value;\n    } \n\n    function setStakeShareOfUser(address _user, uint _share) public onlyProxy {\n        stakeShareOf[_user] = _share;\n    }\n\n    function setUserAmount(uint _pid, address _user, uint _amount) public onlyProxy {\n        userInfo[_pid][_user].amount = _amount;\n    }\n\n    function setUserShare(uint _pid, address _user, uint _amount) public onlyProxy {\n        userInfo[_pid][_user].share = _amount;\n    }\n\n    function setUserRewardDebt(uint _pid, address _user, uint _amount) public onlyProxy {\n        userInfo[_pid][_user].rewardDebt = _amount;\n    }\n\n    function getUserReward(uint _pid, address _addr) public view returns (uint pending) {\n        if (_pid==0) {\n            pending = getUserInfo(_pid, _addr).share.mul(getPool(_pid).accDGTPerShare).div(1e12)\n                            .sub(getUserInfo(_pid, _addr).rewardDebt);\n        } else {\n            pending = getUserInfo(_pid, _addr).amount.mul(getPool(_pid).accDGTPerShare).div(1e12)\n                            .sub(getUserInfo(_pid, _addr).rewardDebt);\n        }\n    }\n\n    // function setUserMaxLevel(uint _pid, address _user, uint _maxLevel) public onlyProxy {\n    //     userInfo[_pid][_user].maxLevel = _maxLevel;\n    // }\n\n    function setAccDGTPerShare(uint _pid, uint _accDGTPerShare)  public onlyProxy {\n        poolInfo[_pid].accDGTPerShare = _accDGTPerShare;\n    }\n\n    function getLastRewardBlock(uint _pid) external view returns (uint) {\n        return getPool(_pid).lastRewardBlock;\n    }\n\n    function setLastRewardBlock(uint _pid, uint _lastRewardBlock) public onlyProxy {\n        poolInfo[_pid].lastRewardBlock = _lastRewardBlock;\n    }\n\n    function getPoolToken(uint _pid) external view returns (IERC20) {\n        return getPool(_pid).token;\n    }\n\n    function setTotalAllocPoint(uint _value) public onlyProxy {\n        totalAllocPoint = _value;\n    }\n\n    function setSingleAllocPoint(uint _pid, uint _value) public onlyProxy {\n        poolInfo[_pid].allocPoint = _value;\n    }\n\n    function addPool(PoolInfo memory _pool) public onlyProxy {\n        poolInfo.push(_pool);\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    function transferDGT(address _to, uint _value) public onlyProxy {\n        DGT.transfer(_to, _value);\n    }\n\n    function transferNFT(address to_, uint tokenId_) public onlyProxy {\n        NFT.transferVoyager(to_, tokenId_);\n    }\n\n    function withdrawNFT(address to_, uint tokenId_) public onlyOwner {\n        NFT.transferVoyager(to_, tokenId_);\n    }\n\n    function withdrawDGT(uint value_) public onlyOwner {\n        if ( DGT.balanceOf(address(this)) < value_) {\n            value_ = DGT.balanceOf(address(this));\n        }\n\n        DGT.transfer(msg.sender, value_);\n    }\n\n    // VALIDATION | ELIMINATES POOL DUPLICATION RISK\n    function checkPoolDuplicate(IERC20 _token) public view {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            require(poolInfo[pid].token != _token, \"add: existing pool?\");\n        }\n    }\n\n    // RETURN | REWARD MULTIPLIER OVER GIVEN BLOCK RANGE | INCLUDES START BLOCK\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        _from = _from >= startBlock ? _from : startBlock;\n        if (_to <= bonusEndBlock) {\n            return _to.sub(_from);\n        } else if (_from >= bonusEndBlock) {\n            return _to.sub(_from);\n        } else {\n            return bonusEndBlock.sub(_from).add(\n                _to.sub(bonusEndBlock)\n            );\n        }\n    }\n\n    // VIEW | PENDING REWARD，返回用户当前的未提取收益\n    function pendingDGT(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accDGTPerShare = pool.accDGTPerShare;\n        uint256 lpSupply = pool.token.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 DGTReward = multiplier.mul(DGTPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accDGTPerShare = accDGTPerShare.add(DGTReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accDGTPerShare).div(1e12).sub(user.rewardDebt);\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/mining/LiquidityMining.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../utils/AccessControl.sol\";\nimport \"../voyager/VoyagerStorage.sol\";\nimport \"./Treasury.sol\";\n\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n// import \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"hardhat/console.sol\";\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// GovTreasurer is the treasurer of DGT. She may allocate DGT and she is a fair lady <3\n// Note that it's ownable and the owner wields tremendous power. The ownership\n// will be transferred to a governance smart contract once DGT is sufficiently\n// distributed and the community can show to govern itself.\ncontract LiquidityMining is AccessControl {\n    using SafeMath for uint;\n    using SafeERC20 for IERC20;\n\n    VoyagerStorage internal vs;\n    Treasury internal ts;\n    \n    // 设定pid=0时，为StakingMining，获取user的maxLevel, 根据用户maxLevel加权分配比例\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        address _treasury,\n        address _voyagerStorage\n    )\n    {\n        require(_treasury != address(0) , \"Invalid Address\");\n        require(_voyagerStorage != address(0) , \"Invalid Address\");\n        ts = Treasury(_treasury);\n        vs = VoyagerStorage(_voyagerStorage);\n    }\n\n    function setDGTPerBlock(uint _DGTPerBlock) external {\n        ts.setDGTPerBlock(_DGTPerBlock);\n    }\n\n    function getMaxLevel(address _user) public view returns (uint) {\n        uint tokenId = ts.stakeTokenId(_user);\n\n        if (tokenId == 0) {\n            return 0;\n        }\n\n        return vs.getLevel(tokenId);\n    }\n\n    function updateShare() internal {\n        uint maxLevel = getMaxLevel(msg.sender);\n        uint lastUserShare = ts.getUserInfo(0, msg.sender).share;\n        uint curUserShare = ts.getUserInfo(0, msg.sender).amount * ts.weightOfLevel(maxLevel);\n        uint lastTotalStakeShare = ts.totalStakeShare();\n        ts.setTotalStakeShare(lastTotalStakeShare.sub(lastUserShare).add(curUserShare));\n        ts.setUserShare(0, msg.sender, curUserShare);   \n    }\n\n    // Staking Mining用户质押NFT\n    // 需要用户先vs.approve(address(this), tokenId)\n    function stakeNFT(uint tokenId) public {\n        require(ts.stakeTokenId(msg.sender) == 0 ,\"NFT Already staked\");\n\n        ts.setStakeTokenId(msg.sender, tokenId);\n        // NFT转到treasury\n        vs.transferFrom(msg.sender, address(ts), tokenId);\n\n        updateStakingPool();\n        \n        if(ts.getUserInfo(0, msg.sender).amount > 0) {\n            // share * reward/share - reward fulfilled \n            uint256 pending = ts.getUserInfo(0, msg.sender).share.mul(ts.getAccDGTPerShare(0)).div(1e12)\n                                .sub(ts.getUserInfo(0, msg.sender).rewardDebt);\n\n            if(pending > 0) {\n                safeDGTTransfer(msg.sender, pending);\n            }\n        }\n\n        updateShare();\n\n        uint _rewardDebt = ts.getUserInfo(0, msg.sender).share.mul(ts.getPool(0).accDGTPerShare).div(1e12);\n        ts.setUserRewardDebt(0, msg.sender, _rewardDebt);\n        // emit Deposit(msg.sender, 0, _amount);           \n    }\n\n    // Staking Mining解除质押NFT \n    function unstakeNFT() public {\n        require(ts.stakeTokenId(msg.sender) > 0 ,\"No NFT staked\");\n\n        uint tokenId = ts.stakeTokenId(msg.sender);\n        // NFT从treasury转回用户\n        ts.transferNFT(msg.sender, tokenId);\n        // 更新用户质押NFT等级\n        ts.setStakeTokenId(msg.sender, 0);\n\n        updateStakingPool();\n        \n        uint256 pending = ts.getUserInfo(0, msg.sender).share.mul(ts.getPool(0).accDGTPerShare).div(1e12)\n                            .sub(ts.getUserInfo(0, msg.sender).rewardDebt);\n\n        if (pending > 0) {\n            safeDGTTransfer(msg.sender, pending);\n        }\n\n        updateShare();\n\n        uint _rewardDebt = ts.getUserInfo(0, msg.sender).share.mul(ts.getPool(0).accDGTPerShare).div(1e12);\n        ts.setUserRewardDebt(0, msg.sender, _rewardDebt);\n    }\n\n    // ADD | NEW TOKEN POOL\n    function add(uint256 _allocPoint, IERC20 _token, uint256 _taxRate, bool _withUpdate) public \n        onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > ts.getStartBlock() ? block.number : ts.getStartBlock();\n        ts.setTotalAllocPoint(ts.getTotalAllocPoint().add(_allocPoint)); //  todo: 设定单池分配点，用于计算分配比例？\n        ts.addPool(Treasury.PoolInfo({\n            token: _token,\n            allocPoint: _allocPoint,\n            taxRate: _taxRate,\n            lastRewardBlock: lastRewardBlock,\n            accDGTPerShare: 0\n        }));\n    }\n\n    // UPDATE | ALLOCATION POINT\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint _totalAllocPoint = ts.getTotalAllocPoint().sub(ts.getPool(_pid).allocPoint).add(_allocPoint);\n        ts.setTotalAllocPoint(_totalAllocPoint);\n        ts.setSingleAllocPoint(_pid, _allocPoint);\n        // poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    // UPDATE | (ALL) REWARD VARIABLES | BEWARE: HIGH GAS POTENTIAL\n    function massUpdatePools() public {\n        uint256 length = ts.getPoolInfo().length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // todo: checked\n    // UPDATE | (ONE POOL) REWARD VARIABLES\n    function updatePool(uint256 _pid) public {\n        // PoolInfo storage pool = ts.getPool(_pid);\n        if (block.number <= ts.getLastRewardBlock(_pid)) { // get\n            return;\n        }\n        uint256 lpSupply = ts.getPoolToken(_pid).balanceOf(address(this));\n        if (lpSupply == 0) {\n            ts.setLastRewardBlock(_pid, block.number); // set\n            return;\n        }\n        // todo: 获得乘数，即block数量\n        uint256 multiplier = ts.getMultiplier(ts.getLastRewardBlock(_pid), block.number);\n        // DGT奖励 = 乘数 * dgt / block *  单池分配比例\n        uint256 DGTReward = multiplier.mul(ts.getDGTPerBlock()).mul(ts.getSingleAllocPoint(_pid)).div(ts.getTotalAllocPoint());\n        // // 将奖励金额转入当前合约\n        // safeDGTTransfer(address(this), DGTReward);\n        // 累计每份lp奖励现值 = 累计每份lp奖励前值 + DGT奖励 * 1e12 / lp总量\n        uint _accDGTPerShare = ts.getAccDGTPerShare(_pid).add(DGTReward.mul(1e12).div(lpSupply)); // set\n        // pool.accDGTPerShare\n        ts.setAccDGTPerShare(_pid, _accDGTPerShare);\n        ts.setLastRewardBlock(_pid, block.number); // set \n    }\n\n    // todo: checked\n    // 质押NFT\n    // 解除质押NFT\n    // 入金: 1. DGT奖励总额不变；2. 池子的累积DGT奖励per share，share分母 = sum(每个lpSupply * 权重)\n    // 出金\n    function updateStakingPool() public {\n        if (block.number <= ts.getLastRewardBlock(0)) { // get\n            return;\n        }\n        // 原lpSupply的状态获取\n        uint256 totalStakeShare = ts.totalStakeShare();\n        if (totalStakeShare == 0) {\n            ts.setLastRewardBlock(0, block.number); // set\n            return;\n        }  \n\n        uint256 multiplier = ts.getMultiplier(ts.getLastRewardBlock(0), block.number);\n        console.log(\"multiplier is: %s\", multiplier);\n        console.log(\"DGTPerBlock is: %s\", ts.getDGTPerBlock());\n        console.log(\"SingleAllocPoint is: %s\", ts.getSingleAllocPoint(0));\n        console.log(\"TotalAllocPoint is: %s\", ts.getTotalAllocPoint());\n        // DGT奖励 = 乘数 * dgt / block *  单池分配比例\n        uint256 DGTReward = multiplier.mul(ts.getDGTPerBlock()).mul(ts.getSingleAllocPoint(0))\n                                      .div(ts.getTotalAllocPoint());\n        // safeDGTTransfer(address(this), DGTReward);\n\n        uint _accDGTPerShare = ts.getAccDGTPerShare(0).add(DGTReward.mul(1e12)\n                                 .div(totalStakeShare));\n        console.log(\"accDGTPerShare is: %s\", _accDGTPerShare);\n        ts.setAccDGTPerShare(0, _accDGTPerShare);\n        ts.setLastRewardBlock(0, block.number); \n    }\n\n    // VALIDATE | AUTHENTICATE _PID\n    modifier validatePool(uint256 _pid) {\n        require(_pid < ts.getPoolInfo().length, \"gov: pool exists?\");\n        _;\n    }\n\n    // WITHDRAW | ASSETS (TOKENS) WITH NO REWARDS | EMERGENCY ONLY\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\n        // PoolInfo storage pool = poolInfo[_pid];\n        // UserInfo storage user = userInfo[_pid][msg.sender];\n        \n        ts.setUserAmount(_pid, msg.sender, 0);\n        // user.amount = 0;\n        ts.setUserRewardDebt(_pid, msg.sender, 0);\n        // user.rewardDebt = 0;\n        \n        ts.getPoolToken(_pid).safeTransfer(address(msg.sender), ts.getUserInfo(_pid, msg.sender).amount);\n\n        emit EmergencyWithdraw(msg.sender, _pid, ts.getUserInfo(_pid, msg.sender).amount);        \n    }\n\n    // DEPOSIT | ASSETS (TOKENS)\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\n        // PoolInfo storage pool = poolInfo[_pid];\n        // UserInfo storage user = userInfo[_pid][msg.sender];\n        require(_pid > 0, \"Only for liquidity mining\");\n        updatePool(_pid);\n        // uint256 taxedAmount = _amount.div(pool.taxRate);\n\n        if (ts.getUserInfo(_pid, msg.sender).amount > 0) { // if there are already some amount deposited\n            uint256 pending = ts.getUserInfo(_pid, msg.sender).amount.mul(ts.getAccDGTPerShare(_pid)).div(1e12)\n                                .sub(ts.getUserInfo(_pid, msg.sender).rewardDebt);\n            if(pending > 0) { // sends pending rewards, if applicable\n                safeDGTTransfer(msg.sender, pending);\n            }\n        }\n        \n        if(_amount > 0) { // if adding more\n            ts.getPool(_pid).token.safeTransferFrom(address(msg.sender), address(this), _amount);\n            // pool.token.safeTransferFrom(address(msg.sender), address(treasury), taxedAmount);\n            uint userAmount = ts.getUserInfo(_pid, msg.sender).amount.add(_amount); // update user.amount = non-taxed amount\n            ts.setUserAmount(_pid, msg.sender, userAmount);\n        }\n\n        // 100lp token, 10dgt/share -> 12dgt/share, 应该分配的是2 dgt/share\n        uint _rewardDebt = ts.getUserInfo(_pid, msg.sender).amount.mul(ts.getPool(_pid).accDGTPerShare).div(1e12);\n        ts.setUserRewardDebt(_pid, msg.sender, _rewardDebt);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    function depositStaking(uint _amount) public nonReentrant {\n        updateStakingPool();\n\n        if(ts.getUserInfo(0, msg.sender).amount > 0) {\n            // share * reward/share - reward fulfilled \n            uint256 pending = ts.getUserInfo(0, msg.sender).share.mul(ts.getAccDGTPerShare(0)).div(1e12)\n                                .sub(ts.getUserInfo(0, msg.sender).rewardDebt);\n\n            if(pending > 0) {\n                safeDGTTransfer(msg.sender, pending);\n            }\n        }\n\n        if(_amount > 0) {\n            // 转账完成的同时，更新totalShare和user Share\n            ts.getPool(0).token.safeTransferFrom(address(msg.sender), address(this), _amount);\n\n            uint userAmount = ts.getUserInfo(0, msg.sender).amount.add(_amount);\n            ts.setUserAmount(0, msg.sender, userAmount);\n\n            updateShare();\n        }\n\n        uint _rewardDebt = ts.getUserInfo(0, msg.sender).share.mul(ts.getPool(0).accDGTPerShare).div(1e12);\n        ts.setUserRewardDebt(0, msg.sender, _rewardDebt);\n        emit Deposit(msg.sender, 0, _amount);\n    }\n\n    // WITHDRAW | ASSETS (TOKENS)\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\n        // PoolInfo storage pool = poolInfo[_pid];\n        // UserInfo storage user = userInfo[_pid][msg.sender];\n        require(ts.getUserInfo(_pid, msg.sender).amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = ts.getUserInfo(_pid, msg.sender).amount.mul(ts.getPool(_pid).accDGTPerShare).div(1e12)\n                            .sub(ts.getUserInfo(_pid, msg.sender).rewardDebt);\n\n        if (pending > 0) { // send pending DGT rewards\n            safeDGTTransfer(msg.sender, pending);\n        }\n        \n        if (_amount > 0) {\n            ts.setUserAmount(_pid, msg.sender, ts.getUserInfo(_pid, msg.sender).amount.sub(_amount));\n            // user.amount = user.amount.sub(_amount);\n            ts.getPool(_pid).token.safeTransfer(address(msg.sender), _amount);\n        }\n        \n        uint _rewardDebt = ts.getUserInfo(_pid, msg.sender).amount.mul(ts.getPool(_pid).accDGTPerShare).div(1e12);\n        ts.setUserRewardDebt(_pid, msg.sender, _rewardDebt);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // 质押NFT的过程会改变share\n    // \n    // 1. 入金:\n    // deposit转入资金之前，更新cur acc reward/share = last acc reward/share + delta,更新block.number\n    // 计算用户当前share * cur acc reward/share - fulfilled reward，并结算转账\n    // 更新totalShare和用户share，fulfilled reward = (share + delta share) * cur acc reward/share\n    //\n    // \n    function withdrawStaking(\n        uint256 _amount\n    ) public nonReentrant \n    {\n        require(ts.getUserInfo(0, msg.sender).amount >= _amount, \"withdraw: not good\");\n\n        updateStakingPool();\n        uint256 pending = ts.getUserInfo(0, msg.sender).share.mul(ts.getPool(0).accDGTPerShare).div(1e12)\n                            .sub(ts.getUserInfo(0, msg.sender).rewardDebt);\n\n        if (pending > 0) {\n            safeDGTTransfer(msg.sender, pending);\n        }\n\n        if (_amount > 0) {\n            ts.setUserAmount(0, msg.sender, ts.getUserInfo(0, msg.sender).amount.sub(_amount));\n            // user.amount = user.amount.sub(_amount);\n            ts.getPool(0).token.safeTransfer(address(msg.sender), _amount);\n\n            updateShare();\n        }\n\n        uint _rewardDebt = ts.getUserInfo(0, msg.sender).share.mul(ts.getPool(0).accDGTPerShare).div(1e12);\n        ts.setUserRewardDebt(0, msg.sender, _rewardDebt);\n        emit Withdraw(msg.sender, 0, _amount);\n    }\n\n    // SAFE TRANSFER FUNCTION | ACCOUNTS FOR ROUNDING ERRORS | ENSURES SUFFICIENT DGT IN POOLS.\n    function safeDGTTransfer(address _to, uint256 _amount) internal {\n        uint256 DGTBal = ts.getDGT().balanceOf(address(ts));\n        if (_amount > DGTBal) {\n            ts.transferDGT(_to, DGTBal);\n        } else {\n            ts.transferDGT(_to, _amount);\n        }\n    }\n\n    // UPDATE | DEV ADDRESS | DEV-ONLY\n    function dev(address _devaddr) public notZeroAddress(_devaddr) {\n        require(msg.sender == ts.getDevaddr(), \"dev: wut?\");\n        ts.setDevaddr(_devaddr);\n    }\n}\n"
    },
    "contracts/marketplace/Marketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity ^0.8.3;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./HasQuoteTokens.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract Marketplace is ReentrancyGuard, HasQuoteTokens{\n  using Counters for Counters.Counter;\n  using SafeERC20 for IERC20;\n\n  Counters.Counter private _itemIds;\n  Counters.Counter private _itemsSold;\n  // todo: mapping item to NFT contract and tokenID\n  // todo: mapping tokenId to item onsale\n  // todo: mapping tokneId to item array sold\n\n  //  payable(address) can use .transfer(..) and .send(..) on address payable, but not on address\n\n  struct MarketItem {\n    uint itemId;\n    // nft合约 \n    address nftContract;\n    // 出售的tokenID\n    uint256 tokenId;\n    // 出售者\n    address seller;\n    // todo: 所有者？\n    address owner;\n    // 价格\n    uint256 price;\n    // 计价单位\n    address quoteTokenContract;\n    // 已出售\n    bool sold;\n  }\n\n  // itemId到信息映射\n  mapping(uint256 => MarketItem) private idToMarketItem;\n\n  event MarketItemCreated (\n    uint indexed itemId,\n    address indexed nftContract,\n    uint256 indexed tokenId,\n    address seller,\n    address owner,\n    uint256 price,\n    address quoteTokenContract,\n    bool sold\n  );\n\n  event CreateMarketSale (\n    address indexed nftContract,\n    address indexed buyer,\n    uint256 indexed itemId\n  );\n\n//   /* Returns the listing price of the contract */\n//   function getListingPrice() public view returns (uint256) {\n//     return listingPrice;\n//   }\n\n  function createMarketItemByBNB(\n    address nftContract,\n    uint256 tokenId,\n    uint256 price\n  ) public nonReentrant\n  {\n    require(price > 0, \"Price must be at least 1 wei\");\n    // require(msg.value == listingPrice, \"Price must be equal to listing price\");\n\n    _itemIds.increment();\n    uint256 itemId = _itemIds.current();\n  \n    idToMarketItem[itemId] =  MarketItem(\n      itemId,\n      nftContract,\n      tokenId,\n      msg.sender,\n      address(0), // 挂售中，所有者为空\n      price,\n      address(0),\n      false\n    );\n\n    IERC721(nftContract).transferFrom(msg.sender, address(this), tokenId);\n\n    emit MarketItemCreated(\n      itemId,\n      nftContract,\n      tokenId,\n      msg.sender,\n      address(0),\n      price,\n      address(0),\n      false\n    );\n  }\n\n  /* Places an item for sale on the marketplace */\n  function createMarketItem(\n    address nftContract,\n    address quoteTokenContract,\n    uint256 tokenId,\n    uint256 price\n  ) public onlyQuoteToken(quoteTokenContract) nonReentrant {\n    require(price > 0, \"Price must be at least 1 wei\");\n\n    _itemIds.increment();\n    uint256 itemId = _itemIds.current();\n  \n    idToMarketItem[itemId] =  MarketItem(\n      itemId,\n      nftContract,\n      tokenId,\n      msg.sender,\n      address(0),\n      price,\n      quoteTokenContract,\n      false\n    );\n\n    IERC721(nftContract).transferFrom(msg.sender, address(this), tokenId);\n\n    emit MarketItemCreated(\n      itemId,\n      nftContract,\n      tokenId,\n      msg.sender,\n      address(0),\n      price,\n      quoteTokenContract,\n      false\n    );\n  }\n\n  function getQuoteTokenAddress(uint256 itemId) public view returns (address) {\n      return idToMarketItem[itemId].quoteTokenContract;\n  }\n\n  function getPrice(uint256 itemId) public view returns (uint) {\n      return idToMarketItem[itemId].price;\n  }\n\n  /* Creates the sale of a marketplace item */\n  /* Transfers ownership of the item, as well as funds between parties */\n  // warning： 转账之前由用户完成approve，approve(address to, uint256 tokenId)\n  // 用户直接转账到买家\n  // todo: 如果用户quoteTokenAddress不为0，则要先approve price数量代币转账权限\n  function createMarketSale(\n    address nftContract,\n    uint256 itemId\n  ) public payable nonReentrant {\n    uint price = idToMarketItem[itemId].price;\n    uint tokenId = idToMarketItem[itemId].tokenId;\n\n    address quoteTokenContract = idToMarketItem[itemId].quoteTokenContract;\n    if (quoteTokenContract == address(0)) {\n        require(msg.value == price, \"Please submit the asking price in order to complete the purchase\");\n        payable(idToMarketItem[itemId].seller).transfer(msg.value);\n    } else {\n        IERC20(quoteTokenContract).safeTransferFrom(msg.sender, idToMarketItem[itemId].seller, price);\n    }\n\n    IERC721(nftContract).transferFrom(address(this), msg.sender, tokenId);\n    idToMarketItem[itemId].owner = payable(msg.sender);\n    idToMarketItem[itemId].sold = true;\n    _itemsSold.increment();\n\n    emit CreateMarketSale(\n      nftContract,\n      msg.sender,\n      itemId\n    );\n  }\n\n  /* Returns all unsold market items */\n  function fetchUnsoldItems() public view returns (MarketItem[] memory) {\n    uint itemCount = _itemIds.current();\n    uint unsoldItemCount = _itemIds.current() - _itemsSold.current();\n    uint currentIndex = 0;\n\n    MarketItem[] memory items = new MarketItem[](unsoldItemCount);\n    for (uint i = 0; i < itemCount; i++) {\n      if (idToMarketItem[i + 1].owner == address(0)) {\n        uint currentId = i + 1;\n        MarketItem storage currentItem = idToMarketItem[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n    return items;\n  }\n\n  /* Returns all sold market items */\n  function fetchSoldItems() public view returns (MarketItem[] memory) {\n    uint itemCount = _itemIds.current();\n    uint unsoldItemCount = _itemIds.current() - _itemsSold.current();\n    uint currentIndex = 0;\n\n    MarketItem[] memory items = new MarketItem[](unsoldItemCount);\n    for (uint i = 0; i < itemCount; i++) {\n      if (idToMarketItem[i + 1].owner != address(0)) {\n        uint currentId = i + 1;\n        MarketItem storage currentItem = idToMarketItem[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n    return items;\n  }\n\n  /* Returns only items that a user's unsold */\n  function fetchOnesUnsold(address _owner) public view returns (MarketItem[] memory) {\n    uint totalItemCount = _itemIds.current();\n    uint itemCount = 0;\n    uint currentIndex = 0;\n\n    for (uint i = 0; i < totalItemCount; i++) {\n      if (idToMarketItem[i + 1].owner == _owner) {\n        itemCount += 1;\n      }\n    }\n\n    MarketItem[] memory items = new MarketItem[](itemCount);\n    for (uint i = 0; i < totalItemCount; i++) {\n      if (\n        idToMarketItem[i + 1].seller == _owner &&\n        idToMarketItem[i + 1].owner == address(0)\n      ) \n      {\n        uint currentId = i + 1;\n        MarketItem storage currentItem = idToMarketItem[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n    return items;\n  }\n\n /* Returns only items that a user's sold */\n  function fetchOnesSold(address _owner) public view returns (MarketItem[] memory) {\n    uint totalItemCount = _itemIds.current();\n    uint itemCount = 0;\n    uint currentIndex = 0;\n\n    for (uint i = 0; i < totalItemCount; i++) {\n      if (idToMarketItem[i + 1].owner == _owner) {\n        itemCount += 1;\n      }\n    }\n\n    MarketItem[] memory items = new MarketItem[](itemCount);\n    for (uint i = 0; i < totalItemCount; i++) {\n      if (\n        idToMarketItem[i + 1].seller == _owner &&\n        idToMarketItem[i + 1].owner != address(0)\n      ) \n      {\n        uint currentId = i + 1;\n        MarketItem storage currentItem = idToMarketItem[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n    return items;\n  }\n\n  /* Returns only items that a user has purchased */\n  function fetchTradeHistory(address _owner) public view returns (MarketItem[] memory) {\n    uint totalItemCount = _itemIds.current();\n    uint itemCount = 0;\n    uint currentIndex = 0;\n\n    for (uint i = 0; i < totalItemCount; i++) {\n      if (idToMarketItem[i + 1].owner == _owner) {\n        itemCount += 1;\n      }\n    }\n\n    MarketItem[] memory items = new MarketItem[](itemCount);\n    for (uint i = 0; i < totalItemCount; i++) {\n      if (idToMarketItem[i + 1].owner == _owner) {\n        uint currentId = i + 1;\n        MarketItem storage currentItem = idToMarketItem[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n    return items;\n  }\n\n  /* Returns only items a user has created */\n  function fetchItemsCreated() public view returns (MarketItem[] memory) {\n    uint totalItemCount = _itemIds.current();\n    uint itemCount = 0;\n    uint currentIndex = 0;\n\n    for (uint i = 0; i < totalItemCount; i++) {\n      if (idToMarketItem[i + 1].seller == msg.sender) {\n        itemCount += 1;\n      }\n    }\n\n    MarketItem[] memory items = new MarketItem[](itemCount);\n    for (uint i = 0; i < totalItemCount; i++) {\n      if (idToMarketItem[i + 1].seller == msg.sender) {\n        uint currentId = i + 1;\n        MarketItem storage currentItem = idToMarketItem[currentId];\n        items[currentIndex] = currentItem;\n        currentIndex += 1;\n      }\n    }\n    return items;\n  }\n\n  function getMarketItem(uint itemId) public view returns (MarketItem memory){\n    return idToMarketItem[itemId];\n  } \n\n  function withdrawNFT(address nftContract, address to_, uint tokenId_) public onlyOwner {\n    IERC721(nftContract).transferFrom(address(this), to_, tokenId_);\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/marketplace/HasQuoteTokens.sol": {
      "content": "// File: access/HasQuoteTokens.sol\n\npragma solidity ^0.8.0;\n\nimport \"../utils/AccessControl.sol\";\n\ncontract HasQuoteTokens is AccessControl {\n  event QuoteTokenAdded(address indexed _QuoteToken);\n  event QuoteTokenRemoved(address indexed _QuoteToken);\n\n  address[] public QuoteTokens;\n  mapping (address => bool) public QuoteToken;\n\n  modifier onlyQuoteToken(address _addr) {\n    require(QuoteToken[_addr]);\n    _;\n  }\n\n  function addQuoteTokens(address[] memory _addedQuoteTokens) public onlyAdmin {\n    address _QuoteToken;\n\n    for (uint256 i = 0; i < _addedQuoteTokens.length; i++) {\n      _QuoteToken = _addedQuoteTokens[i];\n\n      if (!QuoteToken[_QuoteToken]) {\n        QuoteTokens.push(_QuoteToken);\n        QuoteToken[_QuoteToken] = true;\n        emit QuoteTokenAdded(_QuoteToken);\n      }\n    }\n  }\n\n  function removeQuoteTokens(address[] memory _removedQuoteTokens) public onlyAdmin {\n    address _QuoteToken;\n\n    for (uint256 i = 0; i < _removedQuoteTokens.length; i++) {\n      _QuoteToken = _removedQuoteTokens[i];\n\n      if (QuoteToken[_QuoteToken]) {\n        QuoteToken[_QuoteToken] = false;\n        emit QuoteTokenRemoved(_QuoteToken);\n      }\n    }\n\n    uint256 i = 0;\n\n    while (i < QuoteTokens.length) {\n      _QuoteToken = QuoteTokens[i];\n\n      if (!QuoteToken[_QuoteToken]) {\n        QuoteTokens[i] = QuoteTokens[QuoteTokens.length - 1];\n        delete QuoteTokens[QuoteTokens.length - 1];\n      } else {\n        i++;\n      }\n    }\n  }\n\n  function isQuoteToken(address _addr) public view returns (bool) {\n    return QuoteToken[_addr];\n  }\n}"
    },
    "contracts/market/DeepGoAirdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../utils/Sig.sol\";\n\n// 功能设置：\n// 一、身份认证\n// 1. admin给获得空投领取权的用户账户签名\n// 2. 用户用签名领取空投\n//\n// 二、账本管理\n// 1. 接收一笔转账包含当期空投所需的所有代币\n// 2. \ncontract DeepGoAirdrop is ReentrancyGuard, Ownable {\n    using SafeERC20 for IERC20;\n\n    address public admin;\n    address tokenAddress;\n    uint256 perAirdrop;\n    uint256 totalAirdrop;\n    bool airdropIsActive = true;\n\n    mapping(address => bool) public expired;\n\n    event TransferAdmin(address indexed from, address indexed to);\n\n    modifier onlyAdmin() {\n        require(address(msg.sender) == admin, \"Not Permit\");\n        _;\n    }\n\n    constructor(\n        address _tokenAddress,\n        uint256 _perAirdrop,\n        uint256 _totalAirdrop\n    ) {\n        admin = msg.sender;\n        tokenAddress = _tokenAddress;\n        perAirdrop = _perAirdrop;\n        totalAirdrop = _totalAirdrop;\n    }\n\n    function verified(\n        bytes32 hash, \n        bytes memory signature\n    ) private view returns (bool)\n    {\n        return admin == Sig.recover(hash, signature);\n    }\n\n    function ethSignedHash(\n        address _addr\n    ) private pure returns(bytes32) \n    {\n        return Sig.ethSignedHash(_addr);\n    }\n\n    /*\n    * Pause sale if active, make active if paused\n    */\n    function flipActiveState() public onlyAdmin {\n        airdropIsActive = !airdropIsActive;\n    }\n\n    /*     \n    * Transfer admin\n    */\n    function transferAdmin(\n        address _to\n    ) onlyOwner external \n    {\n        require(_to != admin, \"Transfer Meaningless\");\n        address _from = admin;\n        admin = _to;\n\n        emit TransferAdmin(_from, _to);\n    }\n\n    function claimAirdrop(\n        bytes memory signature\n    ) public nonReentrant \n    {\n        require(verified(Sig.ethSignedHash(msg.sender), signature), \"Not verified\");\n        require(!expired[msg.sender], \"Expired\");\n        require(airdropIsActive, \"Unactive to mint Animal\");     \n        require(IERC20(tokenAddress).balanceOf(address(this)) >= perAirdrop, \n                \"Unsufficient token\");\n        IERC20(tokenAddress).safeTransfer(msg.sender, perAirdrop);  \n        expired[msg.sender] = true;\n    }\n\n    function balance(address _tokenAddress) public view returns (uint256) {\n        return IERC20(_tokenAddress).balanceOf(address(this));\n    }\n\n    function withdraw(\n        address _tokenAddress,\n        uint256 _amount\n    ) onlyOwner external \n    {\n        require(IERC20(_tokenAddress).balanceOf(address(this)) >= _amount, \n                \"Unsufficient token\");\n        IERC20(tokenAddress).safeTransfer(msg.sender, _amount); \n    }\n\n}\n"
    },
    "contracts/market/DeepGoNFTVerify.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../utils/Sig.sol\";\n\n/**\n * @title DeepGoNFT contract\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\n */\ncontract DeepGoNFTVerify is ERC721Enumerable, ReentrancyGuard, Ownable {\n    using SafeMath for uint256;\n    using Strings for uint256;\n\n    address public admin;\n    uint256 public MAX_ANIMALS;\n    bool public mintIsActive = true;\n\n    mapping(uint256 => string) private _tokenURIs;\n    mapping(address => bool) public expired;\n\n    event SetTokenURI(uint256 _tokenId, string _tokenURI);\n    event TransferAdmin(address indexed from, address indexed to);\n    event MintAnimal(address indexed addr, uint256 tokenId, string _tokenURI);\n    event Expired(address _addr);\n\n    modifier onlyAdmin() {\n        require(address(msg.sender) == admin, \"Not Permit\");\n        _;\n    }\n\n    function verified(bytes32 hash, bytes memory signature) public view returns (bool){\n        return admin == Sig.recover(hash, signature);\n    }\n\n    function addressHash(address _addr) public pure returns(bytes32) {\n        return Sig.addressHash(_addr);\n    }\n\n    function ethSignedHash(address _addr) public pure returns(bytes32) {\n        return Sig.ethSignedHash(_addr);\n    }\n\n    constructor(string memory name, string memory symbol, uint256 maxNftSupply) ERC721(name, symbol) {\n        admin = msg.sender;\n        MAX_ANIMALS = maxNftSupply;\n    }\n\n    /*     \n    * Transfer admin\n    */\n    function transferAdmin(address _to) external onlyOwner {\n        require(_to != admin, \"Transfer Meaningless\");\n        address _from = admin;\n        admin = _to;\n\n        emit TransferAdmin(_from, _to);\n    }\n\n    /*     \n    * Set URI for NFT with tokenId \n    */\n    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(_tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[_tokenId] = _tokenURI;\n\n        emit SetTokenURI(_tokenId, _tokenURI);\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n        string memory _tokenURI = _tokenURIs[tokenId];\n        \n        return _tokenURI;\n    }\n\n    /*\n    * Pause sale if active, make active if paused\n    */\n    function flipMintableState() public onlyAdmin {\n        mintIsActive = !mintIsActive;\n    }\n\n    /**\n    * Mint Animals\n    */\n    function mintAnimal(\n        string memory _tokenURI,\n        bytes memory signature\n    ) public nonReentrant\n    {\n        require(verified(Sig.ethSignedHash(msg.sender), signature), \"Not verified\");\n        require(!expired[msg.sender], \"Expired\");\n        require(mintIsActive, \"Unactive to mint Animal\");\n        require(totalSupply().add(1) <= MAX_ANIMALS, \"Mint would exceed max supply of Animals\");\n        \n        uint tokenID = totalSupply();\n        \n        _safeMint(msg.sender, tokenID);\n        _setTokenURI(tokenID, _tokenURI);\n        expired[msg.sender] = true;\n\n        emit MintAnimal(msg.sender, tokenID, _tokenURI);\n        emit Expired(msg.sender);\n    }\n\n    function mintByAdmin(string memory _tokenURI) public onlyAdmin {\n        uint tokenID = totalSupply();\n        \n        _safeMint(msg.sender, tokenID);\n        _setTokenURI(tokenID, _tokenURI);       \n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}